using Melville.Mvvm.CsXaml.ValueSource;
namespace Melville.Mvvm.CsXaml.XamlBuilders {
public static partial class WpfDeclarations {

//IsInDesignModeProperty
public static TChild WithDesignerProperties_IsInDesignMode<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.ComponentModel.DesignerProperties.IsInDesignModeProperty); return target;}
public static Style<TChild> WithDesignerProperties_IsInDesignMode<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.ComponentModel.DesignerProperties.IsInDesignModeProperty); return target;}

//StyleProperty
public static TChild WithStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.SetValue(target, System.Windows.FrameworkContentElement.StyleProperty); return target;}
public static Style<TChild> WithStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.StyleSetter(target, System.Windows.FrameworkContentElement.StyleProperty); return target;}
public static TChild WithStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.StyleProperty); return target;}
public static Style<TChild> WithStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.StyleProperty); return target;}

//OverridesDefaultStyleProperty
public static TChild WithOverridesDefaultStyle<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.SetValue(target, System.Windows.FrameworkContentElement.OverridesDefaultStyleProperty); return target;}
public static Style<TChild> WithOverridesDefaultStyle<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.StyleSetter(target, System.Windows.FrameworkContentElement.OverridesDefaultStyleProperty); return target;}
public static TChild WithOverridesDefaultStyle<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.OverridesDefaultStyleProperty); return target;}
public static Style<TChild> WithOverridesDefaultStyle<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.OverridesDefaultStyleProperty); return target;}

//NameProperty
public static TChild WithName<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.SetValue(target, System.Windows.FrameworkContentElement.NameProperty); return target;}
public static Style<TChild> WithName<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.StyleSetter(target, System.Windows.FrameworkContentElement.NameProperty); return target;}
public static TChild WithName<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.NameProperty); return target;}
public static Style<TChild> WithName<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.NameProperty); return target;}
public static TChild WithJournalEntry_Name<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Navigation.JournalEntry.NameProperty); return target;}
public static Style<TChild> WithJournalEntry_Name<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Navigation.JournalEntry.NameProperty); return target;}
public static TChild WithName<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Navigation.JournalEntry, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.JournalEntry{value?.SetValue(target, System.Windows.Navigation.JournalEntry.NameProperty); return target;}
public static Style<TChild> WithName<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Navigation.JournalEntry, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.JournalEntry{value?.StyleSetter(target, System.Windows.Navigation.JournalEntry.NameProperty); return target;}
public static TChild WithAutomationProperties_Name<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.NameProperty); return target;}
public static Style<TChild> WithAutomationProperties_Name<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.NameProperty); return target;}
public static TChild WithName<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.SetValue(target, System.Windows.Media.Animation.Timeline.NameProperty); return target;}
public static Style<TChild> WithName<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.StyleSetter(target, System.Windows.Media.Animation.Timeline.NameProperty); return target;}

//TagProperty
public static TChild WithTag<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.SetValue(target, System.Windows.FrameworkContentElement.TagProperty); return target;}
public static Style<TChild> WithTag<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.StyleSetter(target, System.Windows.FrameworkContentElement.TagProperty); return target;}
public static TChild WithTag<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.TagProperty); return target;}
public static Style<TChild> WithTag<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.TagProperty); return target;}

//LanguageProperty
public static TChild WithLanguage<TChild>(this TChild target, ValueProxy<System.Windows.Markup.XmlLanguage>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.SetValue(target, System.Windows.FrameworkContentElement.LanguageProperty); return target;}
public static Style<TChild> WithLanguage<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Markup.XmlLanguage>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.StyleSetter(target, System.Windows.FrameworkContentElement.LanguageProperty); return target;}
public static TChild WithLanguage<TChild>(this TChild target, ValueProxy<System.Windows.Markup.XmlLanguage>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.LanguageProperty); return target;}
public static Style<TChild> WithLanguage<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Markup.XmlLanguage>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.LanguageProperty); return target;}

//FocusVisualStyleProperty
public static TChild WithFocusVisualStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.SetValue(target, System.Windows.FrameworkContentElement.FocusVisualStyleProperty); return target;}
public static Style<TChild> WithFocusVisualStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.StyleSetter(target, System.Windows.FrameworkContentElement.FocusVisualStyleProperty); return target;}
public static TChild WithFocusVisualStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.FocusVisualStyleProperty); return target;}
public static Style<TChild> WithFocusVisualStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.FocusVisualStyleProperty); return target;}

//CursorProperty
public static TChild WithCursor<TChild>(this TChild target, ValueProxy<System.Windows.Input.Cursor>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.SetValue(target, System.Windows.FrameworkContentElement.CursorProperty); return target;}
public static Style<TChild> WithCursor<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.Cursor>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.StyleSetter(target, System.Windows.FrameworkContentElement.CursorProperty); return target;}
public static TChild WithCursor<TChild>(this TChild target, ValueProxy<System.Windows.Input.Cursor>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.CursorProperty); return target;}
public static Style<TChild> WithCursor<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.Cursor>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.CursorProperty); return target;}

//ForceCursorProperty
public static TChild WithForceCursor<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.SetValue(target, System.Windows.FrameworkContentElement.ForceCursorProperty); return target;}
public static Style<TChild> WithForceCursor<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.StyleSetter(target, System.Windows.FrameworkContentElement.ForceCursorProperty); return target;}
public static TChild WithForceCursor<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.ForceCursorProperty); return target;}
public static Style<TChild> WithForceCursor<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.ForceCursorProperty); return target;}

//InputScopeProperty
public static TChild WithInputScope<TChild>(this TChild target, ValueProxy<System.Windows.Input.InputScope>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.SetValue(target, System.Windows.FrameworkContentElement.InputScopeProperty); return target;}
public static Style<TChild> WithInputScope<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.InputScope>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.StyleSetter(target, System.Windows.FrameworkContentElement.InputScopeProperty); return target;}
public static TChild WithInputScope<TChild>(this TChild target, ValueProxy<System.Windows.Input.InputScope>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.InputScopeProperty); return target;}
public static Style<TChild> WithInputScope<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.InputScope>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.InputScopeProperty); return target;}
public static TChild WithInputMethod_InputScope<TChild>(this TChild target, ValueProxy<System.Windows.Input.InputScope>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.InputMethod.InputScopeProperty); return target;}
public static Style<TChild> WithInputMethod_InputScope<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.InputScope>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.InputMethod.InputScopeProperty); return target;}

//DataContextProperty
public static TChild WithDataContext<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.SetValue(target, System.Windows.FrameworkContentElement.DataContextProperty); return target;}
public static Style<TChild> WithDataContext<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.StyleSetter(target, System.Windows.FrameworkContentElement.DataContextProperty); return target;}
public static TChild WithDataContext<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.DataContextProperty); return target;}
public static Style<TChild> WithDataContext<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.DataContextProperty); return target;}

//BindingGroupProperty
public static TChild WithBindingGroup<TChild>(this TChild target, ValueProxy<System.Windows.Data.BindingGroup>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.SetValue(target, System.Windows.FrameworkContentElement.BindingGroupProperty); return target;}
public static Style<TChild> WithBindingGroup<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Data.BindingGroup>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.StyleSetter(target, System.Windows.FrameworkContentElement.BindingGroupProperty); return target;}
public static TChild WithBindingGroup<TChild>(this TChild target, ValueProxy<System.Windows.Data.BindingGroup>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.BindingGroupProperty); return target;}
public static Style<TChild> WithBindingGroup<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Data.BindingGroup>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.BindingGroupProperty); return target;}

//ToolTipProperty
public static TChild WithToolTip<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.SetValue(target, System.Windows.FrameworkContentElement.ToolTipProperty); return target;}
public static Style<TChild> WithToolTip<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.StyleSetter(target, System.Windows.FrameworkContentElement.ToolTipProperty); return target;}
public static TChild WithToolTip<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.ToolTipProperty); return target;}
public static Style<TChild> WithToolTip<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.ToolTipProperty); return target;}
public static TChild WithToolTipService_ToolTip<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ToolTipService.ToolTipProperty); return target;}
public static Style<TChild> WithToolTipService_ToolTip<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ToolTipService.ToolTipProperty); return target;}

//ContextMenuProperty
public static TChild WithContextMenu<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ContextMenu>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.SetValue(target, System.Windows.FrameworkContentElement.ContextMenuProperty); return target;}
public static Style<TChild> WithContextMenu<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ContextMenu>? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement{value?.StyleSetter(target, System.Windows.FrameworkContentElement.ContextMenuProperty); return target;}
public static TChild WithContextMenu<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ContextMenu>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.ContextMenuProperty); return target;}
public static Style<TChild> WithContextMenu<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ContextMenu>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.ContextMenuProperty); return target;}
public static TChild WithContextMenuService_ContextMenu<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ContextMenu>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ContextMenuService.ContextMenuProperty); return target;}
public static Style<TChild> WithContextMenuService_ContextMenu<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ContextMenu>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ContextMenuService.ContextMenuProperty); return target;}

//UseLayoutRoundingProperty
public static TChild WithUseLayoutRounding<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.UseLayoutRoundingProperty); return target;}
public static Style<TChild> WithUseLayoutRounding<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.UseLayoutRoundingProperty); return target;}

//ActualWidthProperty
public static TChild WithActualWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.ActualWidthProperty); return target;}
public static Style<TChild> WithActualWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.ActualWidthProperty); return target;}
public static TChild WithActualWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.ActualWidthProperty); return target;}
public static Style<TChild> WithActualWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.ActualWidthProperty); return target;}

//ActualHeightProperty
public static TChild WithActualHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.ActualHeightProperty); return target;}
public static Style<TChild> WithActualHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.ActualHeightProperty); return target;}

//LayoutTransformProperty
public static TChild WithLayoutTransform<TChild>(this TChild target, ValueProxy<System.Windows.Media.Transform>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.LayoutTransformProperty); return target;}
public static Style<TChild> WithLayoutTransform<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Transform>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.LayoutTransformProperty); return target;}

//WidthProperty
public static TChild WithWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.WidthProperty); return target;}
public static Style<TChild> WithWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.WidthProperty); return target;}
public static TChild WithWidth<TChild>(this TChild target, ValueProxy<System.Windows.FigureLength>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.SetValue(target, System.Windows.Documents.Figure.WidthProperty); return target;}
public static Style<TChild> WithWidth<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FigureLength>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.StyleSetter(target, System.Windows.Documents.Figure.WidthProperty); return target;}
public static TChild WithWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.Floater, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Floater{value?.SetValue(target, System.Windows.Documents.Floater.WidthProperty); return target;}
public static Style<TChild> WithWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.Floater, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Floater{value?.StyleSetter(target, System.Windows.Documents.Floater.WidthProperty); return target;}
public static TChild WithWidth<TChild>(this TChild target, ValueProxy<System.Windows.GridLength>? value, Disambigator<System.Windows.Documents.TableColumn, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableColumn{value?.SetValue(target, System.Windows.Documents.TableColumn.WidthProperty); return target;}
public static Style<TChild> WithWidth<TChild>(this Style<TChild> target, ValueProxy<System.Windows.GridLength>? value, Disambigator<System.Windows.Documents.TableColumn, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableColumn{value?.StyleSetter(target, System.Windows.Documents.TableColumn.WidthProperty); return target;}
public static TChild WithWidth<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataGridLength>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.WidthProperty); return target;}
public static Style<TChild> WithWidth<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataGridLength>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.WidthProperty); return target;}
public static TChild WithWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.SetValue(target, System.Windows.Controls.GridViewColumn.WidthProperty); return target;}
public static Style<TChild> WithWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.StyleSetter(target, System.Windows.Controls.GridViewColumn.WidthProperty); return target;}
public static TChild WithWidth<TChild>(this TChild target, ValueProxy<System.Windows.GridLength>? value, Disambigator<System.Windows.Controls.ColumnDefinition, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ColumnDefinition{value?.SetValue(target, System.Windows.Controls.ColumnDefinition.WidthProperty); return target;}
public static Style<TChild> WithWidth<TChild>(this Style<TChild> target, ValueProxy<System.Windows.GridLength>? value, Disambigator<System.Windows.Controls.ColumnDefinition, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ColumnDefinition{value?.StyleSetter(target, System.Windows.Controls.ColumnDefinition.WidthProperty); return target;}
public static System.Windows.Media.Media3D.OrthographicCamera WithWidth(this System.Windows.Media.Media3D.OrthographicCamera target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.OrthographicCamera.WidthProperty); return target;}
public static Style<System.Windows.Media.Media3D.OrthographicCamera> WithWidth(this Style<System.Windows.Media.Media3D.OrthographicCamera> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.OrthographicCamera.WidthProperty); return target;}

//MinWidthProperty
public static TChild WithMinWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.MinWidthProperty); return target;}
public static Style<TChild> WithMinWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.MinWidthProperty); return target;}
public static TChild WithMinWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.MinWidthProperty); return target;}
public static Style<TChild> WithMinWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.MinWidthProperty); return target;}
public static TChild WithMinWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ColumnDefinition, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ColumnDefinition{value?.SetValue(target, System.Windows.Controls.ColumnDefinition.MinWidthProperty); return target;}
public static Style<TChild> WithMinWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ColumnDefinition, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ColumnDefinition{value?.StyleSetter(target, System.Windows.Controls.ColumnDefinition.MinWidthProperty); return target;}

//MaxWidthProperty
public static TChild WithMaxWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.MaxWidthProperty); return target;}
public static Style<TChild> WithMaxWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.MaxWidthProperty); return target;}
public static TChild WithMaxWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.MaxWidthProperty); return target;}
public static Style<TChild> WithMaxWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.MaxWidthProperty); return target;}
public static TChild WithMaxWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ColumnDefinition, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ColumnDefinition{value?.SetValue(target, System.Windows.Controls.ColumnDefinition.MaxWidthProperty); return target;}
public static Style<TChild> WithMaxWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ColumnDefinition, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ColumnDefinition{value?.StyleSetter(target, System.Windows.Controls.ColumnDefinition.MaxWidthProperty); return target;}

//HeightProperty
public static TChild WithHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.HeightProperty); return target;}
public static Style<TChild> WithHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.HeightProperty); return target;}
public static TChild WithHeight<TChild>(this TChild target, ValueProxy<System.Windows.FigureLength>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.SetValue(target, System.Windows.Documents.Figure.HeightProperty); return target;}
public static Style<TChild> WithHeight<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FigureLength>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.StyleSetter(target, System.Windows.Documents.Figure.HeightProperty); return target;}
public static TChild WithHeight<TChild>(this TChild target, ValueProxy<System.Windows.GridLength>? value, Disambigator<System.Windows.Controls.RowDefinition, TChild>? doNotUse = null) where TChild: System.Windows.Controls.RowDefinition{value?.SetValue(target, System.Windows.Controls.RowDefinition.HeightProperty); return target;}
public static Style<TChild> WithHeight<TChild>(this Style<TChild> target, ValueProxy<System.Windows.GridLength>? value, Disambigator<System.Windows.Controls.RowDefinition, TChild>? doNotUse = null) where TChild: System.Windows.Controls.RowDefinition{value?.StyleSetter(target, System.Windows.Controls.RowDefinition.HeightProperty); return target;}

//MinHeightProperty
public static TChild WithMinHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.MinHeightProperty); return target;}
public static Style<TChild> WithMinHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.MinHeightProperty); return target;}
public static TChild WithMinHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.RowDefinition, TChild>? doNotUse = null) where TChild: System.Windows.Controls.RowDefinition{value?.SetValue(target, System.Windows.Controls.RowDefinition.MinHeightProperty); return target;}
public static Style<TChild> WithMinHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.RowDefinition, TChild>? doNotUse = null) where TChild: System.Windows.Controls.RowDefinition{value?.StyleSetter(target, System.Windows.Controls.RowDefinition.MinHeightProperty); return target;}

//MaxHeightProperty
public static TChild WithMaxHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.MaxHeightProperty); return target;}
public static Style<TChild> WithMaxHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.MaxHeightProperty); return target;}
public static TChild WithMaxHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.RowDefinition, TChild>? doNotUse = null) where TChild: System.Windows.Controls.RowDefinition{value?.SetValue(target, System.Windows.Controls.RowDefinition.MaxHeightProperty); return target;}
public static Style<TChild> WithMaxHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.RowDefinition, TChild>? doNotUse = null) where TChild: System.Windows.Controls.RowDefinition{value?.StyleSetter(target, System.Windows.Controls.RowDefinition.MaxHeightProperty); return target;}

//FlowDirectionProperty
public static TChild WithFrameworkElement_FlowDirection<TChild>(this TChild target, ValueProxy<System.Windows.FlowDirection>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.FrameworkElement.FlowDirectionProperty); return target;}
public static Style<TChild> WithFrameworkElement_FlowDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FlowDirection>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.FrameworkElement.FlowDirectionProperty); return target;}
public static TChild WithFlowDirection<TChild>(this TChild target, ValueProxy<System.Windows.FlowDirection>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.FlowDirectionProperty); return target;}
public static Style<TChild> WithFlowDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FlowDirection>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.FlowDirectionProperty); return target;}
public static TChild WithFlowDirection<TChild>(this TChild target, ValueProxy<System.Windows.FlowDirection>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.SetValue(target, System.Windows.Documents.Block.FlowDirectionProperty); return target;}
public static Style<TChild> WithFlowDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FlowDirection>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.StyleSetter(target, System.Windows.Documents.Block.FlowDirectionProperty); return target;}
public static TChild WithFlowDirection<TChild>(this TChild target, ValueProxy<System.Windows.FlowDirection>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.FlowDirectionProperty); return target;}
public static Style<TChild> WithFlowDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FlowDirection>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.FlowDirectionProperty); return target;}
public static TChild WithFlowDirection<TChild>(this TChild target, ValueProxy<System.Windows.FlowDirection>? value, Disambigator<System.Windows.Documents.Inline, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Inline{value?.SetValue(target, System.Windows.Documents.Inline.FlowDirectionProperty); return target;}
public static Style<TChild> WithFlowDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FlowDirection>? value, Disambigator<System.Windows.Documents.Inline, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Inline{value?.StyleSetter(target, System.Windows.Documents.Inline.FlowDirectionProperty); return target;}
public static TChild WithFlowDirection<TChild>(this TChild target, ValueProxy<System.Windows.FlowDirection>? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.SetValue(target, System.Windows.Documents.ListItem.FlowDirectionProperty); return target;}
public static Style<TChild> WithFlowDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FlowDirection>? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.StyleSetter(target, System.Windows.Documents.ListItem.FlowDirectionProperty); return target;}
public static TChild WithFlowDirection<TChild>(this TChild target, ValueProxy<System.Windows.FlowDirection>? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.SetValue(target, System.Windows.Documents.TableCell.FlowDirectionProperty); return target;}
public static Style<TChild> WithFlowDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FlowDirection>? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.StyleSetter(target, System.Windows.Documents.TableCell.FlowDirectionProperty); return target;}

//MarginProperty
public static TChild WithMargin<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.MarginProperty); return target;}
public static Style<TChild> WithMargin<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.MarginProperty); return target;}
public static TChild WithMargin<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.AnchoredBlock, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AnchoredBlock{value?.SetValue(target, System.Windows.Documents.AnchoredBlock.MarginProperty); return target;}
public static Style<TChild> WithMargin<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.AnchoredBlock, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AnchoredBlock{value?.StyleSetter(target, System.Windows.Documents.AnchoredBlock.MarginProperty); return target;}
public static TChild WithMargin<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.SetValue(target, System.Windows.Documents.Block.MarginProperty); return target;}
public static Style<TChild> WithMargin<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.StyleSetter(target, System.Windows.Documents.Block.MarginProperty); return target;}
public static TChild WithMargin<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.SetValue(target, System.Windows.Documents.ListItem.MarginProperty); return target;}
public static Style<TChild> WithMargin<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.StyleSetter(target, System.Windows.Documents.ListItem.MarginProperty); return target;}

//HorizontalAlignmentProperty
public static TChild WithHorizontalAlignment<TChild>(this TChild target, ValueProxy<System.Windows.HorizontalAlignment>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.HorizontalAlignmentProperty); return target;}
public static Style<TChild> WithHorizontalAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.HorizontalAlignment>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.HorizontalAlignmentProperty); return target;}
public static TChild WithHorizontalAlignment<TChild>(this TChild target, ValueProxy<System.Windows.HorizontalAlignment>? value, Disambigator<System.Windows.Documents.Floater, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Floater{value?.SetValue(target, System.Windows.Documents.Floater.HorizontalAlignmentProperty); return target;}
public static Style<TChild> WithHorizontalAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.HorizontalAlignment>? value, Disambigator<System.Windows.Documents.Floater, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Floater{value?.StyleSetter(target, System.Windows.Documents.Floater.HorizontalAlignmentProperty); return target;}

//VerticalAlignmentProperty
public static TChild WithVerticalAlignment<TChild>(this TChild target, ValueProxy<System.Windows.VerticalAlignment>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.FrameworkElement.VerticalAlignmentProperty); return target;}
public static Style<TChild> WithVerticalAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.VerticalAlignment>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.FrameworkElement.VerticalAlignmentProperty); return target;}

//CommentsProperty
public static TChild WithLocalization_Comments<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Localization.CommentsProperty); return target;}
public static Style<TChild> WithLocalization_Comments<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Localization.CommentsProperty); return target;}

//AttributesProperty
public static TChild WithLocalization_Attributes<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Localization.AttributesProperty); return target;}
public static Style<TChild> WithLocalization_Attributes<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Localization.AttributesProperty); return target;}

//CustomVisualStateManagerProperty
public static TChild WithVisualStateManager_CustomVisualStateManager<TChild>(this TChild target, ValueProxy<System.Windows.VisualStateManager>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.SetValue(target, System.Windows.VisualStateManager.CustomVisualStateManagerProperty); return target;}
public static Style<TChild> WithVisualStateManager_CustomVisualStateManager<TChild>(this Style<TChild> target, ValueProxy<System.Windows.VisualStateManager>? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement{value?.StyleSetter(target, System.Windows.VisualStateManager.CustomVisualStateManagerProperty); return target;}

//VisualStateGroupsProperty

//TaskbarItemInfoProperty
public static TChild WithTaskbarItemInfo<TChild>(this TChild target, ValueProxy<System.Windows.Shell.TaskbarItemInfo>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Window.TaskbarItemInfoProperty); return target;}
public static Style<TChild> WithTaskbarItemInfo<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Shell.TaskbarItemInfo>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Window.TaskbarItemInfoProperty); return target;}

//AllowsTransparencyProperty
public static TChild WithAllowsTransparency<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Window.AllowsTransparencyProperty); return target;}
public static Style<TChild> WithAllowsTransparency<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Window.AllowsTransparencyProperty); return target;}
public static TChild WithAllowsTransparency<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.SetValue(target, System.Windows.Controls.Primitives.Popup.AllowsTransparencyProperty); return target;}
public static Style<TChild> WithAllowsTransparency<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.StyleSetter(target, System.Windows.Controls.Primitives.Popup.AllowsTransparencyProperty); return target;}

//TitleProperty
public static TChild WithTitle<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Window.TitleProperty); return target;}
public static Style<TChild> WithTitle<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Window.TitleProperty); return target;}
public static TChild WithTitle<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.SetValue(target, System.Windows.Controls.Page.TitleProperty); return target;}
public static Style<TChild> WithTitle<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.StyleSetter(target, System.Windows.Controls.Page.TitleProperty); return target;}

//IconProperty
public static TChild WithIcon<TChild>(this TChild target, ValueProxy<System.Windows.Media.ImageSource>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Window.IconProperty); return target;}
public static Style<TChild> WithIcon<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.ImageSource>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Window.IconProperty); return target;}
public static TChild WithIcon<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.IconProperty); return target;}
public static Style<TChild> WithIcon<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.IconProperty); return target;}

//SizeToContentProperty
public static TChild WithSizeToContent<TChild>(this TChild target, ValueProxy<System.Windows.SizeToContent>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Window.SizeToContentProperty); return target;}
public static Style<TChild> WithSizeToContent<TChild>(this Style<TChild> target, ValueProxy<System.Windows.SizeToContent>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Window.SizeToContentProperty); return target;}

//TopProperty
public static TChild WithTop<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Window.TopProperty); return target;}
public static Style<TChild> WithTop<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Window.TopProperty); return target;}
public static TChild WithFixedPage_Top<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Documents.FixedPage.TopProperty); return target;}
public static Style<TChild> WithFixedPage_Top<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Documents.FixedPage.TopProperty); return target;}
public static TChild WithCanvas_Top<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.Canvas.TopProperty); return target;}
public static Style<TChild> WithCanvas_Top<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.Canvas.TopProperty); return target;}
public static TChild WithInkCanvas_Top<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.InkCanvas.TopProperty); return target;}
public static Style<TChild> WithInkCanvas_Top<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.InkCanvas.TopProperty); return target;}

//LeftProperty
public static TChild WithLeft<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Window.LeftProperty); return target;}
public static Style<TChild> WithLeft<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Window.LeftProperty); return target;}
public static TChild WithFixedPage_Left<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Documents.FixedPage.LeftProperty); return target;}
public static Style<TChild> WithFixedPage_Left<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Documents.FixedPage.LeftProperty); return target;}
public static TChild WithCanvas_Left<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.Canvas.LeftProperty); return target;}
public static Style<TChild> WithCanvas_Left<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.Canvas.LeftProperty); return target;}
public static TChild WithInkCanvas_Left<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.InkCanvas.LeftProperty); return target;}
public static Style<TChild> WithInkCanvas_Left<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.InkCanvas.LeftProperty); return target;}

//ShowInTaskbarProperty
public static TChild WithShowInTaskbar<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Window.ShowInTaskbarProperty); return target;}
public static Style<TChild> WithShowInTaskbar<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Window.ShowInTaskbarProperty); return target;}

//IsActiveProperty
public static TChild WithIsActive<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Window.IsActiveProperty); return target;}
public static Style<TChild> WithIsActive<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Window.IsActiveProperty); return target;}
public static System.Windows.Controls.StickyNoteControl WithIsActive(this System.Windows.Controls.StickyNoteControl target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Controls.StickyNoteControl.IsActiveProperty); return target;}
public static Style<System.Windows.Controls.StickyNoteControl> WithIsActive(this Style<System.Windows.Controls.StickyNoteControl> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Controls.StickyNoteControl.IsActiveProperty); return target;}

//WindowStyleProperty
public static TChild WithWindowStyle<TChild>(this TChild target, ValueProxy<System.Windows.WindowStyle>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Window.WindowStyleProperty); return target;}
public static Style<TChild> WithWindowStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.WindowStyle>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Window.WindowStyleProperty); return target;}

//WindowStateProperty
public static TChild WithWindowState<TChild>(this TChild target, ValueProxy<System.Windows.WindowState>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Window.WindowStateProperty); return target;}
public static Style<TChild> WithWindowState<TChild>(this Style<TChild> target, ValueProxy<System.Windows.WindowState>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Window.WindowStateProperty); return target;}

//ResizeModeProperty
public static TChild WithResizeMode<TChild>(this TChild target, ValueProxy<System.Windows.ResizeMode>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Window.ResizeModeProperty); return target;}
public static Style<TChild> WithResizeMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.ResizeMode>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Window.ResizeModeProperty); return target;}

//TopmostProperty
public static TChild WithTopmost<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Window.TopmostProperty); return target;}
public static Style<TChild> WithTopmost<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Window.TopmostProperty); return target;}

//ShowActivatedProperty
public static TChild WithShowActivated<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Window.ShowActivatedProperty); return target;}
public static Style<TChild> WithShowActivated<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Window.ShowActivatedProperty); return target;}

//ProgressStateProperty
public static System.Windows.Shell.TaskbarItemInfo WithProgressState(this System.Windows.Shell.TaskbarItemInfo target, ValueProxy<System.Windows.Shell.TaskbarItemProgressState>? value) {value?.SetValue(target, System.Windows.Shell.TaskbarItemInfo.ProgressStateProperty); return target;}
public static Style<System.Windows.Shell.TaskbarItemInfo> WithProgressState(this Style<System.Windows.Shell.TaskbarItemInfo> target, ValueProxy<System.Windows.Shell.TaskbarItemProgressState>? value) {value?.StyleSetter(target, System.Windows.Shell.TaskbarItemInfo.ProgressStateProperty); return target;}

//ProgressValueProperty
public static System.Windows.Shell.TaskbarItemInfo WithProgressValue(this System.Windows.Shell.TaskbarItemInfo target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Shell.TaskbarItemInfo.ProgressValueProperty); return target;}
public static Style<System.Windows.Shell.TaskbarItemInfo> WithProgressValue(this Style<System.Windows.Shell.TaskbarItemInfo> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Shell.TaskbarItemInfo.ProgressValueProperty); return target;}

//OverlayProperty
public static System.Windows.Shell.TaskbarItemInfo WithOverlay(this System.Windows.Shell.TaskbarItemInfo target, ValueProxy<System.Windows.Media.ImageSource>? value) {value?.SetValue(target, System.Windows.Shell.TaskbarItemInfo.OverlayProperty); return target;}
public static Style<System.Windows.Shell.TaskbarItemInfo> WithOverlay(this Style<System.Windows.Shell.TaskbarItemInfo> target, ValueProxy<System.Windows.Media.ImageSource>? value) {value?.StyleSetter(target, System.Windows.Shell.TaskbarItemInfo.OverlayProperty); return target;}

//DescriptionProperty
public static System.Windows.Shell.TaskbarItemInfo WithDescription(this System.Windows.Shell.TaskbarItemInfo target, ValueProxy<System.String>? value) {value?.SetValue(target, System.Windows.Shell.TaskbarItemInfo.DescriptionProperty); return target;}
public static Style<System.Windows.Shell.TaskbarItemInfo> WithDescription(this Style<System.Windows.Shell.TaskbarItemInfo> target, ValueProxy<System.String>? value) {value?.StyleSetter(target, System.Windows.Shell.TaskbarItemInfo.DescriptionProperty); return target;}
public static System.Windows.Shell.ThumbButtonInfo WithDescription(this System.Windows.Shell.ThumbButtonInfo target, ValueProxy<System.String>? value) {value?.SetValue(target, System.Windows.Shell.ThumbButtonInfo.DescriptionProperty); return target;}
public static Style<System.Windows.Shell.ThumbButtonInfo> WithDescription(this Style<System.Windows.Shell.ThumbButtonInfo> target, ValueProxy<System.String>? value) {value?.StyleSetter(target, System.Windows.Shell.ThumbButtonInfo.DescriptionProperty); return target;}

//ThumbnailClipMarginProperty
public static System.Windows.Shell.TaskbarItemInfo WithThumbnailClipMargin(this System.Windows.Shell.TaskbarItemInfo target, ValueProxy<System.Windows.Thickness>? value) {value?.SetValue(target, System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMarginProperty); return target;}
public static Style<System.Windows.Shell.TaskbarItemInfo> WithThumbnailClipMargin(this Style<System.Windows.Shell.TaskbarItemInfo> target, ValueProxy<System.Windows.Thickness>? value) {value?.StyleSetter(target, System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMarginProperty); return target;}

//ThumbButtonInfosProperty
public static System.Windows.Shell.TaskbarItemInfo WithThumbButtonInfos(this System.Windows.Shell.TaskbarItemInfo target, ValueProxy<System.Windows.Shell.ThumbButtonInfoCollection>? value) {value?.SetValue(target, System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfosProperty); return target;}
public static Style<System.Windows.Shell.TaskbarItemInfo> WithThumbButtonInfos(this Style<System.Windows.Shell.TaskbarItemInfo> target, ValueProxy<System.Windows.Shell.ThumbButtonInfoCollection>? value) {value?.StyleSetter(target, System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfosProperty); return target;}

//VisibilityProperty
public static System.Windows.Shell.ThumbButtonInfo WithVisibility(this System.Windows.Shell.ThumbButtonInfo target, ValueProxy<System.Windows.Visibility>? value) {value?.SetValue(target, System.Windows.Shell.ThumbButtonInfo.VisibilityProperty); return target;}
public static Style<System.Windows.Shell.ThumbButtonInfo> WithVisibility(this Style<System.Windows.Shell.ThumbButtonInfo> target, ValueProxy<System.Windows.Visibility>? value) {value?.StyleSetter(target, System.Windows.Shell.ThumbButtonInfo.VisibilityProperty); return target;}
public static TChild WithVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.VisibilityProperty); return target;}
public static Style<TChild> WithVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.VisibilityProperty); return target;}
public static TChild WithVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.VisibilityProperty); return target;}
public static Style<TChild> WithVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.VisibilityProperty); return target;}
public static TChild WithVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.VisibilityProperty); return target;}
public static Style<TChild> WithVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.VisibilityProperty); return target;}

//DismissWhenClickedProperty
public static System.Windows.Shell.ThumbButtonInfo WithDismissWhenClicked(this System.Windows.Shell.ThumbButtonInfo target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Shell.ThumbButtonInfo.DismissWhenClickedProperty); return target;}
public static Style<System.Windows.Shell.ThumbButtonInfo> WithDismissWhenClicked(this Style<System.Windows.Shell.ThumbButtonInfo> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Shell.ThumbButtonInfo.DismissWhenClickedProperty); return target;}

//ImageSourceProperty
public static System.Windows.Shell.ThumbButtonInfo WithImageSource(this System.Windows.Shell.ThumbButtonInfo target, ValueProxy<System.Windows.Media.ImageSource>? value) {value?.SetValue(target, System.Windows.Shell.ThumbButtonInfo.ImageSourceProperty); return target;}
public static Style<System.Windows.Shell.ThumbButtonInfo> WithImageSource(this Style<System.Windows.Shell.ThumbButtonInfo> target, ValueProxy<System.Windows.Media.ImageSource>? value) {value?.StyleSetter(target, System.Windows.Shell.ThumbButtonInfo.ImageSourceProperty); return target;}
public static System.Windows.Media.ImageDrawing WithImageSource(this System.Windows.Media.ImageDrawing target, ValueProxy<System.Windows.Media.ImageSource>? value) {value?.SetValue(target, System.Windows.Media.ImageDrawing.ImageSourceProperty); return target;}
public static Style<System.Windows.Media.ImageDrawing> WithImageSource(this Style<System.Windows.Media.ImageDrawing> target, ValueProxy<System.Windows.Media.ImageSource>? value) {value?.StyleSetter(target, System.Windows.Media.ImageDrawing.ImageSourceProperty); return target;}
public static System.Windows.Media.ImageBrush WithImageSource(this System.Windows.Media.ImageBrush target, ValueProxy<System.Windows.Media.ImageSource>? value) {value?.SetValue(target, System.Windows.Media.ImageBrush.ImageSourceProperty); return target;}
public static Style<System.Windows.Media.ImageBrush> WithImageSource(this Style<System.Windows.Media.ImageBrush> target, ValueProxy<System.Windows.Media.ImageSource>? value) {value?.StyleSetter(target, System.Windows.Media.ImageBrush.ImageSourceProperty); return target;}

//IsBackgroundVisibleProperty
public static System.Windows.Shell.ThumbButtonInfo WithIsBackgroundVisible(this System.Windows.Shell.ThumbButtonInfo target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Shell.ThumbButtonInfo.IsBackgroundVisibleProperty); return target;}
public static Style<System.Windows.Shell.ThumbButtonInfo> WithIsBackgroundVisible(this Style<System.Windows.Shell.ThumbButtonInfo> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Shell.ThumbButtonInfo.IsBackgroundVisibleProperty); return target;}

//IsEnabledProperty
public static System.Windows.Shell.ThumbButtonInfo WithIsEnabled(this System.Windows.Shell.ThumbButtonInfo target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Shell.ThumbButtonInfo.IsEnabledProperty); return target;}
public static Style<System.Windows.Shell.ThumbButtonInfo> WithIsEnabled(this Style<System.Windows.Shell.ThumbButtonInfo> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Shell.ThumbButtonInfo.IsEnabledProperty); return target;}
public static TChild WithContextMenuService_IsEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ContextMenuService.IsEnabledProperty); return target;}
public static Style<TChild> WithContextMenuService_IsEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ContextMenuService.IsEnabledProperty); return target;}
public static TChild WithSpellCheck_IsEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.SpellCheck.IsEnabledProperty); return target;}
public static Style<TChild> WithSpellCheck_IsEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.SpellCheck.IsEnabledProperty); return target;}
public static TChild WithToolTipService_IsEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ToolTipService.IsEnabledProperty); return target;}
public static Style<TChild> WithToolTipService_IsEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ToolTipService.IsEnabledProperty); return target;}
public static TChild WithIsEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.IsEnabledProperty); return target;}
public static Style<TChild> WithIsEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.IsEnabledProperty); return target;}
public static TChild WithIsEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsEnabledProperty); return target;}
public static Style<TChild> WithIsEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsEnabledProperty); return target;}
public static TChild WithIsEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.IsEnabledProperty); return target;}
public static Style<TChild> WithIsEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.IsEnabledProperty); return target;}

//IsInteractiveProperty
public static System.Windows.Shell.ThumbButtonInfo WithIsInteractive(this System.Windows.Shell.ThumbButtonInfo target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Shell.ThumbButtonInfo.IsInteractiveProperty); return target;}
public static Style<System.Windows.Shell.ThumbButtonInfo> WithIsInteractive(this Style<System.Windows.Shell.ThumbButtonInfo> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Shell.ThumbButtonInfo.IsInteractiveProperty); return target;}

//CommandProperty
public static System.Windows.Shell.ThumbButtonInfo WithCommand(this System.Windows.Shell.ThumbButtonInfo target, ValueProxy<System.Windows.Input.ICommand>? value) {value?.SetValue(target, System.Windows.Shell.ThumbButtonInfo.CommandProperty); return target;}
public static Style<System.Windows.Shell.ThumbButtonInfo> WithCommand(this Style<System.Windows.Shell.ThumbButtonInfo> target, ValueProxy<System.Windows.Input.ICommand>? value) {value?.StyleSetter(target, System.Windows.Shell.ThumbButtonInfo.CommandProperty); return target;}
public static TChild WithCommand<TChild>(this TChild target, ValueProxy<System.Windows.Input.ICommand>? value, Disambigator<System.Windows.Documents.Hyperlink, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Hyperlink{value?.SetValue(target, System.Windows.Documents.Hyperlink.CommandProperty); return target;}
public static Style<TChild> WithCommand<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.ICommand>? value, Disambigator<System.Windows.Documents.Hyperlink, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Hyperlink{value?.StyleSetter(target, System.Windows.Documents.Hyperlink.CommandProperty); return target;}
public static TChild WithCommand<TChild>(this TChild target, ValueProxy<System.Windows.Input.ICommand>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.CommandProperty); return target;}
public static Style<TChild> WithCommand<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.ICommand>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.CommandProperty); return target;}
public static TChild WithCommand<TChild>(this TChild target, ValueProxy<System.Windows.Input.ICommand>? value, Disambigator<System.Windows.Controls.Primitives.ButtonBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ButtonBase{value?.SetValue(target, System.Windows.Controls.Primitives.ButtonBase.CommandProperty); return target;}
public static Style<TChild> WithCommand<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.ICommand>? value, Disambigator<System.Windows.Controls.Primitives.ButtonBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ButtonBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.ButtonBase.CommandProperty); return target;}
public static TChild WithCommand<TChild>(this TChild target, ValueProxy<System.Windows.Input.ICommand>? value, Disambigator<System.Windows.Input.InputBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputBinding{value?.SetValue(target, System.Windows.Input.InputBinding.CommandProperty); return target;}
public static Style<TChild> WithCommand<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.ICommand>? value, Disambigator<System.Windows.Input.InputBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputBinding{value?.StyleSetter(target, System.Windows.Input.InputBinding.CommandProperty); return target;}

//CommandParameterProperty
public static System.Windows.Shell.ThumbButtonInfo WithCommandParameter(this System.Windows.Shell.ThumbButtonInfo target, ValueProxy<System.Object>? value) {value?.SetValue(target, System.Windows.Shell.ThumbButtonInfo.CommandParameterProperty); return target;}
public static Style<System.Windows.Shell.ThumbButtonInfo> WithCommandParameter(this Style<System.Windows.Shell.ThumbButtonInfo> target, ValueProxy<System.Object>? value) {value?.StyleSetter(target, System.Windows.Shell.ThumbButtonInfo.CommandParameterProperty); return target;}
public static TChild WithCommandParameter<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Documents.Hyperlink, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Hyperlink{value?.SetValue(target, System.Windows.Documents.Hyperlink.CommandParameterProperty); return target;}
public static Style<TChild> WithCommandParameter<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Documents.Hyperlink, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Hyperlink{value?.StyleSetter(target, System.Windows.Documents.Hyperlink.CommandParameterProperty); return target;}
public static TChild WithCommandParameter<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.CommandParameterProperty); return target;}
public static Style<TChild> WithCommandParameter<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.CommandParameterProperty); return target;}
public static TChild WithCommandParameter<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.Primitives.ButtonBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ButtonBase{value?.SetValue(target, System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty); return target;}
public static Style<TChild> WithCommandParameter<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.Primitives.ButtonBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ButtonBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty); return target;}
public static TChild WithCommandParameter<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Input.InputBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputBinding{value?.SetValue(target, System.Windows.Input.InputBinding.CommandParameterProperty); return target;}
public static Style<TChild> WithCommandParameter<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Input.InputBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputBinding{value?.StyleSetter(target, System.Windows.Input.InputBinding.CommandParameterProperty); return target;}

//CommandTargetProperty
public static System.Windows.Shell.ThumbButtonInfo WithCommandTarget(this System.Windows.Shell.ThumbButtonInfo target, ValueProxy<System.Windows.IInputElement>? value) {value?.SetValue(target, System.Windows.Shell.ThumbButtonInfo.CommandTargetProperty); return target;}
public static Style<System.Windows.Shell.ThumbButtonInfo> WithCommandTarget(this Style<System.Windows.Shell.ThumbButtonInfo> target, ValueProxy<System.Windows.IInputElement>? value) {value?.StyleSetter(target, System.Windows.Shell.ThumbButtonInfo.CommandTargetProperty); return target;}
public static TChild WithCommandTarget<TChild>(this TChild target, ValueProxy<System.Windows.IInputElement>? value, Disambigator<System.Windows.Documents.Hyperlink, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Hyperlink{value?.SetValue(target, System.Windows.Documents.Hyperlink.CommandTargetProperty); return target;}
public static Style<TChild> WithCommandTarget<TChild>(this Style<TChild> target, ValueProxy<System.Windows.IInputElement>? value, Disambigator<System.Windows.Documents.Hyperlink, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Hyperlink{value?.StyleSetter(target, System.Windows.Documents.Hyperlink.CommandTargetProperty); return target;}
public static TChild WithCommandTarget<TChild>(this TChild target, ValueProxy<System.Windows.IInputElement>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.CommandTargetProperty); return target;}
public static Style<TChild> WithCommandTarget<TChild>(this Style<TChild> target, ValueProxy<System.Windows.IInputElement>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.CommandTargetProperty); return target;}
public static TChild WithCommandTarget<TChild>(this TChild target, ValueProxy<System.Windows.IInputElement>? value, Disambigator<System.Windows.Controls.Primitives.ButtonBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ButtonBase{value?.SetValue(target, System.Windows.Controls.Primitives.ButtonBase.CommandTargetProperty); return target;}
public static Style<TChild> WithCommandTarget<TChild>(this Style<TChild> target, ValueProxy<System.Windows.IInputElement>? value, Disambigator<System.Windows.Controls.Primitives.ButtonBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ButtonBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.ButtonBase.CommandTargetProperty); return target;}
public static TChild WithCommandTarget<TChild>(this TChild target, ValueProxy<System.Windows.IInputElement>? value, Disambigator<System.Windows.Input.InputBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputBinding{value?.SetValue(target, System.Windows.Input.InputBinding.CommandTargetProperty); return target;}
public static Style<TChild> WithCommandTarget<TChild>(this Style<TChild> target, ValueProxy<System.Windows.IInputElement>? value, Disambigator<System.Windows.Input.InputBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputBinding{value?.StyleSetter(target, System.Windows.Input.InputBinding.CommandTargetProperty); return target;}

//WindowChromeProperty
public static TChild WithWindowChrome_WindowChrome<TChild>(this TChild target, ValueProxy<System.Windows.Shell.WindowChrome>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.SetValue(target, System.Windows.Shell.WindowChrome.WindowChromeProperty); return target;}
public static Style<TChild> WithWindowChrome_WindowChrome<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Shell.WindowChrome>? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window{value?.StyleSetter(target, System.Windows.Shell.WindowChrome.WindowChromeProperty); return target;}


//IsHitTestVisibleInChromeProperty
public static TChild WithWindowChrome_IsHitTestVisibleInChrome<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Shell.WindowChrome.IsHitTestVisibleInChromeProperty); return target;}
public static Style<TChild> WithWindowChrome_IsHitTestVisibleInChrome<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Shell.WindowChrome.IsHitTestVisibleInChromeProperty); return target;}

//ResizeGripDirectionProperty
public static TChild WithWindowChrome_ResizeGripDirection<TChild>(this TChild target, ValueProxy<System.Windows.Shell.ResizeGripDirection>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Shell.WindowChrome.ResizeGripDirectionProperty); return target;}
public static Style<TChild> WithWindowChrome_ResizeGripDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Shell.ResizeGripDirection>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Shell.WindowChrome.ResizeGripDirectionProperty); return target;}

//CaptionHeightProperty
public static TChild WithCaptionHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Shell.WindowChrome, TChild>? doNotUse = null) where TChild: System.Windows.Shell.WindowChrome{value?.SetValue(target, System.Windows.Shell.WindowChrome.CaptionHeightProperty); return target;}
public static Style<TChild> WithCaptionHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Shell.WindowChrome, TChild>? doNotUse = null) where TChild: System.Windows.Shell.WindowChrome{value?.StyleSetter(target, System.Windows.Shell.WindowChrome.CaptionHeightProperty); return target;}

//ResizeBorderThicknessProperty
public static TChild WithResizeBorderThickness<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Shell.WindowChrome, TChild>? doNotUse = null) where TChild: System.Windows.Shell.WindowChrome{value?.SetValue(target, System.Windows.Shell.WindowChrome.ResizeBorderThicknessProperty); return target;}
public static Style<TChild> WithResizeBorderThickness<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Shell.WindowChrome, TChild>? doNotUse = null) where TChild: System.Windows.Shell.WindowChrome{value?.StyleSetter(target, System.Windows.Shell.WindowChrome.ResizeBorderThicknessProperty); return target;}

//GlassFrameThicknessProperty
public static TChild WithGlassFrameThickness<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Shell.WindowChrome, TChild>? doNotUse = null) where TChild: System.Windows.Shell.WindowChrome{value?.SetValue(target, System.Windows.Shell.WindowChrome.GlassFrameThicknessProperty); return target;}
public static Style<TChild> WithGlassFrameThickness<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Shell.WindowChrome, TChild>? doNotUse = null) where TChild: System.Windows.Shell.WindowChrome{value?.StyleSetter(target, System.Windows.Shell.WindowChrome.GlassFrameThicknessProperty); return target;}

//UseAeroCaptionButtonsProperty
public static TChild WithUseAeroCaptionButtons<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Shell.WindowChrome, TChild>? doNotUse = null) where TChild: System.Windows.Shell.WindowChrome{value?.SetValue(target, System.Windows.Shell.WindowChrome.UseAeroCaptionButtonsProperty); return target;}
public static Style<TChild> WithUseAeroCaptionButtons<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Shell.WindowChrome, TChild>? doNotUse = null) where TChild: System.Windows.Shell.WindowChrome{value?.StyleSetter(target, System.Windows.Shell.WindowChrome.UseAeroCaptionButtonsProperty); return target;}

//CornerRadiusProperty
public static TChild WithCornerRadius<TChild>(this TChild target, ValueProxy<System.Windows.CornerRadius>? value, Disambigator<System.Windows.Shell.WindowChrome, TChild>? doNotUse = null) where TChild: System.Windows.Shell.WindowChrome{value?.SetValue(target, System.Windows.Shell.WindowChrome.CornerRadiusProperty); return target;}
public static Style<TChild> WithCornerRadius<TChild>(this Style<TChild> target, ValueProxy<System.Windows.CornerRadius>? value, Disambigator<System.Windows.Shell.WindowChrome, TChild>? doNotUse = null) where TChild: System.Windows.Shell.WindowChrome{value?.StyleSetter(target, System.Windows.Shell.WindowChrome.CornerRadiusProperty); return target;}
public static TChild WithCornerRadius<TChild>(this TChild target, ValueProxy<System.Windows.CornerRadius>? value, Disambigator<System.Windows.Controls.Border, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Border{value?.SetValue(target, System.Windows.Controls.Border.CornerRadiusProperty); return target;}
public static Style<TChild> WithCornerRadius<TChild>(this Style<TChild> target, ValueProxy<System.Windows.CornerRadius>? value, Disambigator<System.Windows.Controls.Border, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Border{value?.StyleSetter(target, System.Windows.Controls.Border.CornerRadiusProperty); return target;}

//NonClientFrameEdgesProperty
public static TChild WithNonClientFrameEdges<TChild>(this TChild target, ValueProxy<System.Windows.Shell.NonClientFrameEdges>? value, Disambigator<System.Windows.Shell.WindowChrome, TChild>? doNotUse = null) where TChild: System.Windows.Shell.WindowChrome{value?.SetValue(target, System.Windows.Shell.WindowChrome.NonClientFrameEdgesProperty); return target;}
public static Style<TChild> WithNonClientFrameEdges<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Shell.NonClientFrameEdges>? value, Disambigator<System.Windows.Shell.WindowChrome, TChild>? doNotUse = null) where TChild: System.Windows.Shell.WindowChrome{value?.StyleSetter(target, System.Windows.Shell.WindowChrome.NonClientFrameEdgesProperty); return target;}

//X1Property
public static System.Windows.Shapes.Line WithX1(this System.Windows.Shapes.Line target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Shapes.Line.X1Property); return target;}
public static Style<System.Windows.Shapes.Line> WithX1(this Style<System.Windows.Shapes.Line> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Shapes.Line.X1Property); return target;}

//Y1Property
public static System.Windows.Shapes.Line WithY1(this System.Windows.Shapes.Line target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Shapes.Line.Y1Property); return target;}
public static Style<System.Windows.Shapes.Line> WithY1(this Style<System.Windows.Shapes.Line> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Shapes.Line.Y1Property); return target;}

//X2Property
public static System.Windows.Shapes.Line WithX2(this System.Windows.Shapes.Line target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Shapes.Line.X2Property); return target;}
public static Style<System.Windows.Shapes.Line> WithX2(this Style<System.Windows.Shapes.Line> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Shapes.Line.X2Property); return target;}

//Y2Property
public static System.Windows.Shapes.Line WithY2(this System.Windows.Shapes.Line target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Shapes.Line.Y2Property); return target;}
public static Style<System.Windows.Shapes.Line> WithY2(this Style<System.Windows.Shapes.Line> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Shapes.Line.Y2Property); return target;}

//DataProperty
public static System.Windows.Shapes.Path WithData(this System.Windows.Shapes.Path target, ValueProxy<System.Windows.Media.Geometry>? value) {value?.SetValue(target, System.Windows.Shapes.Path.DataProperty); return target;}
public static Style<System.Windows.Shapes.Path> WithData(this Style<System.Windows.Shapes.Path> target, ValueProxy<System.Windows.Media.Geometry>? value) {value?.StyleSetter(target, System.Windows.Shapes.Path.DataProperty); return target;}

//PointsProperty
public static System.Windows.Shapes.Polygon WithPoints(this System.Windows.Shapes.Polygon target, ValueProxy<System.Windows.Media.PointCollection>? value) {value?.SetValue(target, System.Windows.Shapes.Polygon.PointsProperty); return target;}
public static Style<System.Windows.Shapes.Polygon> WithPoints(this Style<System.Windows.Shapes.Polygon> target, ValueProxy<System.Windows.Media.PointCollection>? value) {value?.StyleSetter(target, System.Windows.Shapes.Polygon.PointsProperty); return target;}
public static System.Windows.Shapes.Polyline WithPoints(this System.Windows.Shapes.Polyline target, ValueProxy<System.Windows.Media.PointCollection>? value) {value?.SetValue(target, System.Windows.Shapes.Polyline.PointsProperty); return target;}
public static Style<System.Windows.Shapes.Polyline> WithPoints(this Style<System.Windows.Shapes.Polyline> target, ValueProxy<System.Windows.Media.PointCollection>? value) {value?.StyleSetter(target, System.Windows.Shapes.Polyline.PointsProperty); return target;}
public static System.Windows.Media.PolyLineSegment WithPoints(this System.Windows.Media.PolyLineSegment target, ValueProxy<System.Windows.Media.PointCollection>? value) {value?.SetValue(target, System.Windows.Media.PolyLineSegment.PointsProperty); return target;}
public static Style<System.Windows.Media.PolyLineSegment> WithPoints(this Style<System.Windows.Media.PolyLineSegment> target, ValueProxy<System.Windows.Media.PointCollection>? value) {value?.StyleSetter(target, System.Windows.Media.PolyLineSegment.PointsProperty); return target;}
public static System.Windows.Media.PolyBezierSegment WithPoints(this System.Windows.Media.PolyBezierSegment target, ValueProxy<System.Windows.Media.PointCollection>? value) {value?.SetValue(target, System.Windows.Media.PolyBezierSegment.PointsProperty); return target;}
public static Style<System.Windows.Media.PolyBezierSegment> WithPoints(this Style<System.Windows.Media.PolyBezierSegment> target, ValueProxy<System.Windows.Media.PointCollection>? value) {value?.StyleSetter(target, System.Windows.Media.PolyBezierSegment.PointsProperty); return target;}
public static System.Windows.Media.PolyQuadraticBezierSegment WithPoints(this System.Windows.Media.PolyQuadraticBezierSegment target, ValueProxy<System.Windows.Media.PointCollection>? value) {value?.SetValue(target, System.Windows.Media.PolyQuadraticBezierSegment.PointsProperty); return target;}
public static Style<System.Windows.Media.PolyQuadraticBezierSegment> WithPoints(this Style<System.Windows.Media.PolyQuadraticBezierSegment> target, ValueProxy<System.Windows.Media.PointCollection>? value) {value?.StyleSetter(target, System.Windows.Media.PolyQuadraticBezierSegment.PointsProperty); return target;}

//FillRuleProperty
public static System.Windows.Shapes.Polygon WithFillRule(this System.Windows.Shapes.Polygon target, ValueProxy<System.Windows.Media.FillRule>? value) {value?.SetValue(target, System.Windows.Shapes.Polygon.FillRuleProperty); return target;}
public static Style<System.Windows.Shapes.Polygon> WithFillRule(this Style<System.Windows.Shapes.Polygon> target, ValueProxy<System.Windows.Media.FillRule>? value) {value?.StyleSetter(target, System.Windows.Shapes.Polygon.FillRuleProperty); return target;}
public static System.Windows.Shapes.Polyline WithFillRule(this System.Windows.Shapes.Polyline target, ValueProxy<System.Windows.Media.FillRule>? value) {value?.SetValue(target, System.Windows.Shapes.Polyline.FillRuleProperty); return target;}
public static Style<System.Windows.Shapes.Polyline> WithFillRule(this Style<System.Windows.Shapes.Polyline> target, ValueProxy<System.Windows.Media.FillRule>? value) {value?.StyleSetter(target, System.Windows.Shapes.Polyline.FillRuleProperty); return target;}
public static System.Windows.Media.PathGeometry WithFillRule(this System.Windows.Media.PathGeometry target, ValueProxy<System.Windows.Media.FillRule>? value) {value?.SetValue(target, System.Windows.Media.PathGeometry.FillRuleProperty); return target;}
public static Style<System.Windows.Media.PathGeometry> WithFillRule(this Style<System.Windows.Media.PathGeometry> target, ValueProxy<System.Windows.Media.FillRule>? value) {value?.StyleSetter(target, System.Windows.Media.PathGeometry.FillRuleProperty); return target;}
public static System.Windows.Media.StreamGeometry WithFillRule(this System.Windows.Media.StreamGeometry target, ValueProxy<System.Windows.Media.FillRule>? value) {value?.SetValue(target, System.Windows.Media.StreamGeometry.FillRuleProperty); return target;}
public static Style<System.Windows.Media.StreamGeometry> WithFillRule(this Style<System.Windows.Media.StreamGeometry> target, ValueProxy<System.Windows.Media.FillRule>? value) {value?.StyleSetter(target, System.Windows.Media.StreamGeometry.FillRuleProperty); return target;}
public static System.Windows.Media.GeometryGroup WithFillRule(this System.Windows.Media.GeometryGroup target, ValueProxy<System.Windows.Media.FillRule>? value) {value?.SetValue(target, System.Windows.Media.GeometryGroup.FillRuleProperty); return target;}
public static Style<System.Windows.Media.GeometryGroup> WithFillRule(this Style<System.Windows.Media.GeometryGroup> target, ValueProxy<System.Windows.Media.FillRule>? value) {value?.StyleSetter(target, System.Windows.Media.GeometryGroup.FillRuleProperty); return target;}

//RadiusXProperty
public static System.Windows.Shapes.Rectangle WithRadiusX(this System.Windows.Shapes.Rectangle target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Shapes.Rectangle.RadiusXProperty); return target;}
public static Style<System.Windows.Shapes.Rectangle> WithRadiusX(this Style<System.Windows.Shapes.Rectangle> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Shapes.Rectangle.RadiusXProperty); return target;}
public static System.Windows.Media.RectangleGeometry WithRadiusX(this System.Windows.Media.RectangleGeometry target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.RectangleGeometry.RadiusXProperty); return target;}
public static Style<System.Windows.Media.RectangleGeometry> WithRadiusX(this Style<System.Windows.Media.RectangleGeometry> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.RectangleGeometry.RadiusXProperty); return target;}
public static System.Windows.Media.EllipseGeometry WithRadiusX(this System.Windows.Media.EllipseGeometry target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.EllipseGeometry.RadiusXProperty); return target;}
public static Style<System.Windows.Media.EllipseGeometry> WithRadiusX(this Style<System.Windows.Media.EllipseGeometry> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.EllipseGeometry.RadiusXProperty); return target;}
public static System.Windows.Media.RadialGradientBrush WithRadiusX(this System.Windows.Media.RadialGradientBrush target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.RadialGradientBrush.RadiusXProperty); return target;}
public static Style<System.Windows.Media.RadialGradientBrush> WithRadiusX(this Style<System.Windows.Media.RadialGradientBrush> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.RadialGradientBrush.RadiusXProperty); return target;}

//RadiusYProperty
public static System.Windows.Shapes.Rectangle WithRadiusY(this System.Windows.Shapes.Rectangle target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Shapes.Rectangle.RadiusYProperty); return target;}
public static Style<System.Windows.Shapes.Rectangle> WithRadiusY(this Style<System.Windows.Shapes.Rectangle> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Shapes.Rectangle.RadiusYProperty); return target;}
public static System.Windows.Media.RectangleGeometry WithRadiusY(this System.Windows.Media.RectangleGeometry target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.RectangleGeometry.RadiusYProperty); return target;}
public static Style<System.Windows.Media.RectangleGeometry> WithRadiusY(this Style<System.Windows.Media.RectangleGeometry> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.RectangleGeometry.RadiusYProperty); return target;}
public static System.Windows.Media.EllipseGeometry WithRadiusY(this System.Windows.Media.EllipseGeometry target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.EllipseGeometry.RadiusYProperty); return target;}
public static Style<System.Windows.Media.EllipseGeometry> WithRadiusY(this Style<System.Windows.Media.EllipseGeometry> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.EllipseGeometry.RadiusYProperty); return target;}
public static System.Windows.Media.RadialGradientBrush WithRadiusY(this System.Windows.Media.RadialGradientBrush target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.RadialGradientBrush.RadiusYProperty); return target;}
public static Style<System.Windows.Media.RadialGradientBrush> WithRadiusY(this Style<System.Windows.Media.RadialGradientBrush> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.RadialGradientBrush.RadiusYProperty); return target;}

//StretchProperty
public static TChild WithStretch<TChild>(this TChild target, ValueProxy<System.Windows.Media.Stretch>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.SetValue(target, System.Windows.Shapes.Shape.StretchProperty); return target;}
public static Style<TChild> WithStretch<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Stretch>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.StyleSetter(target, System.Windows.Shapes.Shape.StretchProperty); return target;}
public static TChild WithStretch<TChild>(this TChild target, ValueProxy<System.Windows.Media.Stretch>? value, Disambigator<System.Windows.Controls.Image, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Image{value?.SetValue(target, System.Windows.Controls.Image.StretchProperty); return target;}
public static Style<TChild> WithStretch<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Stretch>? value, Disambigator<System.Windows.Controls.Image, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Image{value?.StyleSetter(target, System.Windows.Controls.Image.StretchProperty); return target;}
public static TChild WithStretch<TChild>(this TChild target, ValueProxy<System.Windows.Media.Stretch>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.SetValue(target, System.Windows.Controls.MediaElement.StretchProperty); return target;}
public static Style<TChild> WithStretch<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Stretch>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.StyleSetter(target, System.Windows.Controls.MediaElement.StretchProperty); return target;}
public static TChild WithStretch<TChild>(this TChild target, ValueProxy<System.Windows.Media.Stretch>? value, Disambigator<System.Windows.Controls.Viewbox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Viewbox{value?.SetValue(target, System.Windows.Controls.Viewbox.StretchProperty); return target;}
public static Style<TChild> WithStretch<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Stretch>? value, Disambigator<System.Windows.Controls.Viewbox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Viewbox{value?.StyleSetter(target, System.Windows.Controls.Viewbox.StretchProperty); return target;}
public static TChild WithStretch<TChild>(this TChild target, ValueProxy<System.Windows.Media.Stretch>? value, Disambigator<System.Windows.Controls.Primitives.DocumentPageView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentPageView{value?.SetValue(target, System.Windows.Controls.Primitives.DocumentPageView.StretchProperty); return target;}
public static Style<TChild> WithStretch<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Stretch>? value, Disambigator<System.Windows.Controls.Primitives.DocumentPageView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentPageView{value?.StyleSetter(target, System.Windows.Controls.Primitives.DocumentPageView.StretchProperty); return target;}
public static TChild WithStretch<TChild>(this TChild target, ValueProxy<System.Windows.Media.Stretch>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.SetValue(target, System.Windows.Media.TileBrush.StretchProperty); return target;}
public static Style<TChild> WithStretch<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Stretch>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.StyleSetter(target, System.Windows.Media.TileBrush.StretchProperty); return target;}

//FillProperty
public static TChild WithFill<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.SetValue(target, System.Windows.Shapes.Shape.FillProperty); return target;}
public static Style<TChild> WithFill<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.StyleSetter(target, System.Windows.Shapes.Shape.FillProperty); return target;}
public static System.Windows.Documents.Glyphs WithFill(this System.Windows.Documents.Glyphs target, ValueProxy<System.Windows.Media.Brush>? value) {value?.SetValue(target, System.Windows.Documents.Glyphs.FillProperty); return target;}
public static Style<System.Windows.Documents.Glyphs> WithFill(this Style<System.Windows.Documents.Glyphs> target, ValueProxy<System.Windows.Media.Brush>? value) {value?.StyleSetter(target, System.Windows.Documents.Glyphs.FillProperty); return target;}
public static TChild WithFill<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.SetValue(target, System.Windows.Controls.Primitives.TickBar.FillProperty); return target;}
public static Style<TChild> WithFill<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.TickBar.FillProperty); return target;}

//StrokeProperty
public static TChild WithStroke<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.SetValue(target, System.Windows.Shapes.Shape.StrokeProperty); return target;}
public static Style<TChild> WithStroke<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.StyleSetter(target, System.Windows.Shapes.Shape.StrokeProperty); return target;}

//StrokeThicknessProperty
public static TChild WithStrokeThickness<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.SetValue(target, System.Windows.Shapes.Shape.StrokeThicknessProperty); return target;}
public static Style<TChild> WithStrokeThickness<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.StyleSetter(target, System.Windows.Shapes.Shape.StrokeThicknessProperty); return target;}

//StrokeStartLineCapProperty
public static TChild WithStrokeStartLineCap<TChild>(this TChild target, ValueProxy<System.Windows.Media.PenLineCap>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.SetValue(target, System.Windows.Shapes.Shape.StrokeStartLineCapProperty); return target;}
public static Style<TChild> WithStrokeStartLineCap<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.PenLineCap>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.StyleSetter(target, System.Windows.Shapes.Shape.StrokeStartLineCapProperty); return target;}

//StrokeEndLineCapProperty
public static TChild WithStrokeEndLineCap<TChild>(this TChild target, ValueProxy<System.Windows.Media.PenLineCap>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.SetValue(target, System.Windows.Shapes.Shape.StrokeEndLineCapProperty); return target;}
public static Style<TChild> WithStrokeEndLineCap<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.PenLineCap>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.StyleSetter(target, System.Windows.Shapes.Shape.StrokeEndLineCapProperty); return target;}

//StrokeDashCapProperty
public static TChild WithStrokeDashCap<TChild>(this TChild target, ValueProxy<System.Windows.Media.PenLineCap>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.SetValue(target, System.Windows.Shapes.Shape.StrokeDashCapProperty); return target;}
public static Style<TChild> WithStrokeDashCap<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.PenLineCap>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.StyleSetter(target, System.Windows.Shapes.Shape.StrokeDashCapProperty); return target;}

//StrokeLineJoinProperty
public static TChild WithStrokeLineJoin<TChild>(this TChild target, ValueProxy<System.Windows.Media.PenLineJoin>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.SetValue(target, System.Windows.Shapes.Shape.StrokeLineJoinProperty); return target;}
public static Style<TChild> WithStrokeLineJoin<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.PenLineJoin>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.StyleSetter(target, System.Windows.Shapes.Shape.StrokeLineJoinProperty); return target;}

//StrokeMiterLimitProperty
public static TChild WithStrokeMiterLimit<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.SetValue(target, System.Windows.Shapes.Shape.StrokeMiterLimitProperty); return target;}
public static Style<TChild> WithStrokeMiterLimit<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.StyleSetter(target, System.Windows.Shapes.Shape.StrokeMiterLimitProperty); return target;}

//StrokeDashOffsetProperty
public static TChild WithStrokeDashOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.SetValue(target, System.Windows.Shapes.Shape.StrokeDashOffsetProperty); return target;}
public static Style<TChild> WithStrokeDashOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.StyleSetter(target, System.Windows.Shapes.Shape.StrokeDashOffsetProperty); return target;}

//StrokeDashArrayProperty
public static TChild WithStrokeDashArray<TChild>(this TChild target, ValueProxy<System.Windows.Media.DoubleCollection>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.SetValue(target, System.Windows.Shapes.Shape.StrokeDashArrayProperty); return target;}
public static Style<TChild> WithStrokeDashArray<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.DoubleCollection>? value, Disambigator<System.Windows.Shapes.Shape, TChild>? doNotUse = null) where TChild: System.Windows.Shapes.Shape{value?.StyleSetter(target, System.Windows.Shapes.Shape.StrokeDashArrayProperty); return target;}

//TabIndexProperty
public static TChild WithKeyboardNavigation_TabIndex<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.KeyboardNavigation.TabIndexProperty); return target;}
public static Style<TChild> WithKeyboardNavigation_TabIndex<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.KeyboardNavigation.TabIndexProperty); return target;}
public static TChild WithTabIndex<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.TabIndexProperty); return target;}
public static Style<TChild> WithTabIndex<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.TabIndexProperty); return target;}

//IsTabStopProperty
public static TChild WithKeyboardNavigation_IsTabStop<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.KeyboardNavigation.IsTabStopProperty); return target;}
public static Style<TChild> WithKeyboardNavigation_IsTabStop<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.KeyboardNavigation.IsTabStopProperty); return target;}
public static TChild WithIsTabStop<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.IsTabStopProperty); return target;}
public static Style<TChild> WithIsTabStop<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.IsTabStopProperty); return target;}

//TabNavigationProperty
public static TChild WithKeyboardNavigation_TabNavigation<TChild>(this TChild target, ValueProxy<System.Windows.Input.KeyboardNavigationMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.KeyboardNavigation.TabNavigationProperty); return target;}
public static Style<TChild> WithKeyboardNavigation_TabNavigation<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.KeyboardNavigationMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.KeyboardNavigation.TabNavigationProperty); return target;}

//ControlTabNavigationProperty
public static TChild WithKeyboardNavigation_ControlTabNavigation<TChild>(this TChild target, ValueProxy<System.Windows.Input.KeyboardNavigationMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.KeyboardNavigation.ControlTabNavigationProperty); return target;}
public static Style<TChild> WithKeyboardNavigation_ControlTabNavigation<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.KeyboardNavigationMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.KeyboardNavigation.ControlTabNavigationProperty); return target;}

//DirectionalNavigationProperty
public static TChild WithKeyboardNavigation_DirectionalNavigation<TChild>(this TChild target, ValueProxy<System.Windows.Input.KeyboardNavigationMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.KeyboardNavigation.DirectionalNavigationProperty); return target;}
public static Style<TChild> WithKeyboardNavigation_DirectionalNavigation<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.KeyboardNavigationMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.KeyboardNavigation.DirectionalNavigationProperty); return target;}

//AcceptsReturnProperty
public static TChild WithKeyboardNavigation_AcceptsReturn<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.KeyboardNavigation.AcceptsReturnProperty); return target;}
public static Style<TChild> WithKeyboardNavigation_AcceptsReturn<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.KeyboardNavigation.AcceptsReturnProperty); return target;}
public static TChild WithAcceptsReturn<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturnProperty); return target;}
public static Style<TChild> WithAcceptsReturn<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturnProperty); return target;}

//TextFormattingModeProperty
public static TChild WithTextOptions_TextFormattingMode<TChild>(this TChild target, ValueProxy<System.Windows.Media.TextFormattingMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.TextOptions.TextFormattingModeProperty); return target;}
public static Style<TChild> WithTextOptions_TextFormattingMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.TextFormattingMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.TextOptions.TextFormattingModeProperty); return target;}

//TextRenderingModeProperty
public static TChild WithTextOptions_TextRenderingMode<TChild>(this TChild target, ValueProxy<System.Windows.Media.TextRenderingMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.TextOptions.TextRenderingModeProperty); return target;}
public static Style<TChild> WithTextOptions_TextRenderingMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.TextRenderingMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.TextOptions.TextRenderingModeProperty); return target;}

//TextHintingModeProperty
public static TChild WithTextOptions_TextHintingMode<TChild>(this TChild target, ValueProxy<System.Windows.Media.TextHintingMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.TextOptions.TextHintingModeProperty); return target;}
public static Style<TChild> WithTextOptions_TextHintingMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.TextHintingMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.TextOptions.TextHintingModeProperty); return target;}

//StoryboardProperty
public static System.Windows.Media.Animation.BeginStoryboard WithStoryboard(this System.Windows.Media.Animation.BeginStoryboard target, ValueProxy<System.Windows.Media.Animation.Storyboard>? value) {value?.SetValue(target, System.Windows.Media.Animation.BeginStoryboard.StoryboardProperty); return target;}
public static Style<System.Windows.Media.Animation.BeginStoryboard> WithStoryboard(this Style<System.Windows.Media.Animation.BeginStoryboard> target, ValueProxy<System.Windows.Media.Animation.Storyboard>? value) {value?.StyleSetter(target, System.Windows.Media.Animation.BeginStoryboard.StoryboardProperty); return target;}

//EasingFunctionProperty
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingThicknessKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingThicknessKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingThicknessKeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingThicknessKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingThicknessKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingThicknessKeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.ThicknessAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessAnimation{value?.SetValue(target, System.Windows.Media.Animation.ThicknessAnimation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.ThicknessAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.ThicknessAnimation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingQuaternionKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingQuaternionKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingQuaternionKeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingQuaternionKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingQuaternionKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingQuaternionKeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimation{value?.SetValue(target, System.Windows.Media.Animation.QuaternionAnimation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.QuaternionAnimation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.ByteAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteAnimation{value?.SetValue(target, System.Windows.Media.Animation.ByteAnimation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.ByteAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.ByteAnimation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.ColorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorAnimation{value?.SetValue(target, System.Windows.Media.Animation.ColorAnimation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.ColorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.ColorAnimation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.DecimalAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalAnimation{value?.SetValue(target, System.Windows.Media.Animation.DecimalAnimation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.DecimalAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.DecimalAnimation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.DoubleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimation{value?.SetValue(target, System.Windows.Media.Animation.DoubleAnimation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.DoubleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.DoubleAnimation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingByteKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingByteKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingByteKeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingByteKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingByteKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingByteKeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingColorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingColorKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingColorKeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingColorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingColorKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingColorKeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingDecimalKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingDecimalKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingDecimalKeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingDecimalKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingDecimalKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingDecimalKeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingDoubleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingDoubleKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingDoubleKeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingDoubleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingDoubleKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingDoubleKeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingInt16KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingInt16KeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingInt16KeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingInt16KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingInt16KeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingInt16KeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingInt32KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingInt32KeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingInt32KeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingInt32KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingInt32KeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingInt32KeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingInt64KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingInt64KeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingInt64KeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingInt64KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingInt64KeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingInt64KeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingPointKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingPointKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingPointKeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingPointKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingPointKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingPointKeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingPoint3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingPoint3DKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingPoint3DKeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingPoint3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingPoint3DKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingPoint3DKeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingRotation3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingRotation3DKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingRotation3DKeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingRotation3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingRotation3DKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingRotation3DKeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingRectKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingRectKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingRectKeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingRectKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingRectKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingRectKeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingSingleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingSingleKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingSingleKeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingSingleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingSingleKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingSingleKeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingSizeKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingSizeKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingSizeKeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingSizeKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingSizeKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingSizeKeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingVectorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingVectorKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingVectorKeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingVectorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingVectorKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingVectorKeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingVector3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingVector3DKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingVector3DKeyFrame.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.EasingVector3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingVector3DKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingVector3DKeyFrame.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.Int16Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16Animation{value?.SetValue(target, System.Windows.Media.Animation.Int16Animation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.Int16Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16Animation{value?.StyleSetter(target, System.Windows.Media.Animation.Int16Animation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.Int32Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32Animation{value?.SetValue(target, System.Windows.Media.Animation.Int32Animation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.Int32Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32Animation{value?.StyleSetter(target, System.Windows.Media.Animation.Int32Animation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.Int64Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64Animation{value?.SetValue(target, System.Windows.Media.Animation.Int64Animation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.Int64Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64Animation{value?.StyleSetter(target, System.Windows.Media.Animation.Int64Animation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.Point3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DAnimation{value?.SetValue(target, System.Windows.Media.Animation.Point3DAnimation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.Point3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.Point3DAnimation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.PointAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimation{value?.SetValue(target, System.Windows.Media.Animation.PointAnimation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.PointAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.PointAnimation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.RectAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectAnimation{value?.SetValue(target, System.Windows.Media.Animation.RectAnimation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.RectAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.RectAnimation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.Rotation3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DAnimation{value?.SetValue(target, System.Windows.Media.Animation.Rotation3DAnimation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.Rotation3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.Rotation3DAnimation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.SingleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleAnimation{value?.SetValue(target, System.Windows.Media.Animation.SingleAnimation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.SingleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.SingleAnimation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.SizeAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeAnimation{value?.SetValue(target, System.Windows.Media.Animation.SizeAnimation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.SizeAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.SizeAnimation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.Vector3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DAnimation{value?.SetValue(target, System.Windows.Media.Animation.Vector3DAnimation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.Vector3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.Vector3DAnimation.EasingFunctionProperty); return target;}
public static TChild WithEasingFunction<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.VectorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorAnimation{value?.SetValue(target, System.Windows.Media.Animation.VectorAnimation.EasingFunctionProperty); return target;}
public static Style<TChild> WithEasingFunction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.IEasingFunction>? value, Disambigator<System.Windows.Media.Animation.VectorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.VectorAnimation.EasingFunctionProperty); return target;}

//KeyTimeProperty
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.ThicknessKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.ThicknessKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.ThicknessKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.ThicknessKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.QuaternionKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.QuaternionKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.QuaternionKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.QuaternionKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.BooleanKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.BooleanKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.BooleanKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.BooleanKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.BooleanKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.BooleanKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.ByteKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.ByteKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.ByteKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.ByteKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.CharKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.CharKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.CharKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.CharKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.CharKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.CharKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.ColorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.ColorKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.ColorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.ColorKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.DecimalKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.DecimalKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.DecimalKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.DecimalKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.DoubleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.DoubleKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.DoubleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.DoubleKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.Int16KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16KeyFrame{value?.SetValue(target, System.Windows.Media.Animation.Int16KeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.Int16KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16KeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.Int16KeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.Int32KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32KeyFrame{value?.SetValue(target, System.Windows.Media.Animation.Int32KeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.Int32KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32KeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.Int32KeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.Int64KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64KeyFrame{value?.SetValue(target, System.Windows.Media.Animation.Int64KeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.Int64KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64KeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.Int64KeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.MatrixKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.MatrixKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.MatrixKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.MatrixKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.MatrixKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.MatrixKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.ObjectKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ObjectKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.ObjectKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.ObjectKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ObjectKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.ObjectKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.PointKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.PointKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.PointKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.PointKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.Point3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.Point3DKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.Point3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.Point3DKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.Rotation3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.Rotation3DKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.Rotation3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.Rotation3DKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.RectKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.RectKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.RectKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.RectKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.SingleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SingleKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.SingleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SingleKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.SizeKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SizeKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.SizeKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SizeKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.StringKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.StringKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.StringKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.StringKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.StringKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.StringKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.VectorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.VectorKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.VectorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.VectorKeyFrame.KeyTimeProperty); return target;}
public static TChild WithKeyTime<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.Vector3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.Vector3DKeyFrame.KeyTimeProperty); return target;}
public static Style<TChild> WithKeyTime<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeyTime>? value, Disambigator<System.Windows.Media.Animation.Vector3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.Vector3DKeyFrame.KeyTimeProperty); return target;}

//ValueProperty
public static TChild WithValue<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Media.Animation.ThicknessKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.ThicknessKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Media.Animation.ThicknessKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.ThicknessKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.RangeBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.RangeBase{value?.SetValue(target, System.Windows.Controls.Primitives.RangeBase.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.RangeBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.RangeBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.RangeBase.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track{value?.SetValue(target, System.Windows.Controls.Primitives.Track.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track{value?.StyleSetter(target, System.Windows.Controls.Primitives.Track.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Quaternion>? value, Disambigator<System.Windows.Media.Animation.QuaternionKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.QuaternionKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Quaternion>? value, Disambigator<System.Windows.Media.Animation.QuaternionKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.QuaternionKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.BooleanKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.BooleanKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.BooleanKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.BooleanKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.BooleanKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.BooleanKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Byte>? value, Disambigator<System.Windows.Media.Animation.ByteKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.ByteKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Byte>? value, Disambigator<System.Windows.Media.Animation.ByteKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.ByteKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Char>? value, Disambigator<System.Windows.Media.Animation.CharKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.CharKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.CharKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Char>? value, Disambigator<System.Windows.Media.Animation.CharKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.CharKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.CharKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Windows.Media.Color>? value, Disambigator<System.Windows.Media.Animation.ColorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.ColorKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Color>? value, Disambigator<System.Windows.Media.Animation.ColorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.ColorKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Decimal>? value, Disambigator<System.Windows.Media.Animation.DecimalKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.DecimalKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Decimal>? value, Disambigator<System.Windows.Media.Animation.DecimalKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.DecimalKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.DoubleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.DoubleKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.DoubleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.DoubleKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Int16>? value, Disambigator<System.Windows.Media.Animation.Int16KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16KeyFrame{value?.SetValue(target, System.Windows.Media.Animation.Int16KeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Int16>? value, Disambigator<System.Windows.Media.Animation.Int16KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16KeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.Int16KeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Media.Animation.Int32KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32KeyFrame{value?.SetValue(target, System.Windows.Media.Animation.Int32KeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Media.Animation.Int32KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32KeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.Int32KeyFrame.ValueProperty); return target;}

public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Int64>? value, Disambigator<System.Windows.Media.Animation.Int64KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64KeyFrame{value?.SetValue(target, System.Windows.Media.Animation.Int64KeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Int64>? value, Disambigator<System.Windows.Media.Animation.Int64KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64KeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.Int64KeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Windows.Media.Matrix>? value, Disambigator<System.Windows.Media.Animation.MatrixKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.MatrixKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.MatrixKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Matrix>? value, Disambigator<System.Windows.Media.Animation.MatrixKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.MatrixKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.MatrixKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Media.Animation.ObjectKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ObjectKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.ObjectKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Media.Animation.ObjectKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ObjectKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.ObjectKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Windows.Point>? value, Disambigator<System.Windows.Media.Animation.PointKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.PointKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Point>? value, Disambigator<System.Windows.Media.Animation.PointKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.PointKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Point3D>? value, Disambigator<System.Windows.Media.Animation.Point3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.Point3DKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Point3D>? value, Disambigator<System.Windows.Media.Animation.Point3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.Point3DKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Rotation3D>? value, Disambigator<System.Windows.Media.Animation.Rotation3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.Rotation3DKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Rotation3D>? value, Disambigator<System.Windows.Media.Animation.Rotation3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.Rotation3DKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.Media.Animation.RectKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.RectKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.Media.Animation.RectKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.RectKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Single>? value, Disambigator<System.Windows.Media.Animation.SingleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SingleKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Single>? value, Disambigator<System.Windows.Media.Animation.SingleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SingleKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Windows.Size>? value, Disambigator<System.Windows.Media.Animation.SizeKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SizeKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Size>? value, Disambigator<System.Windows.Media.Animation.SizeKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SizeKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Media.Animation.StringKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.StringKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.StringKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Media.Animation.StringKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.StringKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.StringKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Windows.Vector>? value, Disambigator<System.Windows.Media.Animation.VectorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.VectorKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Vector>? value, Disambigator<System.Windows.Media.Animation.VectorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.VectorKeyFrame.ValueProperty); return target;}
public static TChild WithValue<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Vector3D>? value, Disambigator<System.Windows.Media.Animation.Vector3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.Vector3DKeyFrame.ValueProperty); return target;}
public static Style<TChild> WithValue<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Vector3D>? value, Disambigator<System.Windows.Media.Animation.Vector3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.Vector3DKeyFrame.ValueProperty); return target;}

//KeySplineProperty
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineThicknessKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineThicknessKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineThicknessKeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineThicknessKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineThicknessKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineThicknessKeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineQuaternionKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineQuaternionKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineQuaternionKeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineQuaternionKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineQuaternionKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineQuaternionKeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineByteKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineByteKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineByteKeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineByteKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineByteKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineByteKeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineColorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineColorKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineColorKeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineColorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineColorKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineColorKeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineDecimalKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineDecimalKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineDecimalKeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineDecimalKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineDecimalKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineDecimalKeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineDoubleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineDoubleKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineDoubleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineDoubleKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineInt16KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineInt16KeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineInt16KeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineInt16KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineInt16KeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineInt16KeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineInt32KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineInt32KeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineInt32KeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineInt32KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineInt32KeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineInt32KeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineInt64KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineInt64KeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineInt64KeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineInt64KeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineInt64KeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineInt64KeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplinePointKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplinePointKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplinePointKeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplinePointKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplinePointKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplinePointKeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplinePoint3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplinePoint3DKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplinePoint3DKeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplinePoint3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplinePoint3DKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplinePoint3DKeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineRotation3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineRotation3DKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineRotation3DKeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineRotation3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineRotation3DKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineRotation3DKeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineRectKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineRectKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineRectKeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineRectKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineRectKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineRectKeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineSingleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineSingleKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineSingleKeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineSingleKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineSingleKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineSingleKeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineSizeKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineSizeKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineSizeKeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineSizeKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineSizeKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineSizeKeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineVectorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineVectorKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineVectorKeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineVectorKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineVectorKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineVectorKeyFrame.KeySplineProperty); return target;}
public static TChild WithKeySpline<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineVector3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineVector3DKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineVector3DKeyFrame.KeySplineProperty); return target;}
public static Style<TChild> WithKeySpline<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.KeySpline>? value, Disambigator<System.Windows.Media.Animation.SplineVector3DKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineVector3DKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineVector3DKeyFrame.KeySplineProperty); return target;}

//FromProperty
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Thickness>>? value, Disambigator<System.Windows.Media.Animation.ThicknessAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessAnimation{value?.SetValue(target, System.Windows.Media.Animation.ThicknessAnimation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Thickness>>? value, Disambigator<System.Windows.Media.Animation.ThicknessAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.ThicknessAnimation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Quaternion>>? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimation{value?.SetValue(target, System.Windows.Media.Animation.QuaternionAnimation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Quaternion>>? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.QuaternionAnimation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Byte>>? value, Disambigator<System.Windows.Media.Animation.ByteAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteAnimation{value?.SetValue(target, System.Windows.Media.Animation.ByteAnimation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Byte>>? value, Disambigator<System.Windows.Media.Animation.ByteAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.ByteAnimation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Media.Color>>? value, Disambigator<System.Windows.Media.Animation.ColorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorAnimation{value?.SetValue(target, System.Windows.Media.Animation.ColorAnimation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Media.Color>>? value, Disambigator<System.Windows.Media.Animation.ColorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.ColorAnimation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Decimal>>? value, Disambigator<System.Windows.Media.Animation.DecimalAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalAnimation{value?.SetValue(target, System.Windows.Media.Animation.DecimalAnimation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Decimal>>? value, Disambigator<System.Windows.Media.Animation.DecimalAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.DecimalAnimation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Double>>? value, Disambigator<System.Windows.Media.Animation.DoubleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimation{value?.SetValue(target, System.Windows.Media.Animation.DoubleAnimation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Double>>? value, Disambigator<System.Windows.Media.Animation.DoubleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.DoubleAnimation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Int16>>? value, Disambigator<System.Windows.Media.Animation.Int16Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16Animation{value?.SetValue(target, System.Windows.Media.Animation.Int16Animation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Int16>>? value, Disambigator<System.Windows.Media.Animation.Int16Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16Animation{value?.StyleSetter(target, System.Windows.Media.Animation.Int16Animation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Int32>>? value, Disambigator<System.Windows.Media.Animation.Int32Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32Animation{value?.SetValue(target, System.Windows.Media.Animation.Int32Animation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Int32>>? value, Disambigator<System.Windows.Media.Animation.Int32Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32Animation{value?.StyleSetter(target, System.Windows.Media.Animation.Int32Animation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Int64>>? value, Disambigator<System.Windows.Media.Animation.Int64Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64Animation{value?.SetValue(target, System.Windows.Media.Animation.Int64Animation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Int64>>? value, Disambigator<System.Windows.Media.Animation.Int64Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64Animation{value?.StyleSetter(target, System.Windows.Media.Animation.Int64Animation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Point3D>>? value, Disambigator<System.Windows.Media.Animation.Point3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DAnimation{value?.SetValue(target, System.Windows.Media.Animation.Point3DAnimation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Point3D>>? value, Disambigator<System.Windows.Media.Animation.Point3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.Point3DAnimation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Point>>? value, Disambigator<System.Windows.Media.Animation.PointAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimation{value?.SetValue(target, System.Windows.Media.Animation.PointAnimation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Point>>? value, Disambigator<System.Windows.Media.Animation.PointAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.PointAnimation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Rect>>? value, Disambigator<System.Windows.Media.Animation.RectAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectAnimation{value?.SetValue(target, System.Windows.Media.Animation.RectAnimation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Rect>>? value, Disambigator<System.Windows.Media.Animation.RectAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.RectAnimation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Rotation3D>? value, Disambigator<System.Windows.Media.Animation.Rotation3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DAnimation{value?.SetValue(target, System.Windows.Media.Animation.Rotation3DAnimation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Rotation3D>? value, Disambigator<System.Windows.Media.Animation.Rotation3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.Rotation3DAnimation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Single>>? value, Disambigator<System.Windows.Media.Animation.SingleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleAnimation{value?.SetValue(target, System.Windows.Media.Animation.SingleAnimation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Single>>? value, Disambigator<System.Windows.Media.Animation.SingleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.SingleAnimation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Size>>? value, Disambigator<System.Windows.Media.Animation.SizeAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeAnimation{value?.SetValue(target, System.Windows.Media.Animation.SizeAnimation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Size>>? value, Disambigator<System.Windows.Media.Animation.SizeAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.SizeAnimation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Vector3D>>? value, Disambigator<System.Windows.Media.Animation.Vector3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DAnimation{value?.SetValue(target, System.Windows.Media.Animation.Vector3DAnimation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Vector3D>>? value, Disambigator<System.Windows.Media.Animation.Vector3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.Vector3DAnimation.FromProperty); return target;}
public static TChild WithFrom<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Vector>>? value, Disambigator<System.Windows.Media.Animation.VectorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorAnimation{value?.SetValue(target, System.Windows.Media.Animation.VectorAnimation.FromProperty); return target;}
public static Style<TChild> WithFrom<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Vector>>? value, Disambigator<System.Windows.Media.Animation.VectorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.VectorAnimation.FromProperty); return target;}

//ToProperty
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Thickness>>? value, Disambigator<System.Windows.Media.Animation.ThicknessAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessAnimation{value?.SetValue(target, System.Windows.Media.Animation.ThicknessAnimation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Thickness>>? value, Disambigator<System.Windows.Media.Animation.ThicknessAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.ThicknessAnimation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Quaternion>>? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimation{value?.SetValue(target, System.Windows.Media.Animation.QuaternionAnimation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Quaternion>>? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.QuaternionAnimation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Byte>>? value, Disambigator<System.Windows.Media.Animation.ByteAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteAnimation{value?.SetValue(target, System.Windows.Media.Animation.ByteAnimation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Byte>>? value, Disambigator<System.Windows.Media.Animation.ByteAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.ByteAnimation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Media.Color>>? value, Disambigator<System.Windows.Media.Animation.ColorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorAnimation{value?.SetValue(target, System.Windows.Media.Animation.ColorAnimation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Media.Color>>? value, Disambigator<System.Windows.Media.Animation.ColorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.ColorAnimation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Decimal>>? value, Disambigator<System.Windows.Media.Animation.DecimalAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalAnimation{value?.SetValue(target, System.Windows.Media.Animation.DecimalAnimation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Decimal>>? value, Disambigator<System.Windows.Media.Animation.DecimalAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.DecimalAnimation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Double>>? value, Disambigator<System.Windows.Media.Animation.DoubleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimation{value?.SetValue(target, System.Windows.Media.Animation.DoubleAnimation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Double>>? value, Disambigator<System.Windows.Media.Animation.DoubleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.DoubleAnimation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Int16>>? value, Disambigator<System.Windows.Media.Animation.Int16Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16Animation{value?.SetValue(target, System.Windows.Media.Animation.Int16Animation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Int16>>? value, Disambigator<System.Windows.Media.Animation.Int16Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16Animation{value?.StyleSetter(target, System.Windows.Media.Animation.Int16Animation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Int32>>? value, Disambigator<System.Windows.Media.Animation.Int32Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32Animation{value?.SetValue(target, System.Windows.Media.Animation.Int32Animation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Int32>>? value, Disambigator<System.Windows.Media.Animation.Int32Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32Animation{value?.StyleSetter(target, System.Windows.Media.Animation.Int32Animation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Int64>>? value, Disambigator<System.Windows.Media.Animation.Int64Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64Animation{value?.SetValue(target, System.Windows.Media.Animation.Int64Animation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Int64>>? value, Disambigator<System.Windows.Media.Animation.Int64Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64Animation{value?.StyleSetter(target, System.Windows.Media.Animation.Int64Animation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Point3D>>? value, Disambigator<System.Windows.Media.Animation.Point3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DAnimation{value?.SetValue(target, System.Windows.Media.Animation.Point3DAnimation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Point3D>>? value, Disambigator<System.Windows.Media.Animation.Point3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.Point3DAnimation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Point>>? value, Disambigator<System.Windows.Media.Animation.PointAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimation{value?.SetValue(target, System.Windows.Media.Animation.PointAnimation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Point>>? value, Disambigator<System.Windows.Media.Animation.PointAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.PointAnimation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Rect>>? value, Disambigator<System.Windows.Media.Animation.RectAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectAnimation{value?.SetValue(target, System.Windows.Media.Animation.RectAnimation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Rect>>? value, Disambigator<System.Windows.Media.Animation.RectAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.RectAnimation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Rotation3D>? value, Disambigator<System.Windows.Media.Animation.Rotation3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DAnimation{value?.SetValue(target, System.Windows.Media.Animation.Rotation3DAnimation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Rotation3D>? value, Disambigator<System.Windows.Media.Animation.Rotation3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.Rotation3DAnimation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Single>>? value, Disambigator<System.Windows.Media.Animation.SingleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleAnimation{value?.SetValue(target, System.Windows.Media.Animation.SingleAnimation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Single>>? value, Disambigator<System.Windows.Media.Animation.SingleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.SingleAnimation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Size>>? value, Disambigator<System.Windows.Media.Animation.SizeAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeAnimation{value?.SetValue(target, System.Windows.Media.Animation.SizeAnimation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Size>>? value, Disambigator<System.Windows.Media.Animation.SizeAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.SizeAnimation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Vector3D>>? value, Disambigator<System.Windows.Media.Animation.Vector3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DAnimation{value?.SetValue(target, System.Windows.Media.Animation.Vector3DAnimation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Vector3D>>? value, Disambigator<System.Windows.Media.Animation.Vector3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.Vector3DAnimation.ToProperty); return target;}
public static TChild WithTo<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Vector>>? value, Disambigator<System.Windows.Media.Animation.VectorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorAnimation{value?.SetValue(target, System.Windows.Media.Animation.VectorAnimation.ToProperty); return target;}
public static Style<TChild> WithTo<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Vector>>? value, Disambigator<System.Windows.Media.Animation.VectorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.VectorAnimation.ToProperty); return target;}

//ByProperty
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Thickness>>? value, Disambigator<System.Windows.Media.Animation.ThicknessAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessAnimation{value?.SetValue(target, System.Windows.Media.Animation.ThicknessAnimation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Thickness>>? value, Disambigator<System.Windows.Media.Animation.ThicknessAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.ThicknessAnimation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Quaternion>>? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimation{value?.SetValue(target, System.Windows.Media.Animation.QuaternionAnimation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Quaternion>>? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.QuaternionAnimation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Byte>>? value, Disambigator<System.Windows.Media.Animation.ByteAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteAnimation{value?.SetValue(target, System.Windows.Media.Animation.ByteAnimation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Byte>>? value, Disambigator<System.Windows.Media.Animation.ByteAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.ByteAnimation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Media.Color>>? value, Disambigator<System.Windows.Media.Animation.ColorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorAnimation{value?.SetValue(target, System.Windows.Media.Animation.ColorAnimation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Media.Color>>? value, Disambigator<System.Windows.Media.Animation.ColorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.ColorAnimation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Decimal>>? value, Disambigator<System.Windows.Media.Animation.DecimalAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalAnimation{value?.SetValue(target, System.Windows.Media.Animation.DecimalAnimation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Decimal>>? value, Disambigator<System.Windows.Media.Animation.DecimalAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.DecimalAnimation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Double>>? value, Disambigator<System.Windows.Media.Animation.DoubleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimation{value?.SetValue(target, System.Windows.Media.Animation.DoubleAnimation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Double>>? value, Disambigator<System.Windows.Media.Animation.DoubleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.DoubleAnimation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Int16>>? value, Disambigator<System.Windows.Media.Animation.Int16Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16Animation{value?.SetValue(target, System.Windows.Media.Animation.Int16Animation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Int16>>? value, Disambigator<System.Windows.Media.Animation.Int16Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16Animation{value?.StyleSetter(target, System.Windows.Media.Animation.Int16Animation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Int32>>? value, Disambigator<System.Windows.Media.Animation.Int32Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32Animation{value?.SetValue(target, System.Windows.Media.Animation.Int32Animation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Int32>>? value, Disambigator<System.Windows.Media.Animation.Int32Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32Animation{value?.StyleSetter(target, System.Windows.Media.Animation.Int32Animation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Int64>>? value, Disambigator<System.Windows.Media.Animation.Int64Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64Animation{value?.SetValue(target, System.Windows.Media.Animation.Int64Animation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Int64>>? value, Disambigator<System.Windows.Media.Animation.Int64Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64Animation{value?.StyleSetter(target, System.Windows.Media.Animation.Int64Animation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Point3D>>? value, Disambigator<System.Windows.Media.Animation.Point3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DAnimation{value?.SetValue(target, System.Windows.Media.Animation.Point3DAnimation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Point3D>>? value, Disambigator<System.Windows.Media.Animation.Point3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.Point3DAnimation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Point>>? value, Disambigator<System.Windows.Media.Animation.PointAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimation{value?.SetValue(target, System.Windows.Media.Animation.PointAnimation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Point>>? value, Disambigator<System.Windows.Media.Animation.PointAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.PointAnimation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Rect>>? value, Disambigator<System.Windows.Media.Animation.RectAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectAnimation{value?.SetValue(target, System.Windows.Media.Animation.RectAnimation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Rect>>? value, Disambigator<System.Windows.Media.Animation.RectAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.RectAnimation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Rotation3D>? value, Disambigator<System.Windows.Media.Animation.Rotation3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DAnimation{value?.SetValue(target, System.Windows.Media.Animation.Rotation3DAnimation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Rotation3D>? value, Disambigator<System.Windows.Media.Animation.Rotation3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.Rotation3DAnimation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Single>>? value, Disambigator<System.Windows.Media.Animation.SingleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleAnimation{value?.SetValue(target, System.Windows.Media.Animation.SingleAnimation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Single>>? value, Disambigator<System.Windows.Media.Animation.SingleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.SingleAnimation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Size>>? value, Disambigator<System.Windows.Media.Animation.SizeAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeAnimation{value?.SetValue(target, System.Windows.Media.Animation.SizeAnimation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Size>>? value, Disambigator<System.Windows.Media.Animation.SizeAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.SizeAnimation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Vector3D>>? value, Disambigator<System.Windows.Media.Animation.Vector3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DAnimation{value?.SetValue(target, System.Windows.Media.Animation.Vector3DAnimation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Media.Media3D.Vector3D>>? value, Disambigator<System.Windows.Media.Animation.Vector3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.Vector3DAnimation.ByProperty); return target;}
public static TChild WithBy<TChild>(this TChild target, ValueProxy<System.Nullable<System.Windows.Vector>>? value, Disambigator<System.Windows.Media.Animation.VectorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorAnimation{value?.SetValue(target, System.Windows.Media.Animation.VectorAnimation.ByProperty); return target;}
public static Style<TChild> WithBy<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Windows.Vector>>? value, Disambigator<System.Windows.Media.Animation.VectorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.VectorAnimation.ByProperty); return target;}

//TargetProperty
public static TChild WithStoryboard_Target<TChild>(this TChild target, ValueProxy<System.Windows.DependencyObject>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.Animation.Storyboard.TargetProperty); return target;}
public static Style<TChild> WithStoryboard_Target<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DependencyObject>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.Animation.Storyboard.TargetProperty); return target;}
public static TChild WithTarget<TChild>(this TChild target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.Controls.Label, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Label{value?.SetValue(target, System.Windows.Controls.Label.TargetProperty); return target;}
public static Style<TChild> WithTarget<TChild>(this Style<TChild> target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.Controls.Label, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Label{value?.StyleSetter(target, System.Windows.Controls.Label.TargetProperty); return target;}
public static System.Windows.Media.BitmapCacheBrush WithTarget(this System.Windows.Media.BitmapCacheBrush target, ValueProxy<System.Windows.Media.Visual>? value) {value?.SetValue(target, System.Windows.Media.BitmapCacheBrush.TargetProperty); return target;}
public static Style<System.Windows.Media.BitmapCacheBrush> WithTarget(this Style<System.Windows.Media.BitmapCacheBrush> target, ValueProxy<System.Windows.Media.Visual>? value) {value?.StyleSetter(target, System.Windows.Media.BitmapCacheBrush.TargetProperty); return target;}

//TargetNameProperty
public static TChild WithStoryboard_TargetName<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.Animation.Storyboard.TargetNameProperty); return target;}
public static Style<TChild> WithStoryboard_TargetName<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.Animation.Storyboard.TargetNameProperty); return target;}
public static TChild WithTargetName<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Documents.Hyperlink, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Hyperlink{value?.SetValue(target, System.Windows.Documents.Hyperlink.TargetNameProperty); return target;}
public static Style<TChild> WithTargetName<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Documents.Hyperlink, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Hyperlink{value?.StyleSetter(target, System.Windows.Documents.Hyperlink.TargetNameProperty); return target;}
public static TChild WithTargetName<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.DataGridHyperlinkColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridHyperlinkColumn{value?.SetValue(target, System.Windows.Controls.DataGridHyperlinkColumn.TargetNameProperty); return target;}
public static Style<TChild> WithTargetName<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.DataGridHyperlinkColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridHyperlinkColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridHyperlinkColumn.TargetNameProperty); return target;}

//TargetPropertyProperty
public static TChild WithStoryboard_TargetProperty<TChild>(this TChild target, ValueProxy<System.Windows.PropertyPath>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.Animation.Storyboard.TargetPropertyProperty); return target;}
public static Style<TChild> WithStoryboard_TargetProperty<TChild>(this Style<TChild> target, ValueProxy<System.Windows.PropertyPath>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.Animation.Storyboard.TargetPropertyProperty); return target;}

//XmlNamespaceManagerProperty
public static TChild WithBinding_XmlNamespaceManager<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Data.Binding.XmlNamespaceManagerProperty); return target;}
public static Style<TChild> WithBinding_XmlNamespaceManager<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Data.Binding.XmlNamespaceManagerProperty); return target;}

//CollectionProperty
public static TChild WithCollection<TChild>(this TChild target, ValueProxy<System.Collections.IEnumerable>? value, Disambigator<System.Windows.Data.CollectionContainer, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionContainer{value?.SetValue(target, System.Windows.Data.CollectionContainer.CollectionProperty); return target;}
public static Style<TChild> WithCollection<TChild>(this Style<TChild> target, ValueProxy<System.Collections.IEnumerable>? value, Disambigator<System.Windows.Data.CollectionContainer, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionContainer{value?.StyleSetter(target, System.Windows.Data.CollectionContainer.CollectionProperty); return target;}

//ViewProperty
public static TChild WithView<TChild>(this TChild target, ValueProxy<System.ComponentModel.ICollectionView>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.SetValue(target, System.Windows.Data.CollectionViewSource.ViewProperty); return target;}
public static Style<TChild> WithView<TChild>(this Style<TChild> target, ValueProxy<System.ComponentModel.ICollectionView>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.StyleSetter(target, System.Windows.Data.CollectionViewSource.ViewProperty); return target;}
public static TChild WithView<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ViewBase>? value, Disambigator<System.Windows.Controls.ListView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ListView{value?.SetValue(target, System.Windows.Controls.ListView.ViewProperty); return target;}
public static Style<TChild> WithView<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ViewBase>? value, Disambigator<System.Windows.Controls.ListView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ListView{value?.StyleSetter(target, System.Windows.Controls.ListView.ViewProperty); return target;}

//SourceProperty
public static TChild WithSource<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.SetValue(target, System.Windows.Data.CollectionViewSource.SourceProperty); return target;}
public static Style<TChild> WithSource<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.StyleSetter(target, System.Windows.Data.CollectionViewSource.SourceProperty); return target;}
public static TChild WithSource<TChild>(this TChild target, ValueProxy<System.Uri>? value, Disambigator<System.Windows.Navigation.NavigationWindow, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationWindow{value?.SetValue(target, System.Windows.Navigation.NavigationWindow.SourceProperty); return target;}
public static Style<TChild> WithSource<TChild>(this Style<TChild> target, ValueProxy<System.Uri>? value, Disambigator<System.Windows.Navigation.NavigationWindow, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationWindow{value?.StyleSetter(target, System.Windows.Navigation.NavigationWindow.SourceProperty); return target;}
public static System.Windows.Documents.DocumentReference WithSource(this System.Windows.Documents.DocumentReference target, ValueProxy<System.Uri>? value) {value?.SetValue(target, System.Windows.Documents.DocumentReference.SourceProperty); return target;}
public static Style<System.Windows.Documents.DocumentReference> WithSource(this Style<System.Windows.Documents.DocumentReference> target, ValueProxy<System.Uri>? value) {value?.StyleSetter(target, System.Windows.Documents.DocumentReference.SourceProperty); return target;}
public static System.Windows.Documents.PageContent WithSource(this System.Windows.Documents.PageContent target, ValueProxy<System.Uri>? value) {value?.SetValue(target, System.Windows.Documents.PageContent.SourceProperty); return target;}
public static Style<System.Windows.Documents.PageContent> WithSource(this Style<System.Windows.Documents.PageContent> target, ValueProxy<System.Uri>? value) {value?.StyleSetter(target, System.Windows.Documents.PageContent.SourceProperty); return target;}
public static TChild WithSource<TChild>(this TChild target, ValueProxy<System.Uri>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.SetValue(target, System.Windows.Controls.Frame.SourceProperty); return target;}
public static Style<TChild> WithSource<TChild>(this Style<TChild> target, ValueProxy<System.Uri>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.StyleSetter(target, System.Windows.Controls.Frame.SourceProperty); return target;}
public static TChild WithSource<TChild>(this TChild target, ValueProxy<System.Windows.Media.ImageSource>? value, Disambigator<System.Windows.Controls.Image, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Image{value?.SetValue(target, System.Windows.Controls.Image.SourceProperty); return target;}
public static Style<TChild> WithSource<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.ImageSource>? value, Disambigator<System.Windows.Controls.Image, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Image{value?.StyleSetter(target, System.Windows.Controls.Image.SourceProperty); return target;}
public static TChild WithSource<TChild>(this TChild target, ValueProxy<System.Uri>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.SetValue(target, System.Windows.Controls.MediaElement.SourceProperty); return target;}
public static Style<TChild> WithSource<TChild>(this Style<TChild> target, ValueProxy<System.Uri>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.StyleSetter(target, System.Windows.Controls.MediaElement.SourceProperty); return target;}
public static TChild WithSource<TChild>(this TChild target, ValueProxy<System.Uri>? value, Disambigator<System.Windows.Controls.SoundPlayerAction, TChild>? doNotUse = null) where TChild: System.Windows.Controls.SoundPlayerAction{value?.SetValue(target, System.Windows.Controls.SoundPlayerAction.SourceProperty); return target;}
public static Style<TChild> WithSource<TChild>(this Style<TChild> target, ValueProxy<System.Uri>? value, Disambigator<System.Windows.Controls.SoundPlayerAction, TChild>? doNotUse = null) where TChild: System.Windows.Controls.SoundPlayerAction{value?.StyleSetter(target, System.Windows.Controls.SoundPlayerAction.SourceProperty); return target;}
public static TChild WithSource<TChild>(this TChild target, ValueProxy<System.Uri>? value, Disambigator<System.Windows.Media.MediaTimeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.MediaTimeline{value?.SetValue(target, System.Windows.Media.MediaTimeline.SourceProperty); return target;}
public static Style<TChild> WithSource<TChild>(this Style<TChild> target, ValueProxy<System.Uri>? value, Disambigator<System.Windows.Media.MediaTimeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.MediaTimeline{value?.StyleSetter(target, System.Windows.Media.MediaTimeline.SourceProperty); return target;}
public static TChild WithSource<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.PathAnimationSource>? value, Disambigator<System.Windows.Media.Animation.DoubleAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimationUsingPath{value?.SetValue(target, System.Windows.Media.Animation.DoubleAnimationUsingPath.SourceProperty); return target;}
public static Style<TChild> WithSource<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.PathAnimationSource>? value, Disambigator<System.Windows.Media.Animation.DoubleAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimationUsingPath{value?.StyleSetter(target, System.Windows.Media.Animation.DoubleAnimationUsingPath.SourceProperty); return target;}
public static System.Windows.Media.Imaging.TransformedBitmap WithSource(this System.Windows.Media.Imaging.TransformedBitmap target, ValueProxy<System.Windows.Media.Imaging.BitmapSource>? value) {value?.SetValue(target, System.Windows.Media.Imaging.TransformedBitmap.SourceProperty); return target;}
public static Style<System.Windows.Media.Imaging.TransformedBitmap> WithSource(this Style<System.Windows.Media.Imaging.TransformedBitmap> target, ValueProxy<System.Windows.Media.Imaging.BitmapSource>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.TransformedBitmap.SourceProperty); return target;}
public static System.Windows.Media.Imaging.CroppedBitmap WithSource(this System.Windows.Media.Imaging.CroppedBitmap target, ValueProxy<System.Windows.Media.Imaging.BitmapSource>? value) {value?.SetValue(target, System.Windows.Media.Imaging.CroppedBitmap.SourceProperty); return target;}
public static Style<System.Windows.Media.Imaging.CroppedBitmap> WithSource(this Style<System.Windows.Media.Imaging.CroppedBitmap> target, ValueProxy<System.Windows.Media.Imaging.BitmapSource>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.CroppedBitmap.SourceProperty); return target;}
public static System.Windows.Media.Imaging.ColorConvertedBitmap WithSource(this System.Windows.Media.Imaging.ColorConvertedBitmap target, ValueProxy<System.Windows.Media.Imaging.BitmapSource>? value) {value?.SetValue(target, System.Windows.Media.Imaging.ColorConvertedBitmap.SourceProperty); return target;}
public static Style<System.Windows.Media.Imaging.ColorConvertedBitmap> WithSource(this Style<System.Windows.Media.Imaging.ColorConvertedBitmap> target, ValueProxy<System.Windows.Media.Imaging.BitmapSource>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.ColorConvertedBitmap.SourceProperty); return target;}
public static System.Windows.Media.Imaging.FormatConvertedBitmap WithSource(this System.Windows.Media.Imaging.FormatConvertedBitmap target, ValueProxy<System.Windows.Media.Imaging.BitmapSource>? value) {value?.SetValue(target, System.Windows.Media.Imaging.FormatConvertedBitmap.SourceProperty); return target;}
public static Style<System.Windows.Media.Imaging.FormatConvertedBitmap> WithSource(this Style<System.Windows.Media.Imaging.FormatConvertedBitmap> target, ValueProxy<System.Windows.Media.Imaging.BitmapSource>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.FormatConvertedBitmap.SourceProperty); return target;}

//CollectionViewTypeProperty
public static TChild WithCollectionViewType<TChild>(this TChild target, ValueProxy<System.Type>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.SetValue(target, System.Windows.Data.CollectionViewSource.CollectionViewTypeProperty); return target;}
public static Style<TChild> WithCollectionViewType<TChild>(this Style<TChild> target, ValueProxy<System.Type>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.StyleSetter(target, System.Windows.Data.CollectionViewSource.CollectionViewTypeProperty); return target;}

//CanChangeLiveSortingProperty
public static TChild WithCanChangeLiveSorting<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.SetValue(target, System.Windows.Data.CollectionViewSource.CanChangeLiveSortingProperty); return target;}
public static Style<TChild> WithCanChangeLiveSorting<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.StyleSetter(target, System.Windows.Data.CollectionViewSource.CanChangeLiveSortingProperty); return target;}

//IsLiveSortingRequestedProperty
public static TChild WithIsLiveSortingRequested<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.SetValue(target, System.Windows.Data.CollectionViewSource.IsLiveSortingRequestedProperty); return target;}
public static Style<TChild> WithIsLiveSortingRequested<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.StyleSetter(target, System.Windows.Data.CollectionViewSource.IsLiveSortingRequestedProperty); return target;}

//IsLiveSortingProperty
public static TChild WithIsLiveSorting<TChild>(this TChild target, ValueProxy<System.Nullable<System.Boolean>>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.SetValue(target, System.Windows.Data.CollectionViewSource.IsLiveSortingProperty); return target;}
public static Style<TChild> WithIsLiveSorting<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Boolean>>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.StyleSetter(target, System.Windows.Data.CollectionViewSource.IsLiveSortingProperty); return target;}

//CanChangeLiveFilteringProperty
public static TChild WithCanChangeLiveFiltering<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.SetValue(target, System.Windows.Data.CollectionViewSource.CanChangeLiveFilteringProperty); return target;}
public static Style<TChild> WithCanChangeLiveFiltering<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.StyleSetter(target, System.Windows.Data.CollectionViewSource.CanChangeLiveFilteringProperty); return target;}

//IsLiveFilteringRequestedProperty
public static TChild WithIsLiveFilteringRequested<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.SetValue(target, System.Windows.Data.CollectionViewSource.IsLiveFilteringRequestedProperty); return target;}
public static Style<TChild> WithIsLiveFilteringRequested<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.StyleSetter(target, System.Windows.Data.CollectionViewSource.IsLiveFilteringRequestedProperty); return target;}

//IsLiveFilteringProperty
public static TChild WithIsLiveFiltering<TChild>(this TChild target, ValueProxy<System.Nullable<System.Boolean>>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.SetValue(target, System.Windows.Data.CollectionViewSource.IsLiveFilteringProperty); return target;}
public static Style<TChild> WithIsLiveFiltering<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Boolean>>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.StyleSetter(target, System.Windows.Data.CollectionViewSource.IsLiveFilteringProperty); return target;}

//CanChangeLiveGroupingProperty
public static TChild WithCanChangeLiveGrouping<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.SetValue(target, System.Windows.Data.CollectionViewSource.CanChangeLiveGroupingProperty); return target;}
public static Style<TChild> WithCanChangeLiveGrouping<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.StyleSetter(target, System.Windows.Data.CollectionViewSource.CanChangeLiveGroupingProperty); return target;}

//IsLiveGroupingRequestedProperty
public static TChild WithIsLiveGroupingRequested<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.SetValue(target, System.Windows.Data.CollectionViewSource.IsLiveGroupingRequestedProperty); return target;}
public static Style<TChild> WithIsLiveGroupingRequested<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.StyleSetter(target, System.Windows.Data.CollectionViewSource.IsLiveGroupingRequestedProperty); return target;}

//IsLiveGroupingProperty
public static TChild WithIsLiveGrouping<TChild>(this TChild target, ValueProxy<System.Nullable<System.Boolean>>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.SetValue(target, System.Windows.Data.CollectionViewSource.IsLiveGroupingProperty); return target;}
public static Style<TChild> WithIsLiveGrouping<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Boolean>>? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource{value?.StyleSetter(target, System.Windows.Data.CollectionViewSource.IsLiveGroupingProperty); return target;}

//XmlSpaceProperty
public static TChild WithXmlAttributeProperties_XmlSpace<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Markup.XmlAttributeProperties.XmlSpaceProperty); return target;}
public static Style<TChild> WithXmlAttributeProperties_XmlSpace<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Markup.XmlAttributeProperties.XmlSpaceProperty); return target;}

//XmlnsDictionaryProperty
public static TChild WithXmlAttributeProperties_XmlnsDictionary<TChild>(this TChild target, ValueProxy<System.Windows.Markup.XmlnsDictionary>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Markup.XmlAttributeProperties.XmlnsDictionaryProperty); return target;}
public static Style<TChild> WithXmlAttributeProperties_XmlnsDictionary<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Markup.XmlnsDictionary>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Markup.XmlAttributeProperties.XmlnsDictionaryProperty); return target;}

//XmlnsDefinitionProperty
public static TChild WithXmlAttributeProperties_XmlnsDefinition<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Markup.XmlAttributeProperties.XmlnsDefinitionProperty); return target;}
public static Style<TChild> WithXmlAttributeProperties_XmlnsDefinition<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Markup.XmlAttributeProperties.XmlnsDefinitionProperty); return target;}

//XmlNamespaceMapsProperty
public static TChild WithXmlAttributeProperties_XmlNamespaceMaps<TChild>(this TChild target, ValueProxy<System.Collections.Hashtable>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Markup.XmlAttributeProperties.XmlNamespaceMapsProperty); return target;}
public static Style<TChild> WithXmlAttributeProperties_XmlNamespaceMaps<TChild>(this Style<TChild> target, ValueProxy<System.Collections.Hashtable>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Markup.XmlAttributeProperties.XmlNamespaceMapsProperty); return target;}

//KeepAliveProperty
public static TChild WithJournalEntry_KeepAlive<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Navigation.JournalEntry.KeepAliveProperty); return target;}
public static Style<TChild> WithJournalEntry_KeepAlive<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Navigation.JournalEntry.KeepAliveProperty); return target;}
public static TChild WithKeepAlive<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.SetValue(target, System.Windows.Controls.Page.KeepAliveProperty); return target;}
public static Style<TChild> WithKeepAlive<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.StyleSetter(target, System.Windows.Controls.Page.KeepAliveProperty); return target;}

//JournalEntryPositionProperty
public static TChild WithJournalEntryUnifiedViewConverter_JournalEntryPosition<TChild>(this TChild target, ValueProxy<System.Windows.Navigation.JournalEntryPosition>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Navigation.JournalEntryUnifiedViewConverter.JournalEntryPositionProperty); return target;}
public static Style<TChild> WithJournalEntryUnifiedViewConverter_JournalEntryPosition<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Navigation.JournalEntryPosition>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Navigation.JournalEntryUnifiedViewConverter.JournalEntryPositionProperty); return target;}

//SandboxExternalContentProperty
public static TChild WithSandboxExternalContent<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Navigation.NavigationWindow, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationWindow{value?.SetValue(target, System.Windows.Navigation.NavigationWindow.SandboxExternalContentProperty); return target;}
public static Style<TChild> WithSandboxExternalContent<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Navigation.NavigationWindow, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationWindow{value?.StyleSetter(target, System.Windows.Navigation.NavigationWindow.SandboxExternalContentProperty); return target;}
public static TChild WithSandboxExternalContent<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.SetValue(target, System.Windows.Controls.Frame.SandboxExternalContentProperty); return target;}
public static Style<TChild> WithSandboxExternalContent<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.StyleSetter(target, System.Windows.Controls.Frame.SandboxExternalContentProperty); return target;}

//ShowsNavigationUIProperty
public static TChild WithShowsNavigationUI<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Navigation.NavigationWindow, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationWindow{value?.SetValue(target, System.Windows.Navigation.NavigationWindow.ShowsNavigationUIProperty); return target;}
public static Style<TChild> WithShowsNavigationUI<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Navigation.NavigationWindow, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationWindow{value?.StyleSetter(target, System.Windows.Navigation.NavigationWindow.ShowsNavigationUIProperty); return target;}

//BackStackProperty
public static TChild WithBackStack<TChild>(this TChild target, ValueProxy<System.Collections.IEnumerable>? value, Disambigator<System.Windows.Navigation.NavigationWindow, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationWindow{value?.SetValue(target, System.Windows.Navigation.NavigationWindow.BackStackProperty); return target;}

public static Style<TChild> WithBackStack<TChild>(this Style<TChild> target, ValueProxy<System.Collections.IEnumerable>? value, Disambigator<System.Windows.Navigation.NavigationWindow, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationWindow{value?.StyleSetter(target, System.Windows.Navigation.NavigationWindow.BackStackProperty); return target;}
public static TChild WithBackStack<TChild>(this TChild target, ValueProxy<System.Collections.IEnumerable>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.SetValue(target, System.Windows.Controls.Frame.BackStackProperty); return target;}
public static Style<TChild> WithBackStack<TChild>(this Style<TChild> target, ValueProxy<System.Collections.IEnumerable>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.StyleSetter(target, System.Windows.Controls.Frame.BackStackProperty); return target;}

//ForwardStackProperty
public static TChild WithForwardStack<TChild>(this TChild target, ValueProxy<System.Collections.IEnumerable>? value, Disambigator<System.Windows.Navigation.NavigationWindow, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationWindow{value?.SetValue(target, System.Windows.Navigation.NavigationWindow.ForwardStackProperty); return target;}
public static Style<TChild> WithForwardStack<TChild>(this Style<TChild> target, ValueProxy<System.Collections.IEnumerable>? value, Disambigator<System.Windows.Navigation.NavigationWindow, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationWindow{value?.StyleSetter(target, System.Windows.Navigation.NavigationWindow.ForwardStackProperty); return target;}
public static TChild WithForwardStack<TChild>(this TChild target, ValueProxy<System.Collections.IEnumerable>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.SetValue(target, System.Windows.Controls.Frame.ForwardStackProperty); return target;}
public static Style<TChild> WithForwardStack<TChild>(this Style<TChild> target, ValueProxy<System.Collections.IEnumerable>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.StyleSetter(target, System.Windows.Controls.Frame.ForwardStackProperty); return target;}

//CanGoBackProperty
public static TChild WithCanGoBack<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Navigation.NavigationWindow, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationWindow{value?.SetValue(target, System.Windows.Navigation.NavigationWindow.CanGoBackProperty); return target;}
public static Style<TChild> WithCanGoBack<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Navigation.NavigationWindow, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationWindow{value?.StyleSetter(target, System.Windows.Navigation.NavigationWindow.CanGoBackProperty); return target;}
public static TChild WithCanGoBack<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.SetValue(target, System.Windows.Controls.Frame.CanGoBackProperty); return target;}
public static Style<TChild> WithCanGoBack<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.StyleSetter(target, System.Windows.Controls.Frame.CanGoBackProperty); return target;}

//CanGoForwardProperty
public static TChild WithCanGoForward<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Navigation.NavigationWindow, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationWindow{value?.SetValue(target, System.Windows.Navigation.NavigationWindow.CanGoForwardProperty); return target;}
public static Style<TChild> WithCanGoForward<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Navigation.NavigationWindow, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationWindow{value?.StyleSetter(target, System.Windows.Navigation.NavigationWindow.CanGoForwardProperty); return target;}
public static TChild WithCanGoForward<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.SetValue(target, System.Windows.Controls.Frame.CanGoForwardProperty); return target;}
public static Style<TChild> WithCanGoForward<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.StyleSetter(target, System.Windows.Controls.Frame.CanGoForwardProperty); return target;}

//PaddingProperty
public static TChild WithPadding<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.AnchoredBlock, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AnchoredBlock{value?.SetValue(target, System.Windows.Documents.AnchoredBlock.PaddingProperty); return target;}
public static Style<TChild> WithPadding<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.AnchoredBlock, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AnchoredBlock{value?.StyleSetter(target, System.Windows.Documents.AnchoredBlock.PaddingProperty); return target;}
public static TChild WithPadding<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.SetValue(target, System.Windows.Documents.Block.PaddingProperty); return target;}
public static Style<TChild> WithPadding<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.StyleSetter(target, System.Windows.Documents.Block.PaddingProperty); return target;}
public static TChild WithPadding<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.SetValue(target, System.Windows.Documents.ListItem.PaddingProperty); return target;}
public static Style<TChild> WithPadding<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.StyleSetter(target, System.Windows.Documents.ListItem.PaddingProperty); return target;}
public static TChild WithPadding<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.SetValue(target, System.Windows.Documents.TableCell.PaddingProperty); return target;}
public static Style<TChild> WithPadding<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.StyleSetter(target, System.Windows.Documents.TableCell.PaddingProperty); return target;}
public static TChild WithPadding<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Controls.Border, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Border{value?.SetValue(target, System.Windows.Controls.Border.PaddingProperty); return target;}
public static Style<TChild> WithPadding<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Controls.Border, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Border{value?.StyleSetter(target, System.Windows.Controls.Border.PaddingProperty); return target;}
public static TChild WithPadding<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.PaddingProperty); return target;}
public static Style<TChild> WithPadding<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.PaddingProperty); return target;}
public static TChild WithPadding<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.PaddingProperty); return target;}
public static Style<TChild> WithPadding<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.PaddingProperty); return target;}

//BorderThicknessProperty
public static TChild WithBorderThickness<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.AnchoredBlock, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AnchoredBlock{value?.SetValue(target, System.Windows.Documents.AnchoredBlock.BorderThicknessProperty); return target;}
public static Style<TChild> WithBorderThickness<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.AnchoredBlock, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AnchoredBlock{value?.StyleSetter(target, System.Windows.Documents.AnchoredBlock.BorderThicknessProperty); return target;}
public static TChild WithBorderThickness<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.SetValue(target, System.Windows.Documents.Block.BorderThicknessProperty); return target;}
public static Style<TChild> WithBorderThickness<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.StyleSetter(target, System.Windows.Documents.Block.BorderThicknessProperty); return target;}
public static TChild WithBorderThickness<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.SetValue(target, System.Windows.Documents.ListItem.BorderThicknessProperty); return target;}
public static Style<TChild> WithBorderThickness<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.StyleSetter(target, System.Windows.Documents.ListItem.BorderThicknessProperty); return target;}
public static TChild WithBorderThickness<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.SetValue(target, System.Windows.Documents.TableCell.BorderThicknessProperty); return target;}
public static Style<TChild> WithBorderThickness<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.StyleSetter(target, System.Windows.Documents.TableCell.BorderThicknessProperty); return target;}
public static TChild WithBorderThickness<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Controls.Border, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Border{value?.SetValue(target, System.Windows.Controls.Border.BorderThicknessProperty); return target;}
public static Style<TChild> WithBorderThickness<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Controls.Border, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Border{value?.StyleSetter(target, System.Windows.Controls.Border.BorderThicknessProperty); return target;}
public static TChild WithBorderThickness<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.BorderThicknessProperty); return target;}
public static Style<TChild> WithBorderThickness<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.BorderThicknessProperty); return target;}

//BorderBrushProperty
public static TChild WithBorderBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.AnchoredBlock, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AnchoredBlock{value?.SetValue(target, System.Windows.Documents.AnchoredBlock.BorderBrushProperty); return target;}
public static Style<TChild> WithBorderBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.AnchoredBlock, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AnchoredBlock{value?.StyleSetter(target, System.Windows.Documents.AnchoredBlock.BorderBrushProperty); return target;}
public static TChild WithBorderBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.SetValue(target, System.Windows.Documents.Block.BorderBrushProperty); return target;}
public static Style<TChild> WithBorderBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.StyleSetter(target, System.Windows.Documents.Block.BorderBrushProperty); return target;}
public static TChild WithBorderBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.SetValue(target, System.Windows.Documents.ListItem.BorderBrushProperty); return target;}
public static Style<TChild> WithBorderBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.StyleSetter(target, System.Windows.Documents.ListItem.BorderBrushProperty); return target;}
public static TChild WithBorderBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.SetValue(target, System.Windows.Documents.TableCell.BorderBrushProperty); return target;}
public static Style<TChild> WithBorderBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.StyleSetter(target, System.Windows.Documents.TableCell.BorderBrushProperty); return target;}
public static TChild WithBorderBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Border, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Border{value?.SetValue(target, System.Windows.Controls.Border.BorderBrushProperty); return target;}
public static Style<TChild> WithBorderBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Border, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Border{value?.StyleSetter(target, System.Windows.Controls.Border.BorderBrushProperty); return target;}
public static TChild WithBorderBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.BorderBrushProperty); return target;}
public static Style<TChild> WithBorderBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.BorderBrushProperty); return target;}

//TextAlignmentProperty
public static TChild WithTextAlignment<TChild>(this TChild target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Documents.AnchoredBlock, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AnchoredBlock{value?.SetValue(target, System.Windows.Documents.AnchoredBlock.TextAlignmentProperty); return target;}
public static Style<TChild> WithTextAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Documents.AnchoredBlock, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AnchoredBlock{value?.StyleSetter(target, System.Windows.Documents.AnchoredBlock.TextAlignmentProperty); return target;}
public static TChild WithBlock_TextAlignment<TChild>(this TChild target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Block.TextAlignmentProperty); return target;}
public static Style<TChild> WithBlock_TextAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Block.TextAlignmentProperty); return target;}
public static TChild WithTextAlignment<TChild>(this TChild target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.SetValue(target, System.Windows.Documents.Block.TextAlignmentProperty); return target;}
public static Style<TChild> WithTextAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.StyleSetter(target, System.Windows.Documents.Block.TextAlignmentProperty); return target;}
public static TChild WithTextAlignment<TChild>(this TChild target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.TextAlignmentProperty); return target;}
public static Style<TChild> WithTextAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.TextAlignmentProperty); return target;}
public static TChild WithTextAlignment<TChild>(this TChild target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.SetValue(target, System.Windows.Documents.ListItem.TextAlignmentProperty); return target;}
public static Style<TChild> WithTextAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.StyleSetter(target, System.Windows.Documents.ListItem.TextAlignmentProperty); return target;}
public static TChild WithTextAlignment<TChild>(this TChild target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.SetValue(target, System.Windows.Documents.TableCell.TextAlignmentProperty); return target;}
public static Style<TChild> WithTextAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.StyleSetter(target, System.Windows.Documents.TableCell.TextAlignmentProperty); return target;}
public static TChild WithTextAlignment<TChild>(this TChild target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.TextAlignmentProperty); return target;}
public static Style<TChild> WithTextAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.TextAlignmentProperty); return target;}
public static TChild WithTextBlock_TextAlignment<TChild>(this TChild target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.TextBlock.TextAlignmentProperty); return target;}
public static Style<TChild> WithTextBlock_TextAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.TextBlock.TextAlignmentProperty); return target;}
public static TChild WithTextAlignment<TChild>(this TChild target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.TextAlignmentProperty); return target;}
public static Style<TChild> WithTextAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.TextAlignmentProperty); return target;}
public static TChild WithTextAlignment<TChild>(this TChild target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.SetValue(target, System.Windows.Controls.TextBox.TextAlignmentProperty); return target;}
public static Style<TChild> WithTextAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextAlignment>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.StyleSetter(target, System.Windows.Controls.TextBox.TextAlignmentProperty); return target;}

//LineHeightProperty
public static TChild WithLineHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.AnchoredBlock, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AnchoredBlock{value?.SetValue(target, System.Windows.Documents.AnchoredBlock.LineHeightProperty); return target;}
public static Style<TChild> WithLineHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.AnchoredBlock, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AnchoredBlock{value?.StyleSetter(target, System.Windows.Documents.AnchoredBlock.LineHeightProperty); return target;}
public static TChild WithBlock_LineHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Block.LineHeightProperty); return target;}
public static Style<TChild> WithBlock_LineHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Block.LineHeightProperty); return target;}
public static TChild WithLineHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.SetValue(target, System.Windows.Documents.Block.LineHeightProperty); return target;}
public static Style<TChild> WithLineHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.StyleSetter(target, System.Windows.Documents.Block.LineHeightProperty); return target;}
public static TChild WithLineHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.LineHeightProperty); return target;}
public static Style<TChild> WithLineHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.LineHeightProperty); return target;}
public static TChild WithLineHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.SetValue(target, System.Windows.Documents.ListItem.LineHeightProperty); return target;}
public static Style<TChild> WithLineHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.StyleSetter(target, System.Windows.Documents.ListItem.LineHeightProperty); return target;}
public static TChild WithLineHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.SetValue(target, System.Windows.Documents.TableCell.LineHeightProperty); return target;}
public static Style<TChild> WithLineHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.StyleSetter(target, System.Windows.Documents.TableCell.LineHeightProperty); return target;}
public static TChild WithLineHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.LineHeightProperty); return target;}
public static Style<TChild> WithLineHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.LineHeightProperty); return target;}
public static TChild WithTextBlock_LineHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.TextBlock.LineHeightProperty); return target;}
public static Style<TChild> WithTextBlock_LineHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.TextBlock.LineHeightProperty); return target;}
public static TChild WithLineHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.LineHeightProperty); return target;}
public static Style<TChild> WithLineHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.LineHeightProperty); return target;}

//LineStackingStrategyProperty
public static TChild WithLineStackingStrategy<TChild>(this TChild target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.Documents.AnchoredBlock, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AnchoredBlock{value?.SetValue(target, System.Windows.Documents.AnchoredBlock.LineStackingStrategyProperty); return target;}
public static Style<TChild> WithLineStackingStrategy<TChild>(this Style<TChild> target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.Documents.AnchoredBlock, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AnchoredBlock{value?.StyleSetter(target, System.Windows.Documents.AnchoredBlock.LineStackingStrategyProperty); return target;}
public static TChild WithBlock_LineStackingStrategy<TChild>(this TChild target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Block.LineStackingStrategyProperty); return target;}
public static Style<TChild> WithBlock_LineStackingStrategy<TChild>(this Style<TChild> target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Block.LineStackingStrategyProperty); return target;}
public static TChild WithLineStackingStrategy<TChild>(this TChild target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.SetValue(target, System.Windows.Documents.Block.LineStackingStrategyProperty); return target;}
public static Style<TChild> WithLineStackingStrategy<TChild>(this Style<TChild> target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.StyleSetter(target, System.Windows.Documents.Block.LineStackingStrategyProperty); return target;}
public static TChild WithLineStackingStrategy<TChild>(this TChild target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.LineStackingStrategyProperty); return target;}
public static Style<TChild> WithLineStackingStrategy<TChild>(this Style<TChild> target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.LineStackingStrategyProperty); return target;}
public static TChild WithLineStackingStrategy<TChild>(this TChild target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.SetValue(target, System.Windows.Documents.ListItem.LineStackingStrategyProperty); return target;}
public static Style<TChild> WithLineStackingStrategy<TChild>(this Style<TChild> target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.Documents.ListItem, TChild>? doNotUse = null) where TChild: System.Windows.Documents.ListItem{value?.StyleSetter(target, System.Windows.Documents.ListItem.LineStackingStrategyProperty); return target;}
public static TChild WithLineStackingStrategy<TChild>(this TChild target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.SetValue(target, System.Windows.Documents.TableCell.LineStackingStrategyProperty); return target;}
public static Style<TChild> WithLineStackingStrategy<TChild>(this Style<TChild> target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.StyleSetter(target, System.Windows.Documents.TableCell.LineStackingStrategyProperty); return target;}
public static TChild WithLineStackingStrategy<TChild>(this TChild target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.LineStackingStrategyProperty); return target;}
public static Style<TChild> WithLineStackingStrategy<TChild>(this Style<TChild> target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.LineStackingStrategyProperty); return target;}
public static TChild WithTextBlock_LineStackingStrategy<TChild>(this TChild target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.TextBlock.LineStackingStrategyProperty); return target;}
public static Style<TChild> WithTextBlock_LineStackingStrategy<TChild>(this Style<TChild> target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.TextBlock.LineStackingStrategyProperty); return target;}
public static TChild WithLineStackingStrategy<TChild>(this TChild target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.LineStackingStrategyProperty); return target;}
public static Style<TChild> WithLineStackingStrategy<TChild>(this Style<TChild> target, ValueProxy<System.Windows.LineStackingStrategy>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.LineStackingStrategyProperty); return target;}

//IsHyphenationEnabledProperty
public static TChild WithBlock_IsHyphenationEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Block.IsHyphenationEnabledProperty); return target;}
public static Style<TChild> WithBlock_IsHyphenationEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Block.IsHyphenationEnabledProperty); return target;}
public static TChild WithIsHyphenationEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.SetValue(target, System.Windows.Documents.Block.IsHyphenationEnabledProperty); return target;}
public static Style<TChild> WithIsHyphenationEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.StyleSetter(target, System.Windows.Documents.Block.IsHyphenationEnabledProperty); return target;}
public static TChild WithIsHyphenationEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.IsHyphenationEnabledProperty); return target;}
public static Style<TChild> WithIsHyphenationEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.IsHyphenationEnabledProperty); return target;}
public static TChild WithIsHyphenationEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.IsHyphenationEnabledProperty); return target;}
public static Style<TChild> WithIsHyphenationEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.IsHyphenationEnabledProperty); return target;}

//BreakPageBeforeProperty
public static TChild WithBreakPageBefore<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.SetValue(target, System.Windows.Documents.Block.BreakPageBeforeProperty); return target;}
public static Style<TChild> WithBreakPageBefore<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.StyleSetter(target, System.Windows.Documents.Block.BreakPageBeforeProperty); return target;}

//BreakColumnBeforeProperty
public static TChild WithBreakColumnBefore<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.SetValue(target, System.Windows.Documents.Block.BreakColumnBeforeProperty); return target;}
public static Style<TChild> WithBreakColumnBefore<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.StyleSetter(target, System.Windows.Documents.Block.BreakColumnBeforeProperty); return target;}

//ClearFloatersProperty
public static TChild WithClearFloaters<TChild>(this TChild target, ValueProxy<System.Windows.WrapDirection>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.SetValue(target, System.Windows.Documents.Block.ClearFloatersProperty); return target;}
public static Style<TChild> WithClearFloaters<TChild>(this Style<TChild> target, ValueProxy<System.Windows.WrapDirection>? value, Disambigator<System.Windows.Documents.Block, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Block{value?.StyleSetter(target, System.Windows.Documents.Block.ClearFloatersProperty); return target;}

//PrintTicketProperty
public static TChild WithPrintTicket<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Documents.FixedDocumentSequence, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FixedDocumentSequence{value?.SetValue(target, System.Windows.Documents.FixedDocumentSequence.PrintTicketProperty); return target;}
public static Style<TChild> WithPrintTicket<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Documents.FixedDocumentSequence, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FixedDocumentSequence{value?.StyleSetter(target, System.Windows.Documents.FixedDocumentSequence.PrintTicketProperty); return target;}
public static TChild WithPrintTicket<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Documents.FixedDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FixedDocument{value?.SetValue(target, System.Windows.Documents.FixedDocument.PrintTicketProperty); return target;}
public static Style<TChild> WithPrintTicket<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Documents.FixedDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FixedDocument{value?.StyleSetter(target, System.Windows.Documents.FixedDocument.PrintTicketProperty); return target;}
public static System.Windows.Documents.FixedPage WithPrintTicket(this System.Windows.Documents.FixedPage target, ValueProxy<System.Object>? value) {value?.SetValue(target, System.Windows.Documents.FixedPage.PrintTicketProperty); return target;}
public static Style<System.Windows.Documents.FixedPage> WithPrintTicket(this Style<System.Windows.Documents.FixedPage> target, ValueProxy<System.Object>? value) {value?.StyleSetter(target, System.Windows.Documents.FixedPage.PrintTicketProperty); return target;}

//HorizontalAnchorProperty
public static TChild WithHorizontalAnchor<TChild>(this TChild target, ValueProxy<System.Windows.FigureHorizontalAnchor>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.SetValue(target, System.Windows.Documents.Figure.HorizontalAnchorProperty); return target;}
public static Style<TChild> WithHorizontalAnchor<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FigureHorizontalAnchor>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.StyleSetter(target, System.Windows.Documents.Figure.HorizontalAnchorProperty); return target;}

//VerticalAnchorProperty
public static TChild WithVerticalAnchor<TChild>(this TChild target, ValueProxy<System.Windows.FigureVerticalAnchor>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.SetValue(target, System.Windows.Documents.Figure.VerticalAnchorProperty); return target;}
public static Style<TChild> WithVerticalAnchor<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FigureVerticalAnchor>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.StyleSetter(target, System.Windows.Documents.Figure.VerticalAnchorProperty); return target;}

//HorizontalOffsetProperty
public static TChild WithHorizontalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.SetValue(target, System.Windows.Documents.Figure.HorizontalOffsetProperty); return target;}
public static Style<TChild> WithHorizontalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.StyleSetter(target, System.Windows.Documents.Figure.HorizontalOffsetProperty); return target;}
public static TChild WithHorizontalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.SetValue(target, System.Windows.Controls.ContextMenu.HorizontalOffsetProperty); return target;}
public static Style<TChild> WithHorizontalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.StyleSetter(target, System.Windows.Controls.ContextMenu.HorizontalOffsetProperty); return target;}
public static TChild WithContextMenuService_HorizontalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ContextMenuService.HorizontalOffsetProperty); return target;}
public static Style<TChild> WithContextMenuService_HorizontalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ContextMenuService.HorizontalOffsetProperty); return target;}
public static TChild WithHorizontalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.HorizontalOffsetProperty); return target;}
public static Style<TChild> WithHorizontalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.HorizontalOffsetProperty); return target;}
public static TChild WithHorizontalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.HorizontalOffsetProperty); return target;}
public static Style<TChild> WithHorizontalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.HorizontalOffsetProperty); return target;}
public static TChild WithHorizontalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.SetValue(target, System.Windows.Controls.ToolTip.HorizontalOffsetProperty); return target;}
public static Style<TChild> WithHorizontalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.StyleSetter(target, System.Windows.Controls.ToolTip.HorizontalOffsetProperty); return target;}
public static TChild WithToolTipService_HorizontalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ToolTipService.HorizontalOffsetProperty); return target;}
public static Style<TChild> WithToolTipService_HorizontalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ToolTipService.HorizontalOffsetProperty); return target;}
public static TChild WithHorizontalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.SetValue(target, System.Windows.Controls.Primitives.Popup.HorizontalOffsetProperty); return target;}
public static Style<TChild> WithHorizontalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.StyleSetter(target, System.Windows.Controls.Primitives.Popup.HorizontalOffsetProperty); return target;}

//VerticalOffsetProperty
public static TChild WithVerticalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.SetValue(target, System.Windows.Documents.Figure.VerticalOffsetProperty); return target;}
public static Style<TChild> WithVerticalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.StyleSetter(target, System.Windows.Documents.Figure.VerticalOffsetProperty); return target;}
public static TChild WithVerticalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.SetValue(target, System.Windows.Controls.ContextMenu.VerticalOffsetProperty); return target;}
public static Style<TChild> WithVerticalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.StyleSetter(target, System.Windows.Controls.ContextMenu.VerticalOffsetProperty); return target;}
public static TChild WithContextMenuService_VerticalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ContextMenuService.VerticalOffsetProperty); return target;}
public static Style<TChild> WithContextMenuService_VerticalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ContextMenuService.VerticalOffsetProperty); return target;}
public static TChild WithVerticalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.VerticalOffsetProperty); return target;}
public static Style<TChild> WithVerticalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.VerticalOffsetProperty); return target;}
public static TChild WithVerticalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.VerticalOffsetProperty); return target;}
public static Style<TChild> WithVerticalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.VerticalOffsetProperty); return target;}
public static TChild WithVerticalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.SetValue(target, System.Windows.Controls.ToolTip.VerticalOffsetProperty); return target;}
public static Style<TChild> WithVerticalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.StyleSetter(target, System.Windows.Controls.ToolTip.VerticalOffsetProperty); return target;}
public static TChild WithToolTipService_VerticalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ToolTipService.VerticalOffsetProperty); return target;}
public static Style<TChild> WithToolTipService_VerticalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ToolTipService.VerticalOffsetProperty); return target;}
public static TChild WithVerticalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.SetValue(target, System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty); return target;}
public static Style<TChild> WithVerticalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.StyleSetter(target, System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty); return target;}

//CanDelayPlacementProperty
public static TChild WithCanDelayPlacement<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.SetValue(target, System.Windows.Documents.Figure.CanDelayPlacementProperty); return target;}
public static Style<TChild> WithCanDelayPlacement<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.StyleSetter(target, System.Windows.Documents.Figure.CanDelayPlacementProperty); return target;}

//WrapDirectionProperty
public static TChild WithWrapDirection<TChild>(this TChild target, ValueProxy<System.Windows.WrapDirection>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.SetValue(target, System.Windows.Documents.Figure.WrapDirectionProperty); return target;}
public static Style<TChild> WithWrapDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.WrapDirection>? value, Disambigator<System.Windows.Documents.Figure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Figure{value?.StyleSetter(target, System.Windows.Documents.Figure.WrapDirectionProperty); return target;}

//BackgroundProperty
public static System.Windows.Documents.FixedPage WithBackground(this System.Windows.Documents.FixedPage target, ValueProxy<System.Windows.Media.Brush>? value) {value?.SetValue(target, System.Windows.Documents.FixedPage.BackgroundProperty); return target;}
public static Style<System.Windows.Documents.FixedPage> WithBackground(this Style<System.Windows.Documents.FixedPage> target, ValueProxy<System.Windows.Media.Brush>? value) {value?.StyleSetter(target, System.Windows.Documents.FixedPage.BackgroundProperty); return target;}
public static TChild WithBackground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.BackgroundProperty); return target;}
public static Style<TChild> WithBackground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.BackgroundProperty); return target;}
public static TChild WithBackground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.TableColumn, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableColumn{value?.SetValue(target, System.Windows.Documents.TableColumn.BackgroundProperty); return target;}
public static Style<TChild> WithBackground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.TableColumn, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableColumn{value?.StyleSetter(target, System.Windows.Documents.TableColumn.BackgroundProperty); return target;}
public static TChild WithBackground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.SetValue(target, System.Windows.Documents.TextElement.BackgroundProperty); return target;}
public static Style<TChild> WithBackground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.StyleSetter(target, System.Windows.Documents.TextElement.BackgroundProperty); return target;}
public static TChild WithBackground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.BackgroundProperty); return target;}
public static Style<TChild> WithBackground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.BackgroundProperty); return target;}
public static TChild WithBackground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Border, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Border{value?.SetValue(target, System.Windows.Controls.Border.BackgroundProperty); return target;}
public static Style<TChild> WithBackground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Border, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Border{value?.StyleSetter(target, System.Windows.Controls.Border.BackgroundProperty); return target;}
public static TChild WithBackground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.BackgroundProperty); return target;}
public static Style<TChild> WithBackground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.BackgroundProperty); return target;}
public static TChild WithBackground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas{value?.SetValue(target, System.Windows.Controls.InkCanvas.BackgroundProperty); return target;}
public static Style<TChild> WithBackground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas{value?.StyleSetter(target, System.Windows.Controls.InkCanvas.BackgroundProperty); return target;}
public static TChild WithBackground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.SetValue(target, System.Windows.Controls.Page.BackgroundProperty); return target;}
public static Style<TChild> WithBackground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.StyleSetter(target, System.Windows.Controls.Page.BackgroundProperty); return target;}
public static TChild WithBackground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Panel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Panel{value?.SetValue(target, System.Windows.Controls.Panel.BackgroundProperty); return target;}
public static Style<TChild> WithBackground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Panel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Panel{value?.StyleSetter(target, System.Windows.Controls.Panel.BackgroundProperty); return target;}
public static TChild WithBackground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.BackgroundProperty); return target;}
public static Style<TChild> WithBackground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.BackgroundProperty); return target;}
public static TChild WithBackground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.ToolBarTray, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBarTray{value?.SetValue(target, System.Windows.Controls.ToolBarTray.BackgroundProperty); return target;}
public static Style<TChild> WithBackground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.ToolBarTray, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBarTray{value?.StyleSetter(target, System.Windows.Controls.ToolBarTray.BackgroundProperty); return target;}
public static TChild WithBackground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Primitives.BulletDecorator, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.BulletDecorator{value?.SetValue(target, System.Windows.Controls.Primitives.BulletDecorator.BackgroundProperty); return target;}
public static Style<TChild> WithBackground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Primitives.BulletDecorator, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.BulletDecorator{value?.StyleSetter(target, System.Windows.Controls.Primitives.BulletDecorator.BackgroundProperty); return target;}

//RightProperty
public static TChild WithFixedPage_Right<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Documents.FixedPage.RightProperty); return target;}
public static Style<TChild> WithFixedPage_Right<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Documents.FixedPage.RightProperty); return target;}
public static TChild WithCanvas_Right<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.Canvas.RightProperty); return target;}
public static Style<TChild> WithCanvas_Right<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.Canvas.RightProperty); return target;}
public static TChild WithInkCanvas_Right<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.InkCanvas.RightProperty); return target;}
public static Style<TChild> WithInkCanvas_Right<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.InkCanvas.RightProperty); return target;}

//BottomProperty
public static TChild WithFixedPage_Bottom<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Documents.FixedPage.BottomProperty); return target;}
public static Style<TChild> WithFixedPage_Bottom<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Documents.FixedPage.BottomProperty); return target;}
public static TChild WithCanvas_Bottom<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.Canvas.BottomProperty); return target;}
public static Style<TChild> WithCanvas_Bottom<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.Canvas.BottomProperty); return target;}
public static TChild WithInkCanvas_Bottom<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.InkCanvas.BottomProperty); return target;}
public static Style<TChild> WithInkCanvas_Bottom<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.InkCanvas.BottomProperty); return target;}

//ContentBoxProperty
public static System.Windows.Documents.FixedPage WithContentBox(this System.Windows.Documents.FixedPage target, ValueProxy<System.Windows.Rect>? value) {value?.SetValue(target, System.Windows.Documents.FixedPage.ContentBoxProperty); return target;}
public static Style<System.Windows.Documents.FixedPage> WithContentBox(this Style<System.Windows.Documents.FixedPage> target, ValueProxy<System.Windows.Rect>? value) {value?.StyleSetter(target, System.Windows.Documents.FixedPage.ContentBoxProperty); return target;}

//BleedBoxProperty
public static System.Windows.Documents.FixedPage WithBleedBox(this System.Windows.Documents.FixedPage target, ValueProxy<System.Windows.Rect>? value) {value?.SetValue(target, System.Windows.Documents.FixedPage.BleedBoxProperty); return target;}
public static Style<System.Windows.Documents.FixedPage> WithBleedBox(this Style<System.Windows.Documents.FixedPage> target, ValueProxy<System.Windows.Rect>? value) {value?.StyleSetter(target, System.Windows.Documents.FixedPage.BleedBoxProperty); return target;}

//NavigateUriProperty
public static TChild WithFixedPage_NavigateUri<TChild>(this TChild target, ValueProxy<System.Uri>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Documents.FixedPage.NavigateUriProperty); return target;}
public static Style<TChild> WithFixedPage_NavigateUri<TChild>(this Style<TChild> target, ValueProxy<System.Uri>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Documents.FixedPage.NavigateUriProperty); return target;}
public static TChild WithNavigateUri<TChild>(this TChild target, ValueProxy<System.Uri>? value, Disambigator<System.Windows.Documents.Hyperlink, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Hyperlink{value?.SetValue(target, System.Windows.Documents.Hyperlink.NavigateUriProperty); return target;}
public static Style<TChild> WithNavigateUri<TChild>(this Style<TChild> target, ValueProxy<System.Uri>? value, Disambigator<System.Windows.Documents.Hyperlink, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Hyperlink{value?.StyleSetter(target, System.Windows.Documents.Hyperlink.NavigateUriProperty); return target;}

//FontFamilyProperty
public static TChild WithFontFamily<TChild>(this TChild target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.FontFamilyProperty); return target;}
public static Style<TChild> WithFontFamily<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.FontFamilyProperty); return target;}
public static TChild WithTextElement_FontFamily<TChild>(this TChild target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.TextElement.FontFamilyProperty); return target;}
public static Style<TChild> WithTextElement_FontFamily<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.TextElement.FontFamilyProperty); return target;}
public static TChild WithFontFamily<TChild>(this TChild target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.SetValue(target, System.Windows.Documents.TextElement.FontFamilyProperty); return target;}
public static Style<TChild> WithFontFamily<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.StyleSetter(target, System.Windows.Documents.TextElement.FontFamilyProperty); return target;}
public static TChild WithFontFamily<TChild>(this TChild target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.FontFamilyProperty); return target;}
public static Style<TChild> WithFontFamily<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.FontFamilyProperty); return target;}
public static TChild WithFontFamily<TChild>(this TChild target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.FontFamilyProperty); return target;}
public static Style<TChild> WithFontFamily<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.FontFamilyProperty); return target;}
public static TChild WithFontFamily<TChild>(this TChild target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.Controls.DataGridTextColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTextColumn{value?.SetValue(target, System.Windows.Controls.DataGridTextColumn.FontFamilyProperty); return target;}
public static Style<TChild> WithFontFamily<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.Controls.DataGridTextColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTextColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridTextColumn.FontFamilyProperty); return target;}
public static TChild WithFontFamily<TChild>(this TChild target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.SetValue(target, System.Windows.Controls.Page.FontFamilyProperty); return target;}
public static Style<TChild> WithFontFamily<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.StyleSetter(target, System.Windows.Controls.Page.FontFamilyProperty); return target;}
public static TChild WithTextBlock_FontFamily<TChild>(this TChild target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.TextBlock.FontFamilyProperty); return target;}
public static Style<TChild> WithTextBlock_FontFamily<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.TextBlock.FontFamilyProperty); return target;}
public static TChild WithFontFamily<TChild>(this TChild target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.FontFamilyProperty); return target;}
public static Style<TChild> WithFontFamily<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.FontFamily>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.FontFamilyProperty); return target;}

//FontStyleProperty
public static TChild WithFontStyle<TChild>(this TChild target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.FontStyleProperty); return target;}
public static Style<TChild> WithFontStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.FontStyleProperty); return target;}
public static TChild WithTextElement_FontStyle<TChild>(this TChild target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.TextElement.FontStyleProperty); return target;}
public static Style<TChild> WithTextElement_FontStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.TextElement.FontStyleProperty); return target;}
public static TChild WithFontStyle<TChild>(this TChild target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.SetValue(target, System.Windows.Documents.TextElement.FontStyleProperty); return target;}
public static Style<TChild> WithFontStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.StyleSetter(target, System.Windows.Documents.TextElement.FontStyleProperty); return target;}
public static TChild WithFontStyle<TChild>(this TChild target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.FontStyleProperty); return target;}
public static Style<TChild> WithFontStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.FontStyleProperty); return target;}
public static TChild WithFontStyle<TChild>(this TChild target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.FontStyleProperty); return target;}
public static Style<TChild> WithFontStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.FontStyleProperty); return target;}
public static TChild WithFontStyle<TChild>(this TChild target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.Controls.DataGridTextColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTextColumn{value?.SetValue(target, System.Windows.Controls.DataGridTextColumn.FontStyleProperty); return target;}
public static Style<TChild> WithFontStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.Controls.DataGridTextColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTextColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridTextColumn.FontStyleProperty); return target;}
public static TChild WithTextBlock_FontStyle<TChild>(this TChild target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.TextBlock.FontStyleProperty); return target;}
public static Style<TChild> WithTextBlock_FontStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.TextBlock.FontStyleProperty); return target;}
public static TChild WithFontStyle<TChild>(this TChild target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.FontStyleProperty); return target;}
public static Style<TChild> WithFontStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStyle>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.FontStyleProperty); return target;}

//FontWeightProperty
public static TChild WithFontWeight<TChild>(this TChild target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.FontWeightProperty); return target;}
public static Style<TChild> WithFontWeight<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.FontWeightProperty); return target;}
public static TChild WithTextElement_FontWeight<TChild>(this TChild target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.TextElement.FontWeightProperty); return target;}
public static Style<TChild> WithTextElement_FontWeight<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.TextElement.FontWeightProperty); return target;}
public static TChild WithFontWeight<TChild>(this TChild target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.SetValue(target, System.Windows.Documents.TextElement.FontWeightProperty); return target;}
public static Style<TChild> WithFontWeight<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.StyleSetter(target, System.Windows.Documents.TextElement.FontWeightProperty); return target;}
public static TChild WithFontWeight<TChild>(this TChild target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.FontWeightProperty); return target;}
public static Style<TChild> WithFontWeight<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.FontWeightProperty); return target;}
public static TChild WithFontWeight<TChild>(this TChild target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.FontWeightProperty); return target;}
public static Style<TChild> WithFontWeight<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.FontWeightProperty); return target;}
public static TChild WithFontWeight<TChild>(this TChild target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.Controls.DataGridTextColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTextColumn{value?.SetValue(target, System.Windows.Controls.DataGridTextColumn.FontWeightProperty); return target;}
public static Style<TChild> WithFontWeight<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.Controls.DataGridTextColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTextColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridTextColumn.FontWeightProperty); return target;}
public static TChild WithTextBlock_FontWeight<TChild>(this TChild target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.TextBlock.FontWeightProperty); return target;}
public static Style<TChild> WithTextBlock_FontWeight<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.TextBlock.FontWeightProperty); return target;}
public static TChild WithFontWeight<TChild>(this TChild target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.FontWeightProperty); return target;}
public static Style<TChild> WithFontWeight<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontWeight>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.FontWeightProperty); return target;}

//FontStretchProperty
public static TChild WithFontStretch<TChild>(this TChild target, ValueProxy<System.Windows.FontStretch>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.FontStretchProperty); return target;}
public static Style<TChild> WithFontStretch<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStretch>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.FontStretchProperty); return target;}
public static TChild WithTextElement_FontStretch<TChild>(this TChild target, ValueProxy<System.Windows.FontStretch>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.TextElement.FontStretchProperty); return target;}
public static Style<TChild> WithTextElement_FontStretch<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStretch>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.TextElement.FontStretchProperty); return target;}
public static TChild WithFontStretch<TChild>(this TChild target, ValueProxy<System.Windows.FontStretch>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.SetValue(target, System.Windows.Documents.TextElement.FontStretchProperty); return target;}
public static Style<TChild> WithFontStretch<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStretch>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.StyleSetter(target, System.Windows.Documents.TextElement.FontStretchProperty); return target;}
public static TChild WithFontStretch<TChild>(this TChild target, ValueProxy<System.Windows.FontStretch>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.FontStretchProperty); return target;}
public static Style<TChild> WithFontStretch<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStretch>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.FontStretchProperty); return target;}

public static TChild WithFontStretch<TChild>(this TChild target, ValueProxy<System.Windows.FontStretch>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.FontStretchProperty); return target;}
public static Style<TChild> WithFontStretch<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStretch>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.FontStretchProperty); return target;}
public static TChild WithTextBlock_FontStretch<TChild>(this TChild target, ValueProxy<System.Windows.FontStretch>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.TextBlock.FontStretchProperty); return target;}
public static Style<TChild> WithTextBlock_FontStretch<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStretch>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.TextBlock.FontStretchProperty); return target;}
public static TChild WithFontStretch<TChild>(this TChild target, ValueProxy<System.Windows.FontStretch>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.FontStretchProperty); return target;}
public static Style<TChild> WithFontStretch<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontStretch>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.FontStretchProperty); return target;}

//FontSizeProperty
public static TChild WithFontSize<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.FontSizeProperty); return target;}
public static Style<TChild> WithFontSize<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.FontSizeProperty); return target;}
public static TChild WithTextElement_FontSize<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.TextElement.FontSizeProperty); return target;}
public static Style<TChild> WithTextElement_FontSize<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.TextElement.FontSizeProperty); return target;}
public static TChild WithFontSize<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.SetValue(target, System.Windows.Documents.TextElement.FontSizeProperty); return target;}
public static Style<TChild> WithFontSize<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.StyleSetter(target, System.Windows.Documents.TextElement.FontSizeProperty); return target;}
public static TChild WithFontSize<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.FontSizeProperty); return target;}
public static Style<TChild> WithFontSize<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.FontSizeProperty); return target;}
public static TChild WithFontSize<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.FontSizeProperty); return target;}
public static Style<TChild> WithFontSize<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.FontSizeProperty); return target;}
public static TChild WithFontSize<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGridTextColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTextColumn{value?.SetValue(target, System.Windows.Controls.DataGridTextColumn.FontSizeProperty); return target;}
public static Style<TChild> WithFontSize<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGridTextColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTextColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridTextColumn.FontSizeProperty); return target;}
public static TChild WithFontSize<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.SetValue(target, System.Windows.Controls.Page.FontSizeProperty); return target;}
public static Style<TChild> WithFontSize<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.StyleSetter(target, System.Windows.Controls.Page.FontSizeProperty); return target;}
public static TChild WithTextBlock_FontSize<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.TextBlock.FontSizeProperty); return target;}
public static Style<TChild> WithTextBlock_FontSize<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.TextBlock.FontSizeProperty); return target;}
public static TChild WithFontSize<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.FontSizeProperty); return target;}
public static Style<TChild> WithFontSize<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.FontSizeProperty); return target;}

//ForegroundProperty
public static TChild WithForeground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.ForegroundProperty); return target;}
public static Style<TChild> WithForeground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.ForegroundProperty); return target;}
public static TChild WithTextElement_Foreground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.TextElement.ForegroundProperty); return target;}
public static Style<TChild> WithTextElement_Foreground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.TextElement.ForegroundProperty); return target;}
public static TChild WithForeground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.SetValue(target, System.Windows.Documents.TextElement.ForegroundProperty); return target;}
public static Style<TChild> WithForeground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.StyleSetter(target, System.Windows.Documents.TextElement.ForegroundProperty); return target;}
public static TChild WithForeground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.ForegroundProperty); return target;}
public static Style<TChild> WithForeground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.ForegroundProperty); return target;}
public static TChild WithForeground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.ForegroundProperty); return target;}
public static Style<TChild> WithForeground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.ForegroundProperty); return target;}
public static TChild WithForeground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.DataGridTextColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTextColumn{value?.SetValue(target, System.Windows.Controls.DataGridTextColumn.ForegroundProperty); return target;}
public static Style<TChild> WithForeground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.DataGridTextColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTextColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridTextColumn.ForegroundProperty); return target;}
public static TChild WithForeground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.SetValue(target, System.Windows.Controls.Page.ForegroundProperty); return target;}
public static Style<TChild> WithForeground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.StyleSetter(target, System.Windows.Controls.Page.ForegroundProperty); return target;}
public static TChild WithTextBlock_Foreground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.TextBlock.ForegroundProperty); return target;}
public static Style<TChild> WithTextBlock_Foreground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.TextBlock.ForegroundProperty); return target;}
public static TChild WithForeground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.ForegroundProperty); return target;}
public static Style<TChild> WithForeground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.ForegroundProperty); return target;}
public static System.Windows.Media.TextEffect WithForeground(this System.Windows.Media.TextEffect target, ValueProxy<System.Windows.Media.Brush>? value) {value?.SetValue(target, System.Windows.Media.TextEffect.ForegroundProperty); return target;}
public static Style<System.Windows.Media.TextEffect> WithForeground(this Style<System.Windows.Media.TextEffect> target, ValueProxy<System.Windows.Media.Brush>? value) {value?.StyleSetter(target, System.Windows.Media.TextEffect.ForegroundProperty); return target;}

//TextEffectsProperty
public static TChild WithTextEffects<TChild>(this TChild target, ValueProxy<System.Windows.Media.TextEffectCollection>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.TextEffectsProperty); return target;}
public static Style<TChild> WithTextEffects<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.TextEffectCollection>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.TextEffectsProperty); return target;}
public static TChild WithTextEffects<TChild>(this TChild target, ValueProxy<System.Windows.Media.TextEffectCollection>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.SetValue(target, System.Windows.Documents.TextElement.TextEffectsProperty); return target;}
public static Style<TChild> WithTextEffects<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.TextEffectCollection>? value, Disambigator<System.Windows.Documents.TextElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextElement{value?.StyleSetter(target, System.Windows.Documents.TextElement.TextEffectsProperty); return target;}
public static TChild WithTextEffects<TChild>(this TChild target, ValueProxy<System.Windows.Media.TextEffectCollection>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.TextEffectsProperty); return target;}
public static Style<TChild> WithTextEffects<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.TextEffectCollection>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.TextEffectsProperty); return target;}
public static TChild WithTextEffects<TChild>(this TChild target, ValueProxy<System.Windows.Media.TextEffectCollection>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.TextEffectsProperty); return target;}
public static Style<TChild> WithTextEffects<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.TextEffectCollection>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.TextEffectsProperty); return target;}

//ColumnWidthProperty
public static TChild WithColumnWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.ColumnWidthProperty); return target;}
public static Style<TChild> WithColumnWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.ColumnWidthProperty); return target;}
public static TChild WithColumnWidth<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataGridLength>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.ColumnWidthProperty); return target;}
public static Style<TChild> WithColumnWidth<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataGridLength>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.ColumnWidthProperty); return target;}

//ColumnGapProperty
public static TChild WithColumnGap<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.ColumnGapProperty); return target;}
public static Style<TChild> WithColumnGap<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.ColumnGapProperty); return target;}

//IsColumnWidthFlexibleProperty
public static TChild WithIsColumnWidthFlexible<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.IsColumnWidthFlexibleProperty); return target;}
public static Style<TChild> WithIsColumnWidthFlexible<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.IsColumnWidthFlexibleProperty); return target;}

//ColumnRuleWidthProperty
public static TChild WithColumnRuleWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.ColumnRuleWidthProperty); return target;}
public static Style<TChild> WithColumnRuleWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.ColumnRuleWidthProperty); return target;}

//ColumnRuleBrushProperty
public static TChild WithColumnRuleBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.ColumnRuleBrushProperty); return target;}
public static Style<TChild> WithColumnRuleBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.ColumnRuleBrushProperty); return target;}

//IsOptimalParagraphEnabledProperty
public static TChild WithIsOptimalParagraphEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.IsOptimalParagraphEnabledProperty); return target;}
public static Style<TChild> WithIsOptimalParagraphEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.IsOptimalParagraphEnabledProperty); return target;}

//PageWidthProperty
public static TChild WithPageWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.PageWidthProperty); return target;}
public static Style<TChild> WithPageWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.PageWidthProperty); return target;}

//MinPageWidthProperty
public static TChild WithMinPageWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.MinPageWidthProperty); return target;}
public static Style<TChild> WithMinPageWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.MinPageWidthProperty); return target;}

//MaxPageWidthProperty
public static TChild WithMaxPageWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.MaxPageWidthProperty); return target;}
public static Style<TChild> WithMaxPageWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.MaxPageWidthProperty); return target;}

//PageHeightProperty
public static TChild WithPageHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.PageHeightProperty); return target;}
public static Style<TChild> WithPageHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.PageHeightProperty); return target;}

//MinPageHeightProperty
public static TChild WithMinPageHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.MinPageHeightProperty); return target;}
public static Style<TChild> WithMinPageHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.MinPageHeightProperty); return target;}

//MaxPageHeightProperty
public static TChild WithMaxPageHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.MaxPageHeightProperty); return target;}
public static Style<TChild> WithMaxPageHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.MaxPageHeightProperty); return target;}

//PagePaddingProperty
public static TChild WithPagePadding<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.SetValue(target, System.Windows.Documents.FlowDocument.PagePaddingProperty); return target;}
public static Style<TChild> WithPagePadding<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Documents.FlowDocument, TChild>? doNotUse = null) where TChild: System.Windows.Documents.FlowDocument{value?.StyleSetter(target, System.Windows.Documents.FlowDocument.PagePaddingProperty); return target;}

//IndicesProperty
public static System.Windows.Documents.Glyphs WithIndices(this System.Windows.Documents.Glyphs target, ValueProxy<System.String>? value) {value?.SetValue(target, System.Windows.Documents.Glyphs.IndicesProperty); return target;}
public static Style<System.Windows.Documents.Glyphs> WithIndices(this Style<System.Windows.Documents.Glyphs> target, ValueProxy<System.String>? value) {value?.StyleSetter(target, System.Windows.Documents.Glyphs.IndicesProperty); return target;}

//UnicodeStringProperty
public static System.Windows.Documents.Glyphs WithUnicodeString(this System.Windows.Documents.Glyphs target, ValueProxy<System.String>? value) {value?.SetValue(target, System.Windows.Documents.Glyphs.UnicodeStringProperty); return target;}
public static Style<System.Windows.Documents.Glyphs> WithUnicodeString(this Style<System.Windows.Documents.Glyphs> target, ValueProxy<System.String>? value) {value?.StyleSetter(target, System.Windows.Documents.Glyphs.UnicodeStringProperty); return target;}

//CaretStopsProperty
public static System.Windows.Documents.Glyphs WithCaretStops(this System.Windows.Documents.Glyphs target, ValueProxy<System.String>? value) {value?.SetValue(target, System.Windows.Documents.Glyphs.CaretStopsProperty); return target;}
public static Style<System.Windows.Documents.Glyphs> WithCaretStops(this Style<System.Windows.Documents.Glyphs> target, ValueProxy<System.String>? value) {value?.StyleSetter(target, System.Windows.Documents.Glyphs.CaretStopsProperty); return target;}

//FontRenderingEmSizeProperty
public static System.Windows.Documents.Glyphs WithFontRenderingEmSize(this System.Windows.Documents.Glyphs target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Documents.Glyphs.FontRenderingEmSizeProperty); return target;}
public static Style<System.Windows.Documents.Glyphs> WithFontRenderingEmSize(this Style<System.Windows.Documents.Glyphs> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Documents.Glyphs.FontRenderingEmSizeProperty); return target;}

//OriginXProperty
public static System.Windows.Documents.Glyphs WithOriginX(this System.Windows.Documents.Glyphs target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Documents.Glyphs.OriginXProperty); return target;}
public static Style<System.Windows.Documents.Glyphs> WithOriginX(this Style<System.Windows.Documents.Glyphs> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Documents.Glyphs.OriginXProperty); return target;}

//OriginYProperty
public static System.Windows.Documents.Glyphs WithOriginY(this System.Windows.Documents.Glyphs target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Documents.Glyphs.OriginYProperty); return target;}
public static Style<System.Windows.Documents.Glyphs> WithOriginY(this Style<System.Windows.Documents.Glyphs> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Documents.Glyphs.OriginYProperty); return target;}

//FontUriProperty
public static System.Windows.Documents.Glyphs WithFontUri(this System.Windows.Documents.Glyphs target, ValueProxy<System.Uri>? value) {value?.SetValue(target, System.Windows.Documents.Glyphs.FontUriProperty); return target;}
public static Style<System.Windows.Documents.Glyphs> WithFontUri(this Style<System.Windows.Documents.Glyphs> target, ValueProxy<System.Uri>? value) {value?.StyleSetter(target, System.Windows.Documents.Glyphs.FontUriProperty); return target;}

//StyleSimulationsProperty
public static System.Windows.Documents.Glyphs WithStyleSimulations(this System.Windows.Documents.Glyphs target, ValueProxy<System.Windows.Media.StyleSimulations>? value) {value?.SetValue(target, System.Windows.Documents.Glyphs.StyleSimulationsProperty); return target;}
public static Style<System.Windows.Documents.Glyphs> WithStyleSimulations(this Style<System.Windows.Documents.Glyphs> target, ValueProxy<System.Windows.Media.StyleSimulations>? value) {value?.StyleSetter(target, System.Windows.Documents.Glyphs.StyleSimulationsProperty); return target;}

//IsSidewaysProperty
public static System.Windows.Documents.Glyphs WithIsSideways(this System.Windows.Documents.Glyphs target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Documents.Glyphs.IsSidewaysProperty); return target;}
public static Style<System.Windows.Documents.Glyphs> WithIsSideways(this Style<System.Windows.Documents.Glyphs> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Documents.Glyphs.IsSidewaysProperty); return target;}

//BidiLevelProperty
public static System.Windows.Documents.Glyphs WithBidiLevel(this System.Windows.Documents.Glyphs target, ValueProxy<System.Int32>? value) {value?.SetValue(target, System.Windows.Documents.Glyphs.BidiLevelProperty); return target;}
public static Style<System.Windows.Documents.Glyphs> WithBidiLevel(this Style<System.Windows.Documents.Glyphs> target, ValueProxy<System.Int32>? value) {value?.StyleSetter(target, System.Windows.Documents.Glyphs.BidiLevelProperty); return target;}

//DeviceFontNameProperty
public static System.Windows.Documents.Glyphs WithDeviceFontName(this System.Windows.Documents.Glyphs target, ValueProxy<System.String>? value) {value?.SetValue(target, System.Windows.Documents.Glyphs.DeviceFontNameProperty); return target;}
public static Style<System.Windows.Documents.Glyphs> WithDeviceFontName(this Style<System.Windows.Documents.Glyphs> target, ValueProxy<System.String>? value) {value?.StyleSetter(target, System.Windows.Documents.Glyphs.DeviceFontNameProperty); return target;}

//BaselineAlignmentProperty
public static TChild WithBaselineAlignment<TChild>(this TChild target, ValueProxy<System.Windows.BaselineAlignment>? value, Disambigator<System.Windows.Documents.Inline, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Inline{value?.SetValue(target, System.Windows.Documents.Inline.BaselineAlignmentProperty); return target;}
public static Style<TChild> WithBaselineAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.BaselineAlignment>? value, Disambigator<System.Windows.Documents.Inline, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Inline{value?.StyleSetter(target, System.Windows.Documents.Inline.BaselineAlignmentProperty); return target;}

//TextDecorationsProperty
public static TChild WithTextDecorations<TChild>(this TChild target, ValueProxy<System.Windows.TextDecorationCollection>? value, Disambigator<System.Windows.Documents.Inline, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Inline{value?.SetValue(target, System.Windows.Documents.Inline.TextDecorationsProperty); return target;}
public static Style<TChild> WithTextDecorations<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextDecorationCollection>? value, Disambigator<System.Windows.Documents.Inline, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Inline{value?.StyleSetter(target, System.Windows.Documents.Inline.TextDecorationsProperty); return target;}
public static TChild WithTextDecorations<TChild>(this TChild target, ValueProxy<System.Windows.TextDecorationCollection>? value, Disambigator<System.Windows.Documents.Paragraph, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Paragraph{value?.SetValue(target, System.Windows.Documents.Paragraph.TextDecorationsProperty); return target;}
public static Style<TChild> WithTextDecorations<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextDecorationCollection>? value, Disambigator<System.Windows.Documents.Paragraph, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Paragraph{value?.StyleSetter(target, System.Windows.Documents.Paragraph.TextDecorationsProperty); return target;}
public static TChild WithTextDecorations<TChild>(this TChild target, ValueProxy<System.Windows.TextDecorationCollection>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.TextDecorationsProperty); return target;}
public static Style<TChild> WithTextDecorations<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextDecorationCollection>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.TextDecorationsProperty); return target;}
public static TChild WithTextDecorations<TChild>(this TChild target, ValueProxy<System.Windows.TextDecorationCollection>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.TextDecorationsProperty); return target;}
public static Style<TChild> WithTextDecorations<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextDecorationCollection>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.TextDecorationsProperty); return target;}
public static TChild WithTextDecorations<TChild>(this TChild target, ValueProxy<System.Windows.TextDecorationCollection>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.SetValue(target, System.Windows.Controls.TextBox.TextDecorationsProperty); return target;}
public static Style<TChild> WithTextDecorations<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextDecorationCollection>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.StyleSetter(target, System.Windows.Controls.TextBox.TextDecorationsProperty); return target;}

//MarkerStyleProperty
public static TChild WithMarkerStyle<TChild>(this TChild target, ValueProxy<System.Windows.TextMarkerStyle>? value, Disambigator<System.Windows.Documents.List, TChild>? doNotUse = null) where TChild: System.Windows.Documents.List{value?.SetValue(target, System.Windows.Documents.List.MarkerStyleProperty); return target;}
public static Style<TChild> WithMarkerStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextMarkerStyle>? value, Disambigator<System.Windows.Documents.List, TChild>? doNotUse = null) where TChild: System.Windows.Documents.List{value?.StyleSetter(target, System.Windows.Documents.List.MarkerStyleProperty); return target;}

//MarkerOffsetProperty
public static TChild WithMarkerOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.List, TChild>? doNotUse = null) where TChild: System.Windows.Documents.List{value?.SetValue(target, System.Windows.Documents.List.MarkerOffsetProperty); return target;}
public static Style<TChild> WithMarkerOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.List, TChild>? doNotUse = null) where TChild: System.Windows.Documents.List{value?.StyleSetter(target, System.Windows.Documents.List.MarkerOffsetProperty); return target;}

//StartIndexProperty
public static TChild WithStartIndex<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Documents.List, TChild>? doNotUse = null) where TChild: System.Windows.Documents.List{value?.SetValue(target, System.Windows.Documents.List.StartIndexProperty); return target;}
public static Style<TChild> WithStartIndex<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Documents.List, TChild>? doNotUse = null) where TChild: System.Windows.Documents.List{value?.StyleSetter(target, System.Windows.Documents.List.StartIndexProperty); return target;}

//TextIndentProperty
public static TChild WithTextIndent<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.Paragraph, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Paragraph{value?.SetValue(target, System.Windows.Documents.Paragraph.TextIndentProperty); return target;}
public static Style<TChild> WithTextIndent<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.Paragraph, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Paragraph{value?.StyleSetter(target, System.Windows.Documents.Paragraph.TextIndentProperty); return target;}

//MinOrphanLinesProperty
public static TChild WithMinOrphanLines<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Documents.Paragraph, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Paragraph{value?.SetValue(target, System.Windows.Documents.Paragraph.MinOrphanLinesProperty); return target;}
public static Style<TChild> WithMinOrphanLines<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Documents.Paragraph, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Paragraph{value?.StyleSetter(target, System.Windows.Documents.Paragraph.MinOrphanLinesProperty); return target;}

//MinWidowLinesProperty
public static TChild WithMinWidowLines<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Documents.Paragraph, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Paragraph{value?.SetValue(target, System.Windows.Documents.Paragraph.MinWidowLinesProperty); return target;}
public static Style<TChild> WithMinWidowLines<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Documents.Paragraph, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Paragraph{value?.StyleSetter(target, System.Windows.Documents.Paragraph.MinWidowLinesProperty); return target;}

//KeepWithNextProperty
public static TChild WithKeepWithNext<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.Paragraph, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Paragraph{value?.SetValue(target, System.Windows.Documents.Paragraph.KeepWithNextProperty); return target;}
public static Style<TChild> WithKeepWithNext<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.Paragraph, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Paragraph{value?.StyleSetter(target, System.Windows.Documents.Paragraph.KeepWithNextProperty); return target;}

//KeepTogetherProperty
public static TChild WithKeepTogether<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.Paragraph, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Paragraph{value?.SetValue(target, System.Windows.Documents.Paragraph.KeepTogetherProperty); return target;}
public static Style<TChild> WithKeepTogether<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Documents.Paragraph, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Paragraph{value?.StyleSetter(target, System.Windows.Documents.Paragraph.KeepTogetherProperty); return target;}

//TextProperty
public static TChild WithText<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Documents.Run, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Run{value?.SetValue(target, System.Windows.Documents.Run.TextProperty); return target;}
public static Style<TChild> WithText<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Documents.Run, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Run{value?.StyleSetter(target, System.Windows.Documents.Run.TextProperty); return target;}
public static TChild WithText<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.TextProperty); return target;}
public static Style<TChild> WithText<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.TextProperty); return target;}
public static TChild WithText<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.SetValue(target, System.Windows.Controls.ComboBox.TextProperty); return target;}
public static Style<TChild> WithText<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.StyleSetter(target, System.Windows.Controls.ComboBox.TextProperty); return target;}
public static TChild WithText<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.SetValue(target, System.Windows.Controls.DatePicker.TextProperty); return target;}
public static Style<TChild> WithText<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.StyleSetter(target, System.Windows.Controls.DatePicker.TextProperty); return target;}
public static TChild WithText<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.TextProperty); return target;}
public static Style<TChild> WithText<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.TextProperty); return target;}
public static TChild WithText<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.SetValue(target, System.Windows.Controls.TextBox.TextProperty); return target;}
public static Style<TChild> WithText<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.StyleSetter(target, System.Windows.Controls.TextBox.TextProperty); return target;}
public static TChild WithTextSearch_Text<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.TextSearch.TextProperty); return target;}
public static Style<TChild> WithTextSearch_Text<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.TextSearch.TextProperty); return target;}

//CellSpacingProperty
public static TChild WithCellSpacing<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.Table, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Table{value?.SetValue(target, System.Windows.Documents.Table.CellSpacingProperty); return target;}
public static Style<TChild> WithCellSpacing<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Documents.Table, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Table{value?.StyleSetter(target, System.Windows.Documents.Table.CellSpacingProperty); return target;}

//ColumnSpanProperty
public static TChild WithColumnSpan<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.SetValue(target, System.Windows.Documents.TableCell.ColumnSpanProperty); return target;}
public static Style<TChild> WithColumnSpan<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.StyleSetter(target, System.Windows.Documents.TableCell.ColumnSpanProperty); return target;}
public static TChild WithGrid_ColumnSpan<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.Grid.ColumnSpanProperty); return target;}
public static Style<TChild> WithGrid_ColumnSpan<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.Grid.ColumnSpanProperty); return target;}

//RowSpanProperty
public static TChild WithRowSpan<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.SetValue(target, System.Windows.Documents.TableCell.RowSpanProperty); return target;}
public static Style<TChild> WithRowSpan<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Documents.TableCell, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TableCell{value?.StyleSetter(target, System.Windows.Documents.TableCell.RowSpanProperty); return target;}
public static TChild WithGrid_RowSpan<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.Grid.RowSpanProperty); return target;}
public static Style<TChild> WithGrid_RowSpan<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.Grid.RowSpanProperty); return target;}

//StandardLigaturesProperty
public static TChild WithTypography_StandardLigatures<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StandardLigaturesProperty); return target;}
public static Style<TChild> WithTypography_StandardLigatures<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StandardLigaturesProperty); return target;}

//ContextualLigaturesProperty
public static TChild WithTypography_ContextualLigatures<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.ContextualLigaturesProperty); return target;}
public static Style<TChild> WithTypography_ContextualLigatures<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.ContextualLigaturesProperty); return target;}

//DiscretionaryLigaturesProperty
public static TChild WithTypography_DiscretionaryLigatures<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.DiscretionaryLigaturesProperty); return target;}
public static Style<TChild> WithTypography_DiscretionaryLigatures<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.DiscretionaryLigaturesProperty); return target;}

//HistoricalLigaturesProperty
public static TChild WithTypography_HistoricalLigatures<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.HistoricalLigaturesProperty); return target;}
public static Style<TChild> WithTypography_HistoricalLigatures<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.HistoricalLigaturesProperty); return target;}

//AnnotationAlternatesProperty
public static TChild WithTypography_AnnotationAlternates<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.AnnotationAlternatesProperty); return target;}
public static Style<TChild> WithTypography_AnnotationAlternates<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.AnnotationAlternatesProperty); return target;}

//ContextualAlternatesProperty
public static TChild WithTypography_ContextualAlternates<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.ContextualAlternatesProperty); return target;}
public static Style<TChild> WithTypography_ContextualAlternates<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.ContextualAlternatesProperty); return target;}

//HistoricalFormsProperty
public static TChild WithTypography_HistoricalForms<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.HistoricalFormsProperty); return target;}
public static Style<TChild> WithTypography_HistoricalForms<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.HistoricalFormsProperty); return target;}

//KerningProperty
public static TChild WithTypography_Kerning<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.KerningProperty); return target;}
public static Style<TChild> WithTypography_Kerning<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.KerningProperty); return target;}

//CapitalSpacingProperty
public static TChild WithTypography_CapitalSpacing<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.CapitalSpacingProperty); return target;}
public static Style<TChild> WithTypography_CapitalSpacing<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.CapitalSpacingProperty); return target;}

//CaseSensitiveFormsProperty
public static TChild WithTypography_CaseSensitiveForms<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.CaseSensitiveFormsProperty); return target;}
public static Style<TChild> WithTypography_CaseSensitiveForms<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.CaseSensitiveFormsProperty); return target;}

//StylisticSet1Property
public static TChild WithTypography_StylisticSet1<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet1Property); return target;}
public static Style<TChild> WithTypography_StylisticSet1<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet1Property); return target;}

//StylisticSet2Property
public static TChild WithTypography_StylisticSet2<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet2Property); return target;}
public static Style<TChild> WithTypography_StylisticSet2<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet2Property); return target;}

//StylisticSet3Property
public static TChild WithTypography_StylisticSet3<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet3Property); return target;}
public static Style<TChild> WithTypography_StylisticSet3<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet3Property); return target;}

//StylisticSet4Property
public static TChild WithTypography_StylisticSet4<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet4Property); return target;}
public static Style<TChild> WithTypography_StylisticSet4<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet4Property); return target;}

//StylisticSet5Property
public static TChild WithTypography_StylisticSet5<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet5Property); return target;}
public static Style<TChild> WithTypography_StylisticSet5<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet5Property); return target;}

//StylisticSet6Property
public static TChild WithTypography_StylisticSet6<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet6Property); return target;}
public static Style<TChild> WithTypography_StylisticSet6<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet6Property); return target;}

//StylisticSet7Property
public static TChild WithTypography_StylisticSet7<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet7Property); return target;}
public static Style<TChild> WithTypography_StylisticSet7<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet7Property); return target;}

//StylisticSet8Property
public static TChild WithTypography_StylisticSet8<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet8Property); return target;}
public static Style<TChild> WithTypography_StylisticSet8<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet8Property); return target;}

//StylisticSet9Property
public static TChild WithTypography_StylisticSet9<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet9Property); return target;}
public static Style<TChild> WithTypography_StylisticSet9<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet9Property); return target;}

//StylisticSet10Property
public static TChild WithTypography_StylisticSet10<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet10Property); return target;}
public static Style<TChild> WithTypography_StylisticSet10<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet10Property); return target;}

//StylisticSet11Property
public static TChild WithTypography_StylisticSet11<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet11Property); return target;}
public static Style<TChild> WithTypography_StylisticSet11<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet11Property); return target;}

//StylisticSet12Property
public static TChild WithTypography_StylisticSet12<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet12Property); return target;}
public static Style<TChild> WithTypography_StylisticSet12<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet12Property); return target;}

//StylisticSet13Property
public static TChild WithTypography_StylisticSet13<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet13Property); return target;}
public static Style<TChild> WithTypography_StylisticSet13<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet13Property); return target;}

//StylisticSet14Property
public static TChild WithTypography_StylisticSet14<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet14Property); return target;}
public static Style<TChild> WithTypography_StylisticSet14<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet14Property); return target;}

//StylisticSet15Property
public static TChild WithTypography_StylisticSet15<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet15Property); return target;}
public static Style<TChild> WithTypography_StylisticSet15<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet15Property); return target;}

//StylisticSet16Property
public static TChild WithTypography_StylisticSet16<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet16Property); return target;}
public static Style<TChild> WithTypography_StylisticSet16<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet16Property); return target;}

//StylisticSet17Property
public static TChild WithTypography_StylisticSet17<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet17Property); return target;}
public static Style<TChild> WithTypography_StylisticSet17<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet17Property); return target;}

//StylisticSet18Property
public static TChild WithTypography_StylisticSet18<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet18Property); return target;}
public static Style<TChild> WithTypography_StylisticSet18<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet18Property); return target;}

//StylisticSet19Property
public static TChild WithTypography_StylisticSet19<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet19Property); return target;}
public static Style<TChild> WithTypography_StylisticSet19<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet19Property); return target;}

//StylisticSet20Property
public static TChild WithTypography_StylisticSet20<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticSet20Property); return target;}
public static Style<TChild> WithTypography_StylisticSet20<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticSet20Property); return target;}

//FractionProperty
public static TChild WithTypography_Fraction<TChild>(this TChild target, ValueProxy<System.Windows.FontFraction>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.FractionProperty); return target;}
public static Style<TChild> WithTypography_Fraction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontFraction>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.FractionProperty); return target;}

//SlashedZeroProperty
public static TChild WithTypography_SlashedZero<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.SlashedZeroProperty); return target;}
public static Style<TChild> WithTypography_SlashedZero<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.SlashedZeroProperty); return target;}

//MathematicalGreekProperty
public static TChild WithTypography_MathematicalGreek<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.MathematicalGreekProperty); return target;}
public static Style<TChild> WithTypography_MathematicalGreek<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.MathematicalGreekProperty); return target;}

//EastAsianExpertFormsProperty
public static TChild WithTypography_EastAsianExpertForms<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.EastAsianExpertFormsProperty); return target;}
public static Style<TChild> WithTypography_EastAsianExpertForms<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.EastAsianExpertFormsProperty); return target;}

//VariantsProperty
public static TChild WithTypography_Variants<TChild>(this TChild target, ValueProxy<System.Windows.FontVariants>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.VariantsProperty); return target;}
public static Style<TChild> WithTypography_Variants<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontVariants>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.VariantsProperty); return target;}

//CapitalsProperty
public static TChild WithTypography_Capitals<TChild>(this TChild target, ValueProxy<System.Windows.FontCapitals>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.CapitalsProperty); return target;}
public static Style<TChild> WithTypography_Capitals<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontCapitals>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.CapitalsProperty); return target;}

//NumeralStyleProperty
public static TChild WithTypography_NumeralStyle<TChild>(this TChild target, ValueProxy<System.Windows.FontNumeralStyle>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.NumeralStyleProperty); return target;}
public static Style<TChild> WithTypography_NumeralStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontNumeralStyle>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.NumeralStyleProperty); return target;}

//NumeralAlignmentProperty
public static TChild WithTypography_NumeralAlignment<TChild>(this TChild target, ValueProxy<System.Windows.FontNumeralAlignment>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.NumeralAlignmentProperty); return target;}
public static Style<TChild> WithTypography_NumeralAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontNumeralAlignment>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.NumeralAlignmentProperty); return target;}

//EastAsianWidthsProperty
public static TChild WithTypography_EastAsianWidths<TChild>(this TChild target, ValueProxy<System.Windows.FontEastAsianWidths>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.EastAsianWidthsProperty); return target;}
public static Style<TChild> WithTypography_EastAsianWidths<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontEastAsianWidths>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.EastAsianWidthsProperty); return target;}

//EastAsianLanguageProperty
public static TChild WithTypography_EastAsianLanguage<TChild>(this TChild target, ValueProxy<System.Windows.FontEastAsianLanguage>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.EastAsianLanguageProperty); return target;}
public static Style<TChild> WithTypography_EastAsianLanguage<TChild>(this Style<TChild> target, ValueProxy<System.Windows.FontEastAsianLanguage>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.EastAsianLanguageProperty); return target;}

//StandardSwashesProperty
public static TChild WithTypography_StandardSwashes<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StandardSwashesProperty); return target;}
public static Style<TChild> WithTypography_StandardSwashes<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StandardSwashesProperty); return target;}

//ContextualSwashesProperty
public static TChild WithTypography_ContextualSwashes<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.ContextualSwashesProperty); return target;}
public static Style<TChild> WithTypography_ContextualSwashes<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.ContextualSwashesProperty); return target;}

//StylisticAlternatesProperty
public static TChild WithTypography_StylisticAlternates<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Documents.Typography.StylisticAlternatesProperty); return target;}
public static Style<TChild> WithTypography_StylisticAlternates<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Documents.Typography.StylisticAlternatesProperty); return target;}

//AuthorProperty
public static System.Windows.Controls.StickyNoteControl WithAuthor(this System.Windows.Controls.StickyNoteControl target, ValueProxy<System.String>? value) {value?.SetValue(target, System.Windows.Controls.StickyNoteControl.AuthorProperty); return target;}
public static Style<System.Windows.Controls.StickyNoteControl> WithAuthor(this Style<System.Windows.Controls.StickyNoteControl> target, ValueProxy<System.String>? value) {value?.StyleSetter(target, System.Windows.Controls.StickyNoteControl.AuthorProperty); return target;}

//IsExpandedProperty
public static System.Windows.Controls.StickyNoteControl WithIsExpanded(this System.Windows.Controls.StickyNoteControl target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Controls.StickyNoteControl.IsExpandedProperty); return target;}
public static Style<System.Windows.Controls.StickyNoteControl> WithIsExpanded(this Style<System.Windows.Controls.StickyNoteControl> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Controls.StickyNoteControl.IsExpandedProperty); return target;}
public static TChild WithIsExpanded<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Expander, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Expander{value?.SetValue(target, System.Windows.Controls.Expander.IsExpandedProperty); return target;}
public static Style<TChild> WithIsExpanded<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Expander, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Expander{value?.StyleSetter(target, System.Windows.Controls.Expander.IsExpandedProperty); return target;}
public static TChild WithIsExpanded<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.TreeViewItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TreeViewItem{value?.SetValue(target, System.Windows.Controls.TreeViewItem.IsExpandedProperty); return target;}
public static Style<TChild> WithIsExpanded<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.TreeViewItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TreeViewItem{value?.StyleSetter(target, System.Windows.Controls.TreeViewItem.IsExpandedProperty); return target;}

//IsMouseOverAnchorProperty
public static System.Windows.Controls.StickyNoteControl WithIsMouseOverAnchor(this System.Windows.Controls.StickyNoteControl target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Controls.StickyNoteControl.IsMouseOverAnchorProperty); return target;}
public static Style<System.Windows.Controls.StickyNoteControl> WithIsMouseOverAnchor(this Style<System.Windows.Controls.StickyNoteControl> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Controls.StickyNoteControl.IsMouseOverAnchorProperty); return target;}

//CaptionFontFamilyProperty
public static System.Windows.Controls.StickyNoteControl WithCaptionFontFamily(this System.Windows.Controls.StickyNoteControl target, ValueProxy<System.Windows.Media.FontFamily>? value) {value?.SetValue(target, System.Windows.Controls.StickyNoteControl.CaptionFontFamilyProperty); return target;}
public static Style<System.Windows.Controls.StickyNoteControl> WithCaptionFontFamily(this Style<System.Windows.Controls.StickyNoteControl> target, ValueProxy<System.Windows.Media.FontFamily>? value) {value?.StyleSetter(target, System.Windows.Controls.StickyNoteControl.CaptionFontFamilyProperty); return target;}

//CaptionFontSizeProperty
public static System.Windows.Controls.StickyNoteControl WithCaptionFontSize(this System.Windows.Controls.StickyNoteControl target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Controls.StickyNoteControl.CaptionFontSizeProperty); return target;}
public static Style<System.Windows.Controls.StickyNoteControl> WithCaptionFontSize(this Style<System.Windows.Controls.StickyNoteControl> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Controls.StickyNoteControl.CaptionFontSizeProperty); return target;}

//CaptionFontStretchProperty
public static System.Windows.Controls.StickyNoteControl WithCaptionFontStretch(this System.Windows.Controls.StickyNoteControl target, ValueProxy<System.Windows.FontStretch>? value) {value?.SetValue(target, System.Windows.Controls.StickyNoteControl.CaptionFontStretchProperty); return target;}
public static Style<System.Windows.Controls.StickyNoteControl> WithCaptionFontStretch(this Style<System.Windows.Controls.StickyNoteControl> target, ValueProxy<System.Windows.FontStretch>? value) {value?.StyleSetter(target, System.Windows.Controls.StickyNoteControl.CaptionFontStretchProperty); return target;}

//CaptionFontStyleProperty
public static System.Windows.Controls.StickyNoteControl WithCaptionFontStyle(this System.Windows.Controls.StickyNoteControl target, ValueProxy<System.Windows.FontStyle>? value) {value?.SetValue(target, System.Windows.Controls.StickyNoteControl.CaptionFontStyleProperty); return target;}
public static Style<System.Windows.Controls.StickyNoteControl> WithCaptionFontStyle(this Style<System.Windows.Controls.StickyNoteControl> target, ValueProxy<System.Windows.FontStyle>? value) {value?.StyleSetter(target, System.Windows.Controls.StickyNoteControl.CaptionFontStyleProperty); return target;}

//CaptionFontWeightProperty
public static System.Windows.Controls.StickyNoteControl WithCaptionFontWeight(this System.Windows.Controls.StickyNoteControl target, ValueProxy<System.Windows.FontWeight>? value) {value?.SetValue(target, System.Windows.Controls.StickyNoteControl.CaptionFontWeightProperty); return target;}
public static Style<System.Windows.Controls.StickyNoteControl> WithCaptionFontWeight(this Style<System.Windows.Controls.StickyNoteControl> target, ValueProxy<System.Windows.FontWeight>? value) {value?.StyleSetter(target, System.Windows.Controls.StickyNoteControl.CaptionFontWeightProperty); return target;}

//PenWidthProperty
public static System.Windows.Controls.StickyNoteControl WithPenWidth(this System.Windows.Controls.StickyNoteControl target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Controls.StickyNoteControl.PenWidthProperty); return target;}
public static Style<System.Windows.Controls.StickyNoteControl> WithPenWidth(this Style<System.Windows.Controls.StickyNoteControl> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Controls.StickyNoteControl.PenWidthProperty); return target;}

//StickyNoteTypeProperty
public static System.Windows.Controls.StickyNoteControl WithStickyNoteType(this System.Windows.Controls.StickyNoteControl target, ValueProxy<System.Windows.Controls.StickyNoteType>? value) {value?.SetValue(target, System.Windows.Controls.StickyNoteControl.StickyNoteTypeProperty); return target;}
public static Style<System.Windows.Controls.StickyNoteControl> WithStickyNoteType(this Style<System.Windows.Controls.StickyNoteControl> target, ValueProxy<System.Windows.Controls.StickyNoteType>? value) {value?.StyleSetter(target, System.Windows.Controls.StickyNoteControl.StickyNoteTypeProperty); return target;}

//TextTrimmingProperty
public static TChild WithTextTrimming<TChild>(this TChild target, ValueProxy<System.Windows.TextTrimming>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.TextTrimmingProperty); return target;}
public static Style<TChild> WithTextTrimming<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextTrimming>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.TextTrimmingProperty); return target;}
public static TChild WithTextTrimming<TChild>(this TChild target, ValueProxy<System.Windows.TextTrimming>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.TextTrimmingProperty); return target;}
public static Style<TChild> WithTextTrimming<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextTrimming>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.TextTrimmingProperty); return target;}

//TextWrappingProperty
public static TChild WithTextWrapping<TChild>(this TChild target, ValueProxy<System.Windows.TextWrapping>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.TextWrappingProperty); return target;}
public static Style<TChild> WithTextWrapping<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextWrapping>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.TextWrappingProperty); return target;}
public static TChild WithTextWrapping<TChild>(this TChild target, ValueProxy<System.Windows.TextWrapping>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.TextWrappingProperty); return target;}
public static Style<TChild> WithTextWrapping<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextWrapping>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.TextWrappingProperty); return target;}
public static TChild WithTextWrapping<TChild>(this TChild target, ValueProxy<System.Windows.TextWrapping>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.SetValue(target, System.Windows.Controls.TextBox.TextWrappingProperty); return target;}
public static Style<TChild> WithTextWrapping<TChild>(this Style<TChild> target, ValueProxy<System.Windows.TextWrapping>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.StyleSetter(target, System.Windows.Controls.TextBox.TextWrappingProperty); return target;}


//BaselineOffsetProperty
public static TChild WithBaselineOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.SetValue(target, System.Windows.Controls.AccessText.BaselineOffsetProperty); return target;}
public static Style<TChild> WithBaselineOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.AccessText, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AccessText{value?.StyleSetter(target, System.Windows.Controls.AccessText.BaselineOffsetProperty); return target;}
public static TChild WithTextBlock_BaselineOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.TextBlock.BaselineOffsetProperty); return target;}
public static Style<TChild> WithTextBlock_BaselineOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.TextBlock.BaselineOffsetProperty); return target;}
public static TChild WithBaselineOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.SetValue(target, System.Windows.Controls.TextBlock.BaselineOffsetProperty); return target;}
public static Style<TChild> WithBaselineOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.TextBlock, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBlock{value?.StyleSetter(target, System.Windows.Controls.TextBlock.BaselineOffsetProperty); return target;}

//IsDefaultProperty
public static TChild WithIsDefault<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Button, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Button{value?.SetValue(target, System.Windows.Controls.Button.IsDefaultProperty); return target;}
public static Style<TChild> WithIsDefault<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Button, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Button{value?.StyleSetter(target, System.Windows.Controls.Button.IsDefaultProperty); return target;}

//IsCancelProperty
public static TChild WithIsCancel<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Button, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Button{value?.SetValue(target, System.Windows.Controls.Button.IsCancelProperty); return target;}
public static Style<TChild> WithIsCancel<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Button, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Button{value?.StyleSetter(target, System.Windows.Controls.Button.IsCancelProperty); return target;}

//IsDefaultedProperty
public static TChild WithIsDefaulted<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Button, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Button{value?.SetValue(target, System.Windows.Controls.Button.IsDefaultedProperty); return target;}
public static Style<TChild> WithIsDefaulted<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Button, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Button{value?.StyleSetter(target, System.Windows.Controls.Button.IsDefaultedProperty); return target;}

//CalendarButtonStyleProperty
public static TChild WithCalendarButtonStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.SetValue(target, System.Windows.Controls.Calendar.CalendarButtonStyleProperty); return target;}
public static Style<TChild> WithCalendarButtonStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.StyleSetter(target, System.Windows.Controls.Calendar.CalendarButtonStyleProperty); return target;}

//CalendarDayButtonStyleProperty
public static TChild WithCalendarDayButtonStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.SetValue(target, System.Windows.Controls.Calendar.CalendarDayButtonStyleProperty); return target;}
public static Style<TChild> WithCalendarDayButtonStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.StyleSetter(target, System.Windows.Controls.Calendar.CalendarDayButtonStyleProperty); return target;}

//CalendarItemStyleProperty
public static TChild WithCalendarItemStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.SetValue(target, System.Windows.Controls.Calendar.CalendarItemStyleProperty); return target;}
public static Style<TChild> WithCalendarItemStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.StyleSetter(target, System.Windows.Controls.Calendar.CalendarItemStyleProperty); return target;}

//DisplayDateProperty
public static TChild WithDisplayDate<TChild>(this TChild target, ValueProxy<System.DateTime>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.SetValue(target, System.Windows.Controls.Calendar.DisplayDateProperty); return target;}
public static Style<TChild> WithDisplayDate<TChild>(this Style<TChild> target, ValueProxy<System.DateTime>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.StyleSetter(target, System.Windows.Controls.Calendar.DisplayDateProperty); return target;}
public static TChild WithDisplayDate<TChild>(this TChild target, ValueProxy<System.DateTime>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.SetValue(target, System.Windows.Controls.DatePicker.DisplayDateProperty); return target;}
public static Style<TChild> WithDisplayDate<TChild>(this Style<TChild> target, ValueProxy<System.DateTime>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.StyleSetter(target, System.Windows.Controls.DatePicker.DisplayDateProperty); return target;}

//DisplayDateEndProperty
public static TChild WithDisplayDateEnd<TChild>(this TChild target, ValueProxy<System.Nullable<System.DateTime>>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.SetValue(target, System.Windows.Controls.Calendar.DisplayDateEndProperty); return target;}
public static Style<TChild> WithDisplayDateEnd<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.DateTime>>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.StyleSetter(target, System.Windows.Controls.Calendar.DisplayDateEndProperty); return target;}
public static TChild WithDisplayDateEnd<TChild>(this TChild target, ValueProxy<System.Nullable<System.DateTime>>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.SetValue(target, System.Windows.Controls.DatePicker.DisplayDateEndProperty); return target;}
public static Style<TChild> WithDisplayDateEnd<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.DateTime>>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.StyleSetter(target, System.Windows.Controls.DatePicker.DisplayDateEndProperty); return target;}

//DisplayDateStartProperty
public static TChild WithDisplayDateStart<TChild>(this TChild target, ValueProxy<System.Nullable<System.DateTime>>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.SetValue(target, System.Windows.Controls.Calendar.DisplayDateStartProperty); return target;}
public static Style<TChild> WithDisplayDateStart<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.DateTime>>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.StyleSetter(target, System.Windows.Controls.Calendar.DisplayDateStartProperty); return target;}
public static TChild WithDisplayDateStart<TChild>(this TChild target, ValueProxy<System.Nullable<System.DateTime>>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.SetValue(target, System.Windows.Controls.DatePicker.DisplayDateStartProperty); return target;}
public static Style<TChild> WithDisplayDateStart<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.DateTime>>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.StyleSetter(target, System.Windows.Controls.DatePicker.DisplayDateStartProperty); return target;}

//DisplayModeProperty
public static TChild WithDisplayMode<TChild>(this TChild target, ValueProxy<System.Windows.Controls.CalendarMode>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.SetValue(target, System.Windows.Controls.Calendar.DisplayModeProperty); return target;}
public static Style<TChild> WithDisplayMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.CalendarMode>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.StyleSetter(target, System.Windows.Controls.Calendar.DisplayModeProperty); return target;}

//FirstDayOfWeekProperty
public static TChild WithFirstDayOfWeek<TChild>(this TChild target, ValueProxy<System.DayOfWeek>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.SetValue(target, System.Windows.Controls.Calendar.FirstDayOfWeekProperty); return target;}
public static Style<TChild> WithFirstDayOfWeek<TChild>(this Style<TChild> target, ValueProxy<System.DayOfWeek>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.StyleSetter(target, System.Windows.Controls.Calendar.FirstDayOfWeekProperty); return target;}
public static TChild WithFirstDayOfWeek<TChild>(this TChild target, ValueProxy<System.DayOfWeek>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.SetValue(target, System.Windows.Controls.DatePicker.FirstDayOfWeekProperty); return target;}
public static Style<TChild> WithFirstDayOfWeek<TChild>(this Style<TChild> target, ValueProxy<System.DayOfWeek>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.StyleSetter(target, System.Windows.Controls.DatePicker.FirstDayOfWeekProperty); return target;}

//IsTodayHighlightedProperty
public static TChild WithIsTodayHighlighted<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.SetValue(target, System.Windows.Controls.Calendar.IsTodayHighlightedProperty); return target;}
public static Style<TChild> WithIsTodayHighlighted<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.StyleSetter(target, System.Windows.Controls.Calendar.IsTodayHighlightedProperty); return target;}
public static TChild WithIsTodayHighlighted<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.SetValue(target, System.Windows.Controls.DatePicker.IsTodayHighlightedProperty); return target;}
public static Style<TChild> WithIsTodayHighlighted<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.StyleSetter(target, System.Windows.Controls.DatePicker.IsTodayHighlightedProperty); return target;}

//SelectedDateProperty
public static TChild WithSelectedDate<TChild>(this TChild target, ValueProxy<System.Nullable<System.DateTime>>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.SetValue(target, System.Windows.Controls.Calendar.SelectedDateProperty); return target;}
public static Style<TChild> WithSelectedDate<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.DateTime>>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.StyleSetter(target, System.Windows.Controls.Calendar.SelectedDateProperty); return target;}
public static TChild WithSelectedDate<TChild>(this TChild target, ValueProxy<System.Nullable<System.DateTime>>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.SetValue(target, System.Windows.Controls.DatePicker.SelectedDateProperty); return target;}
public static Style<TChild> WithSelectedDate<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.DateTime>>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.StyleSetter(target, System.Windows.Controls.DatePicker.SelectedDateProperty); return target;}

//SelectionModeProperty
public static TChild WithSelectionMode<TChild>(this TChild target, ValueProxy<System.Windows.Controls.CalendarSelectionMode>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.SetValue(target, System.Windows.Controls.Calendar.SelectionModeProperty); return target;}
public static Style<TChild> WithSelectionMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.CalendarSelectionMode>? value, Disambigator<System.Windows.Controls.Calendar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Calendar{value?.StyleSetter(target, System.Windows.Controls.Calendar.SelectionModeProperty); return target;}
public static TChild WithSelectionMode<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataGridSelectionMode>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.SelectionModeProperty); return target;}
public static Style<TChild> WithSelectionMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataGridSelectionMode>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.SelectionModeProperty); return target;}
public static TChild WithSelectionMode<TChild>(this TChild target, ValueProxy<System.Windows.Controls.SelectionMode>? value, Disambigator<System.Windows.Controls.ListBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ListBox{value?.SetValue(target, System.Windows.Controls.ListBox.SelectionModeProperty); return target;}
public static Style<TChild> WithSelectionMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.SelectionMode>? value, Disambigator<System.Windows.Controls.ListBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ListBox{value?.StyleSetter(target, System.Windows.Controls.ListBox.SelectionModeProperty); return target;}

//MaxDropDownHeightProperty
public static TChild WithMaxDropDownHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.SetValue(target, System.Windows.Controls.ComboBox.MaxDropDownHeightProperty); return target;}
public static Style<TChild> WithMaxDropDownHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.StyleSetter(target, System.Windows.Controls.ComboBox.MaxDropDownHeightProperty); return target;}

//IsDropDownOpenProperty
public static TChild WithIsDropDownOpen<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.SetValue(target, System.Windows.Controls.ComboBox.IsDropDownOpenProperty); return target;}
public static Style<TChild> WithIsDropDownOpen<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.StyleSetter(target, System.Windows.Controls.ComboBox.IsDropDownOpenProperty); return target;}
public static TChild WithIsDropDownOpen<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.SetValue(target, System.Windows.Controls.DatePicker.IsDropDownOpenProperty); return target;}
public static Style<TChild> WithIsDropDownOpen<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.StyleSetter(target, System.Windows.Controls.DatePicker.IsDropDownOpenProperty); return target;}

//ShouldPreserveUserEnteredPrefixProperty
public static TChild WithShouldPreserveUserEnteredPrefix<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.SetValue(target, System.Windows.Controls.ComboBox.ShouldPreserveUserEnteredPrefixProperty); return target;}
public static Style<TChild> WithShouldPreserveUserEnteredPrefix<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.StyleSetter(target, System.Windows.Controls.ComboBox.ShouldPreserveUserEnteredPrefixProperty); return target;}

//IsEditableProperty
public static TChild WithIsEditable<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.SetValue(target, System.Windows.Controls.ComboBox.IsEditableProperty); return target;}
public static Style<TChild> WithIsEditable<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.StyleSetter(target, System.Windows.Controls.ComboBox.IsEditableProperty); return target;}

//IsReadOnlyProperty
public static TChild WithIsReadOnly<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.SetValue(target, System.Windows.Controls.ComboBox.IsReadOnlyProperty); return target;}
public static Style<TChild> WithIsReadOnly<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.StyleSetter(target, System.Windows.Controls.ComboBox.IsReadOnlyProperty); return target;}
public static TChild WithIsReadOnly<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.IsReadOnlyProperty); return target;}
public static Style<TChild> WithIsReadOnly<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.IsReadOnlyProperty); return target;}
public static TChild WithIsReadOnly<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridCell, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridCell{value?.SetValue(target, System.Windows.Controls.DataGridCell.IsReadOnlyProperty); return target;}
public static Style<TChild> WithIsReadOnly<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridCell, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridCell{value?.StyleSetter(target, System.Windows.Controls.DataGridCell.IsReadOnlyProperty); return target;}
public static TChild WithIsReadOnly<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.IsReadOnlyProperty); return target;}
public static Style<TChild> WithIsReadOnly<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.IsReadOnlyProperty); return target;}
public static TChild WithIsReadOnly<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.IsReadOnlyProperty); return target;}
public static Style<TChild> WithIsReadOnly<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.IsReadOnlyProperty); return target;}

//SelectionBoxItemProperty
public static TChild WithSelectionBoxItem<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.SetValue(target, System.Windows.Controls.ComboBox.SelectionBoxItemProperty); return target;}
public static Style<TChild> WithSelectionBoxItem<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.StyleSetter(target, System.Windows.Controls.ComboBox.SelectionBoxItemProperty); return target;}

//SelectionBoxItemTemplateProperty
public static TChild WithSelectionBoxItemTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.SetValue(target, System.Windows.Controls.ComboBox.SelectionBoxItemTemplateProperty); return target;}
public static Style<TChild> WithSelectionBoxItemTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.StyleSetter(target, System.Windows.Controls.ComboBox.SelectionBoxItemTemplateProperty); return target;}

//SelectionBoxItemStringFormatProperty
public static TChild WithSelectionBoxItemStringFormat<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.SetValue(target, System.Windows.Controls.ComboBox.SelectionBoxItemStringFormatProperty); return target;}
public static Style<TChild> WithSelectionBoxItemStringFormat<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.StyleSetter(target, System.Windows.Controls.ComboBox.SelectionBoxItemStringFormatProperty); return target;}

//StaysOpenOnEditProperty
public static TChild WithStaysOpenOnEdit<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.SetValue(target, System.Windows.Controls.ComboBox.StaysOpenOnEditProperty); return target;}
public static Style<TChild> WithStaysOpenOnEdit<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ComboBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBox{value?.StyleSetter(target, System.Windows.Controls.ComboBox.StaysOpenOnEditProperty); return target;}

//IsHighlightedProperty
public static TChild WithIsHighlighted<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ComboBoxItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBoxItem{value?.SetValue(target, System.Windows.Controls.ComboBoxItem.IsHighlightedProperty); return target;}
public static Style<TChild> WithIsHighlighted<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ComboBoxItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ComboBoxItem{value?.StyleSetter(target, System.Windows.Controls.ComboBoxItem.IsHighlightedProperty); return target;}
public static TChild WithIsHighlighted<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.IsHighlightedProperty); return target;}
public static Style<TChild> WithIsHighlighted<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.IsHighlightedProperty); return target;}
public static System.Windows.Controls.Primitives.CalendarDayButton WithIsHighlighted(this System.Windows.Controls.Primitives.CalendarDayButton target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Controls.Primitives.CalendarDayButton.IsHighlightedProperty); return target;}
public static Style<System.Windows.Controls.Primitives.CalendarDayButton> WithIsHighlighted(this Style<System.Windows.Controls.Primitives.CalendarDayButton> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Controls.Primitives.CalendarDayButton.IsHighlightedProperty); return target;}

//ContentProperty
public static TChild WithContent<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.ContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentControl{value?.SetValue(target, System.Windows.Controls.ContentControl.ContentProperty); return target;}
public static Style<TChild> WithContent<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.ContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentControl{value?.StyleSetter(target, System.Windows.Controls.ContentControl.ContentProperty); return target;}
public static TChild WithContent<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.ContentPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentPresenter{value?.SetValue(target, System.Windows.Controls.ContentPresenter.ContentProperty); return target;}
public static Style<TChild> WithContent<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.ContentPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentPresenter{value?.StyleSetter(target, System.Windows.Controls.ContentPresenter.ContentProperty); return target;}
public static TChild WithContent<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.GridViewRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewRowPresenter{value?.SetValue(target, System.Windows.Controls.GridViewRowPresenter.ContentProperty); return target;}
public static Style<TChild> WithContent<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.GridViewRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewRowPresenter{value?.StyleSetter(target, System.Windows.Controls.GridViewRowPresenter.ContentProperty); return target;}
public static TChild WithContent<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.SetValue(target, System.Windows.Controls.Page.ContentProperty); return target;}
public static Style<TChild> WithContent<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.StyleSetter(target, System.Windows.Controls.Page.ContentProperty); return target;}
public static TChild WithContent<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Model3D>? value, Disambigator<System.Windows.Media.Media3D.ModelVisual3D, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.ModelVisual3D{value?.SetValue(target, System.Windows.Media.Media3D.ModelVisual3D.ContentProperty); return target;}
public static Style<TChild> WithContent<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Model3D>? value, Disambigator<System.Windows.Media.Media3D.ModelVisual3D, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.ModelVisual3D{value?.StyleSetter(target, System.Windows.Media.Media3D.ModelVisual3D.ContentProperty); return target;}

//HasContentProperty
public static TChild WithHasContent<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentControl{value?.SetValue(target, System.Windows.Controls.ContentControl.HasContentProperty); return target;}
public static Style<TChild> WithHasContent<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentControl{value?.StyleSetter(target, System.Windows.Controls.ContentControl.HasContentProperty); return target;}

//ContentTemplateProperty
public static TChild WithContentTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.ContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentControl{value?.SetValue(target, System.Windows.Controls.ContentControl.ContentTemplateProperty); return target;}
public static Style<TChild> WithContentTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.ContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentControl{value?.StyleSetter(target, System.Windows.Controls.ContentControl.ContentTemplateProperty); return target;}
public static TChild WithContentTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.ContentPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentPresenter{value?.SetValue(target, System.Windows.Controls.ContentPresenter.ContentTemplateProperty); return target;}
public static Style<TChild> WithContentTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.ContentPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentPresenter{value?.StyleSetter(target, System.Windows.Controls.ContentPresenter.ContentTemplateProperty); return target;}
public static TChild WithContentTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.SetValue(target, System.Windows.Controls.TabControl.ContentTemplateProperty); return target;}
public static Style<TChild> WithContentTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.StyleSetter(target, System.Windows.Controls.TabControl.ContentTemplateProperty); return target;}

//ContentTemplateSelectorProperty
public static TChild WithContentTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.ContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentControl{value?.SetValue(target, System.Windows.Controls.ContentControl.ContentTemplateSelectorProperty); return target;}
public static Style<TChild> WithContentTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.ContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentControl{value?.StyleSetter(target, System.Windows.Controls.ContentControl.ContentTemplateSelectorProperty); return target;}
public static TChild WithContentTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.ContentPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentPresenter{value?.SetValue(target, System.Windows.Controls.ContentPresenter.ContentTemplateSelectorProperty); return target;}
public static Style<TChild> WithContentTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.ContentPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentPresenter{value?.StyleSetter(target, System.Windows.Controls.ContentPresenter.ContentTemplateSelectorProperty); return target;}
public static TChild WithContentTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.SetValue(target, System.Windows.Controls.TabControl.ContentTemplateSelectorProperty); return target;}
public static Style<TChild> WithContentTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.StyleSetter(target, System.Windows.Controls.TabControl.ContentTemplateSelectorProperty); return target;}

//ContentStringFormatProperty
public static TChild WithContentStringFormat<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.ContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentControl{value?.SetValue(target, System.Windows.Controls.ContentControl.ContentStringFormatProperty); return target;}
public static Style<TChild> WithContentStringFormat<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.ContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentControl{value?.StyleSetter(target, System.Windows.Controls.ContentControl.ContentStringFormatProperty); return target;}
public static TChild WithContentStringFormat<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.ContentPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentPresenter{value?.SetValue(target, System.Windows.Controls.ContentPresenter.ContentStringFormatProperty); return target;}
public static Style<TChild> WithContentStringFormat<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.ContentPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentPresenter{value?.StyleSetter(target, System.Windows.Controls.ContentPresenter.ContentStringFormatProperty); return target;}
public static TChild WithContentStringFormat<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.SetValue(target, System.Windows.Controls.TabControl.ContentStringFormatProperty); return target;}
public static Style<TChild> WithContentStringFormat<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.StyleSetter(target, System.Windows.Controls.TabControl.ContentStringFormatProperty); return target;}

//RecognizesAccessKeyProperty
public static TChild WithRecognizesAccessKey<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ContentPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentPresenter{value?.SetValue(target, System.Windows.Controls.ContentPresenter.RecognizesAccessKeyProperty); return target;}
public static Style<TChild> WithRecognizesAccessKey<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ContentPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentPresenter{value?.StyleSetter(target, System.Windows.Controls.ContentPresenter.RecognizesAccessKeyProperty); return target;}

//ContentSourceProperty
public static TChild WithContentSource<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.ContentPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentPresenter{value?.SetValue(target, System.Windows.Controls.ContentPresenter.ContentSourceProperty); return target;}
public static Style<TChild> WithContentSource<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.ContentPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContentPresenter{value?.StyleSetter(target, System.Windows.Controls.ContentPresenter.ContentSourceProperty); return target;}

//IsOpenProperty
public static TChild WithIsOpen<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.SetValue(target, System.Windows.Controls.ContextMenu.IsOpenProperty); return target;}
public static Style<TChild> WithIsOpen<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.StyleSetter(target, System.Windows.Controls.ContextMenu.IsOpenProperty); return target;}
public static TChild WithIsOpen<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.SetValue(target, System.Windows.Controls.ToolTip.IsOpenProperty); return target;}
public static Style<TChild> WithIsOpen<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.StyleSetter(target, System.Windows.Controls.ToolTip.IsOpenProperty); return target;}
public static TChild WithIsOpen<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.SetValue(target, System.Windows.Controls.Primitives.Popup.IsOpenProperty); return target;}
public static Style<TChild> WithIsOpen<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.StyleSetter(target, System.Windows.Controls.Primitives.Popup.IsOpenProperty); return target;}

//PlacementTargetProperty
public static TChild WithPlacementTarget<TChild>(this TChild target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.SetValue(target, System.Windows.Controls.ContextMenu.PlacementTargetProperty); return target;}
public static Style<TChild> WithPlacementTarget<TChild>(this Style<TChild> target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.StyleSetter(target, System.Windows.Controls.ContextMenu.PlacementTargetProperty); return target;}
public static TChild WithContextMenuService_PlacementTarget<TChild>(this TChild target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ContextMenuService.PlacementTargetProperty); return target;}
public static Style<TChild> WithContextMenuService_PlacementTarget<TChild>(this Style<TChild> target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ContextMenuService.PlacementTargetProperty); return target;}
public static TChild WithPlacementTarget<TChild>(this TChild target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.SetValue(target, System.Windows.Controls.ToolTip.PlacementTargetProperty); return target;}
public static Style<TChild> WithPlacementTarget<TChild>(this Style<TChild> target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.StyleSetter(target, System.Windows.Controls.ToolTip.PlacementTargetProperty); return target;}
public static TChild WithToolTipService_PlacementTarget<TChild>(this TChild target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ToolTipService.PlacementTargetProperty); return target;}
public static Style<TChild> WithToolTipService_PlacementTarget<TChild>(this Style<TChild> target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ToolTipService.PlacementTargetProperty); return target;}
public static TChild WithPlacementTarget<TChild>(this TChild target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.SetValue(target, System.Windows.Controls.Primitives.Popup.PlacementTargetProperty); return target;}
public static Style<TChild> WithPlacementTarget<TChild>(this Style<TChild> target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.StyleSetter(target, System.Windows.Controls.Primitives.Popup.PlacementTargetProperty); return target;}

//PlacementRectangleProperty
public static TChild WithPlacementRectangle<TChild>(this TChild target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.SetValue(target, System.Windows.Controls.ContextMenu.PlacementRectangleProperty); return target;}
public static Style<TChild> WithPlacementRectangle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.StyleSetter(target, System.Windows.Controls.ContextMenu.PlacementRectangleProperty); return target;}
public static TChild WithContextMenuService_PlacementRectangle<TChild>(this TChild target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ContextMenuService.PlacementRectangleProperty); return target;}
public static Style<TChild> WithContextMenuService_PlacementRectangle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ContextMenuService.PlacementRectangleProperty); return target;}
public static TChild WithPlacementRectangle<TChild>(this TChild target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.SetValue(target, System.Windows.Controls.ToolTip.PlacementRectangleProperty); return target;}
public static Style<TChild> WithPlacementRectangle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.StyleSetter(target, System.Windows.Controls.ToolTip.PlacementRectangleProperty); return target;}
public static TChild WithToolTipService_PlacementRectangle<TChild>(this TChild target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ToolTipService.PlacementRectangleProperty); return target;}
public static Style<TChild> WithToolTipService_PlacementRectangle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ToolTipService.PlacementRectangleProperty); return target;}
public static TChild WithPlacementRectangle<TChild>(this TChild target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.SetValue(target, System.Windows.Controls.Primitives.Popup.PlacementRectangleProperty); return target;}
public static Style<TChild> WithPlacementRectangle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.StyleSetter(target, System.Windows.Controls.Primitives.Popup.PlacementRectangleProperty); return target;}

//PlacementProperty
public static TChild WithPlacement<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Primitives.PlacementMode>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.SetValue(target, System.Windows.Controls.ContextMenu.PlacementProperty); return target;}
public static Style<TChild> WithPlacement<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Primitives.PlacementMode>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.StyleSetter(target, System.Windows.Controls.ContextMenu.PlacementProperty); return target;}
public static TChild WithContextMenuService_Placement<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Primitives.PlacementMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ContextMenuService.PlacementProperty); return target;}
public static Style<TChild> WithContextMenuService_Placement<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Primitives.PlacementMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ContextMenuService.PlacementProperty); return target;}
public static TChild WithPlacement<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Primitives.PlacementMode>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.SetValue(target, System.Windows.Controls.ToolTip.PlacementProperty); return target;}
public static Style<TChild> WithPlacement<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Primitives.PlacementMode>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.StyleSetter(target, System.Windows.Controls.ToolTip.PlacementProperty); return target;}
public static TChild WithToolTipService_Placement<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Primitives.PlacementMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ToolTipService.PlacementProperty); return target;}
public static Style<TChild> WithToolTipService_Placement<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Primitives.PlacementMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ToolTipService.PlacementProperty); return target;}
public static TChild WithPlacement<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Primitives.PlacementMode>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.SetValue(target, System.Windows.Controls.Primitives.Popup.PlacementProperty); return target;}
public static Style<TChild> WithPlacement<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Primitives.PlacementMode>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.StyleSetter(target, System.Windows.Controls.Primitives.Popup.PlacementProperty); return target;}
public static TChild WithPlacement<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Primitives.TickBarPlacement>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.SetValue(target, System.Windows.Controls.Primitives.TickBar.PlacementProperty); return target;}
public static Style<TChild> WithPlacement<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Primitives.TickBarPlacement>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.TickBar.PlacementProperty); return target;}

//HasDropShadowProperty
public static TChild WithHasDropShadow<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.SetValue(target, System.Windows.Controls.ContextMenu.HasDropShadowProperty); return target;}
public static Style<TChild> WithHasDropShadow<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.StyleSetter(target, System.Windows.Controls.ContextMenu.HasDropShadowProperty); return target;}
public static TChild WithContextMenuService_HasDropShadow<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ContextMenuService.HasDropShadowProperty); return target;}
public static Style<TChild> WithContextMenuService_HasDropShadow<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ContextMenuService.HasDropShadowProperty); return target;}
public static TChild WithHasDropShadow<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.SetValue(target, System.Windows.Controls.ToolTip.HasDropShadowProperty); return target;}
public static Style<TChild> WithHasDropShadow<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.StyleSetter(target, System.Windows.Controls.ToolTip.HasDropShadowProperty); return target;}
public static TChild WithToolTipService_HasDropShadow<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ToolTipService.HasDropShadowProperty); return target;}
public static Style<TChild> WithToolTipService_HasDropShadow<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ToolTipService.HasDropShadowProperty); return target;}
public static TChild WithHasDropShadow<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.SetValue(target, System.Windows.Controls.Primitives.Popup.HasDropShadowProperty); return target;}
public static Style<TChild> WithHasDropShadow<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.StyleSetter(target, System.Windows.Controls.Primitives.Popup.HasDropShadowProperty); return target;}

//CustomPopupPlacementCallbackProperty
public static TChild WithCustomPopupPlacementCallback<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Primitives.CustomPopupPlacementCallback>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.SetValue(target, System.Windows.Controls.ContextMenu.CustomPopupPlacementCallbackProperty); return target;}
public static Style<TChild> WithCustomPopupPlacementCallback<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Primitives.CustomPopupPlacementCallback>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.StyleSetter(target, System.Windows.Controls.ContextMenu.CustomPopupPlacementCallbackProperty); return target;}
public static TChild WithCustomPopupPlacementCallback<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Primitives.CustomPopupPlacementCallback>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.SetValue(target, System.Windows.Controls.ToolTip.CustomPopupPlacementCallbackProperty); return target;}
public static Style<TChild> WithCustomPopupPlacementCallback<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Primitives.CustomPopupPlacementCallback>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.StyleSetter(target, System.Windows.Controls.ToolTip.CustomPopupPlacementCallbackProperty); return target;}
public static TChild WithCustomPopupPlacementCallback<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Primitives.CustomPopupPlacementCallback>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.SetValue(target, System.Windows.Controls.Primitives.Popup.CustomPopupPlacementCallbackProperty); return target;}
public static Style<TChild> WithCustomPopupPlacementCallback<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Primitives.CustomPopupPlacementCallback>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.StyleSetter(target, System.Windows.Controls.Primitives.Popup.CustomPopupPlacementCallbackProperty); return target;}

//StaysOpenProperty
public static TChild WithStaysOpen<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.SetValue(target, System.Windows.Controls.ContextMenu.StaysOpenProperty); return target;}
public static Style<TChild> WithStaysOpen<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ContextMenu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ContextMenu{value?.StyleSetter(target, System.Windows.Controls.ContextMenu.StaysOpenProperty); return target;}
public static TChild WithStaysOpen<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.SetValue(target, System.Windows.Controls.ToolTip.StaysOpenProperty); return target;}
public static Style<TChild> WithStaysOpen<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ToolTip, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolTip{value?.StyleSetter(target, System.Windows.Controls.ToolTip.StaysOpenProperty); return target;}
public static TChild WithStaysOpen<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.SetValue(target, System.Windows.Controls.Primitives.Popup.StaysOpenProperty); return target;}
public static Style<TChild> WithStaysOpen<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.StyleSetter(target, System.Windows.Controls.Primitives.Popup.StaysOpenProperty); return target;}

//ShowOnDisabledProperty
public static TChild WithContextMenuService_ShowOnDisabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ContextMenuService.ShowOnDisabledProperty); return target;}
public static Style<TChild> WithContextMenuService_ShowOnDisabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ContextMenuService.ShowOnDisabledProperty); return target;}
public static TChild WithToolTipService_ShowOnDisabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ToolTipService.ShowOnDisabledProperty); return target;}
public static Style<TChild> WithToolTipService_ShowOnDisabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ToolTipService.ShowOnDisabledProperty); return target;}

//HorizontalContentAlignmentProperty
public static TChild WithHorizontalContentAlignment<TChild>(this TChild target, ValueProxy<System.Windows.HorizontalAlignment>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.HorizontalContentAlignmentProperty); return target;}
public static Style<TChild> WithHorizontalContentAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.HorizontalAlignment>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.HorizontalContentAlignmentProperty); return target;}

//VerticalContentAlignmentProperty
public static TChild WithVerticalContentAlignment<TChild>(this TChild target, ValueProxy<System.Windows.VerticalAlignment>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.VerticalContentAlignmentProperty); return target;}
public static Style<TChild> WithVerticalContentAlignment<TChild>(this Style<TChild> target, ValueProxy<System.Windows.VerticalAlignment>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.VerticalContentAlignmentProperty); return target;}

//TemplateProperty
public static TChild WithTemplate<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ControlTemplate>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.SetValue(target, System.Windows.Controls.Control.TemplateProperty); return target;}
public static Style<TChild> WithTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ControlTemplate>? value, Disambigator<System.Windows.Controls.Control, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Control{value?.StyleSetter(target, System.Windows.Controls.Control.TemplateProperty); return target;}
public static TChild WithTemplate<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ControlTemplate>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.SetValue(target, System.Windows.Controls.Page.TemplateProperty); return target;}
public static Style<TChild> WithTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ControlTemplate>? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page{value?.StyleSetter(target, System.Windows.Controls.Page.TemplateProperty); return target;}

//CanUserResizeColumnsProperty
public static TChild WithCanUserResizeColumns<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.CanUserResizeColumnsProperty); return target;}
public static Style<TChild> WithCanUserResizeColumns<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.CanUserResizeColumnsProperty); return target;}

//MinColumnWidthProperty
public static TChild WithMinColumnWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.MinColumnWidthProperty); return target;}
public static Style<TChild> WithMinColumnWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.MinColumnWidthProperty); return target;}

//MaxColumnWidthProperty
public static TChild WithMaxColumnWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.MaxColumnWidthProperty); return target;}
public static Style<TChild> WithMaxColumnWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.MaxColumnWidthProperty); return target;}

//GridLinesVisibilityProperty
public static TChild WithGridLinesVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataGridGridLinesVisibility>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.GridLinesVisibilityProperty); return target;}
public static Style<TChild> WithGridLinesVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataGridGridLinesVisibility>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.GridLinesVisibilityProperty); return target;}

//HorizontalGridLinesBrushProperty
public static TChild WithHorizontalGridLinesBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.HorizontalGridLinesBrushProperty); return target;}
public static Style<TChild> WithHorizontalGridLinesBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.HorizontalGridLinesBrushProperty); return target;}

//VerticalGridLinesBrushProperty
public static TChild WithVerticalGridLinesBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.VerticalGridLinesBrushProperty); return target;}
public static Style<TChild> WithVerticalGridLinesBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.VerticalGridLinesBrushProperty); return target;}

//RowStyleProperty
public static TChild WithRowStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.RowStyleProperty); return target;}
public static Style<TChild> WithRowStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.RowStyleProperty); return target;}

//RowValidationErrorTemplateProperty
public static TChild WithRowValidationErrorTemplate<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ControlTemplate>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.RowValidationErrorTemplateProperty); return target;}
public static Style<TChild> WithRowValidationErrorTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ControlTemplate>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.RowValidationErrorTemplateProperty); return target;}

//RowStyleSelectorProperty
public static TChild WithRowStyleSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.StyleSelector>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.RowStyleSelectorProperty); return target;}
public static Style<TChild> WithRowStyleSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.StyleSelector>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.RowStyleSelectorProperty); return target;}

//RowBackgroundProperty
public static TChild WithRowBackground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.RowBackgroundProperty); return target;}
public static Style<TChild> WithRowBackground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.RowBackgroundProperty); return target;}

//AlternatingRowBackgroundProperty
public static TChild WithAlternatingRowBackground<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.AlternatingRowBackgroundProperty); return target;}
public static Style<TChild> WithAlternatingRowBackground<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.AlternatingRowBackgroundProperty); return target;}

//RowHeightProperty
public static TChild WithRowHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.RowHeightProperty); return target;}
public static Style<TChild> WithRowHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.RowHeightProperty); return target;}

//MinRowHeightProperty
public static TChild WithMinRowHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.MinRowHeightProperty); return target;}
public static Style<TChild> WithMinRowHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.MinRowHeightProperty); return target;}

//RowHeaderWidthProperty
public static TChild WithRowHeaderWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.RowHeaderWidthProperty); return target;}
public static Style<TChild> WithRowHeaderWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.RowHeaderWidthProperty); return target;}

//RowHeaderActualWidthProperty
public static TChild WithRowHeaderActualWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.RowHeaderActualWidthProperty); return target;}
public static Style<TChild> WithRowHeaderActualWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.RowHeaderActualWidthProperty); return target;}

//ColumnHeaderHeightProperty
public static TChild WithColumnHeaderHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.ColumnHeaderHeightProperty); return target;}
public static Style<TChild> WithColumnHeaderHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.ColumnHeaderHeightProperty); return target;}

//HeadersVisibilityProperty
public static TChild WithHeadersVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataGridHeadersVisibility>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.HeadersVisibilityProperty); return target;}
public static Style<TChild> WithHeadersVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataGridHeadersVisibility>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.HeadersVisibilityProperty); return target;}

//CellStyleProperty
public static TChild WithCellStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.CellStyleProperty); return target;}
public static Style<TChild> WithCellStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.CellStyleProperty); return target;}
public static TChild WithCellStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.CellStyleProperty); return target;}
public static Style<TChild> WithCellStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.CellStyleProperty); return target;}

//ColumnHeaderStyleProperty
public static TChild WithColumnHeaderStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.ColumnHeaderStyleProperty); return target;}
public static Style<TChild> WithColumnHeaderStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.ColumnHeaderStyleProperty); return target;}

//RowHeaderStyleProperty
public static TChild WithRowHeaderStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.RowHeaderStyleProperty); return target;}
public static Style<TChild> WithRowHeaderStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.RowHeaderStyleProperty); return target;}

//RowHeaderTemplateProperty
public static TChild WithRowHeaderTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.RowHeaderTemplateProperty); return target;}
public static Style<TChild> WithRowHeaderTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.RowHeaderTemplateProperty); return target;}

//RowHeaderTemplateSelectorProperty
public static TChild WithRowHeaderTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.RowHeaderTemplateSelectorProperty); return target;}
public static Style<TChild> WithRowHeaderTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.RowHeaderTemplateSelectorProperty); return target;}

//HorizontalScrollBarVisibilityProperty
public static TChild WithHorizontalScrollBarVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.HorizontalScrollBarVisibilityProperty); return target;}
public static Style<TChild> WithHorizontalScrollBarVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.HorizontalScrollBarVisibilityProperty); return target;}
public static TChild WithHorizontalScrollBarVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.HorizontalScrollBarVisibilityProperty); return target;}
public static Style<TChild> WithHorizontalScrollBarVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.HorizontalScrollBarVisibilityProperty); return target;}
public static TChild WithScrollViewer_HorizontalScrollBarVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty); return target;}
public static Style<TChild> WithScrollViewer_HorizontalScrollBarVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty); return target;}
public static TChild WithHorizontalScrollBarVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty); return target;}
public static Style<TChild> WithHorizontalScrollBarVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty); return target;}
public static TChild WithHorizontalScrollBarVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.HorizontalScrollBarVisibilityProperty); return target;}
public static Style<TChild> WithHorizontalScrollBarVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.HorizontalScrollBarVisibilityProperty); return target;}

//VerticalScrollBarVisibilityProperty
public static TChild WithVerticalScrollBarVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.VerticalScrollBarVisibilityProperty); return target;}
public static Style<TChild> WithVerticalScrollBarVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.VerticalScrollBarVisibilityProperty); return target;}
public static TChild WithVerticalScrollBarVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.VerticalScrollBarVisibilityProperty); return target;}
public static Style<TChild> WithVerticalScrollBarVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.VerticalScrollBarVisibilityProperty); return target;}
public static TChild WithScrollViewer_VerticalScrollBarVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty); return target;}
public static Style<TChild> WithScrollViewer_VerticalScrollBarVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty); return target;}
public static TChild WithVerticalScrollBarVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty); return target;}
public static Style<TChild> WithVerticalScrollBarVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty); return target;}
public static TChild WithVerticalScrollBarVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.VerticalScrollBarVisibilityProperty); return target;}
public static Style<TChild> WithVerticalScrollBarVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ScrollBarVisibility>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.VerticalScrollBarVisibilityProperty); return target;}


//CurrentItemProperty
public static TChild WithCurrentItem<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.CurrentItemProperty); return target;}
public static Style<TChild> WithCurrentItem<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.CurrentItemProperty); return target;}

//CurrentColumnProperty
public static TChild WithCurrentColumn<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataGridColumn>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.CurrentColumnProperty); return target;}
public static Style<TChild> WithCurrentColumn<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataGridColumn>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.CurrentColumnProperty); return target;}

//CurrentCellProperty
public static TChild WithCurrentCell<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataGridCellInfo>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.CurrentCellProperty); return target;}
public static Style<TChild> WithCurrentCell<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataGridCellInfo>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.CurrentCellProperty); return target;}

//CanUserAddRowsProperty
public static TChild WithCanUserAddRows<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.CanUserAddRowsProperty); return target;}
public static Style<TChild> WithCanUserAddRows<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.CanUserAddRowsProperty); return target;}

//CanUserDeleteRowsProperty
public static TChild WithCanUserDeleteRows<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.CanUserDeleteRowsProperty); return target;}
public static Style<TChild> WithCanUserDeleteRows<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.CanUserDeleteRowsProperty); return target;}

//RowDetailsVisibilityModeProperty
public static TChild WithRowDetailsVisibilityMode<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataGridRowDetailsVisibilityMode>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.RowDetailsVisibilityModeProperty); return target;}
public static Style<TChild> WithRowDetailsVisibilityMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataGridRowDetailsVisibilityMode>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.RowDetailsVisibilityModeProperty); return target;}

//AreRowDetailsFrozenProperty
public static TChild WithAreRowDetailsFrozen<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.AreRowDetailsFrozenProperty); return target;}
public static Style<TChild> WithAreRowDetailsFrozen<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.AreRowDetailsFrozenProperty); return target;}

//RowDetailsTemplateProperty
public static TChild WithRowDetailsTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.RowDetailsTemplateProperty); return target;}
public static Style<TChild> WithRowDetailsTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.RowDetailsTemplateProperty); return target;}

//RowDetailsTemplateSelectorProperty
public static TChild WithRowDetailsTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.RowDetailsTemplateSelectorProperty); return target;}
public static Style<TChild> WithRowDetailsTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.RowDetailsTemplateSelectorProperty); return target;}

//CanUserResizeRowsProperty
public static TChild WithCanUserResizeRows<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.CanUserResizeRowsProperty); return target;}
public static Style<TChild> WithCanUserResizeRows<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.CanUserResizeRowsProperty); return target;}

//NewItemMarginProperty
public static TChild WithNewItemMargin<TChild>(this TChild target, ThicknessValueProxy? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.NewItemMarginProperty); return target;}
public static Style<TChild> WithNewItemMargin<TChild>(this Style<TChild> target, ThicknessValueProxy? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.NewItemMarginProperty); return target;}

//SelectionUnitProperty
public static TChild WithSelectionUnit<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataGridSelectionUnit>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.SelectionUnitProperty); return target;}
public static Style<TChild> WithSelectionUnit<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataGridSelectionUnit>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.SelectionUnitProperty); return target;}

//CanUserSortColumnsProperty
public static TChild WithCanUserSortColumns<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.CanUserSortColumnsProperty); return target;}
public static Style<TChild> WithCanUserSortColumns<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.CanUserSortColumnsProperty); return target;}

//AutoGenerateColumnsProperty
public static TChild WithAutoGenerateColumns<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.AutoGenerateColumnsProperty); return target;}
public static Style<TChild> WithAutoGenerateColumns<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.AutoGenerateColumnsProperty); return target;}

//FrozenColumnCountProperty
public static TChild WithFrozenColumnCount<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.FrozenColumnCountProperty); return target;}
public static Style<TChild> WithFrozenColumnCount<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.FrozenColumnCountProperty); return target;}

//NonFrozenColumnsViewportHorizontalOffsetProperty
public static TChild WithNonFrozenColumnsViewportHorizontalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.NonFrozenColumnsViewportHorizontalOffsetProperty); return target;}
public static Style<TChild> WithNonFrozenColumnsViewportHorizontalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.NonFrozenColumnsViewportHorizontalOffsetProperty); return target;}

//EnableRowVirtualizationProperty
public static TChild WithEnableRowVirtualization<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.EnableRowVirtualizationProperty); return target;}
public static Style<TChild> WithEnableRowVirtualization<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.EnableRowVirtualizationProperty); return target;}

//EnableColumnVirtualizationProperty
public static TChild WithEnableColumnVirtualization<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.EnableColumnVirtualizationProperty); return target;}
public static Style<TChild> WithEnableColumnVirtualization<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.EnableColumnVirtualizationProperty); return target;}

//CanUserReorderColumnsProperty
public static TChild WithCanUserReorderColumns<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.CanUserReorderColumnsProperty); return target;}
public static Style<TChild> WithCanUserReorderColumns<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.CanUserReorderColumnsProperty); return target;}

//DragIndicatorStyleProperty
public static TChild WithDragIndicatorStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.DragIndicatorStyleProperty); return target;}
public static Style<TChild> WithDragIndicatorStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.DragIndicatorStyleProperty); return target;}
public static TChild WithDragIndicatorStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.DragIndicatorStyleProperty); return target;}
public static Style<TChild> WithDragIndicatorStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.DragIndicatorStyleProperty); return target;}

//DropLocationIndicatorStyleProperty
public static TChild WithDropLocationIndicatorStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.DropLocationIndicatorStyleProperty); return target;}
public static Style<TChild> WithDropLocationIndicatorStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.DropLocationIndicatorStyleProperty); return target;}

//ClipboardCopyModeProperty
public static TChild WithClipboardCopyMode<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataGridClipboardCopyMode>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.ClipboardCopyModeProperty); return target;}
public static Style<TChild> WithClipboardCopyMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataGridClipboardCopyMode>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.ClipboardCopyModeProperty); return target;}

//CellsPanelHorizontalOffsetProperty
public static TChild WithCellsPanelHorizontalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.SetValue(target, System.Windows.Controls.DataGrid.CellsPanelHorizontalOffsetProperty); return target;}
public static Style<TChild> WithCellsPanelHorizontalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DataGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGrid{value?.StyleSetter(target, System.Windows.Controls.DataGrid.CellsPanelHorizontalOffsetProperty); return target;}

//ElementStyleProperty
public static TChild WithElementStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridBoundColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridBoundColumn{value?.SetValue(target, System.Windows.Controls.DataGridBoundColumn.ElementStyleProperty); return target;}
public static Style<TChild> WithElementStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridBoundColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridBoundColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridBoundColumn.ElementStyleProperty); return target;}
public static TChild WithElementStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridComboBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridComboBoxColumn{value?.SetValue(target, System.Windows.Controls.DataGridComboBoxColumn.ElementStyleProperty); return target;}
public static Style<TChild> WithElementStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridComboBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridComboBoxColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridComboBoxColumn.ElementStyleProperty); return target;}

//EditingElementStyleProperty
public static TChild WithEditingElementStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridBoundColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridBoundColumn{value?.SetValue(target, System.Windows.Controls.DataGridBoundColumn.EditingElementStyleProperty); return target;}
public static Style<TChild> WithEditingElementStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridBoundColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridBoundColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridBoundColumn.EditingElementStyleProperty); return target;}
public static TChild WithEditingElementStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridComboBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridComboBoxColumn{value?.SetValue(target, System.Windows.Controls.DataGridComboBoxColumn.EditingElementStyleProperty); return target;}
public static Style<TChild> WithEditingElementStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridComboBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridComboBoxColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridComboBoxColumn.EditingElementStyleProperty); return target;}

//ColumnProperty
public static TChild WithColumn<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataGridColumn>? value, Disambigator<System.Windows.Controls.DataGridCell, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridCell{value?.SetValue(target, System.Windows.Controls.DataGridCell.ColumnProperty); return target;}
public static Style<TChild> WithColumn<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataGridColumn>? value, Disambigator<System.Windows.Controls.DataGridCell, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridCell{value?.StyleSetter(target, System.Windows.Controls.DataGridCell.ColumnProperty); return target;}
public static TChild WithGrid_Column<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.Grid.ColumnProperty); return target;}
public static Style<TChild> WithGrid_Column<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.Grid.ColumnProperty); return target;}
public static TChild WithColumn<TChild>(this TChild target, ValueProxy<System.Windows.Controls.GridViewColumn>? value, Disambigator<System.Windows.Controls.GridViewColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumnHeader{value?.SetValue(target, System.Windows.Controls.GridViewColumnHeader.ColumnProperty); return target;}
public static Style<TChild> WithColumn<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.GridViewColumn>? value, Disambigator<System.Windows.Controls.GridViewColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumnHeader{value?.StyleSetter(target, System.Windows.Controls.GridViewColumnHeader.ColumnProperty); return target;}

//IsEditingProperty
public static TChild WithIsEditing<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridCell, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridCell{value?.SetValue(target, System.Windows.Controls.DataGridCell.IsEditingProperty); return target;}
public static Style<TChild> WithIsEditing<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridCell, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridCell{value?.StyleSetter(target, System.Windows.Controls.DataGridCell.IsEditingProperty); return target;}
public static TChild WithIsEditing<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.SetValue(target, System.Windows.Controls.DataGridRow.IsEditingProperty); return target;}
public static Style<TChild> WithIsEditing<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.StyleSetter(target, System.Windows.Controls.DataGridRow.IsEditingProperty); return target;}

//IsSelectedProperty
public static TChild WithIsSelected<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridCell, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridCell{value?.SetValue(target, System.Windows.Controls.DataGridCell.IsSelectedProperty); return target;}
public static Style<TChild> WithIsSelected<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridCell, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridCell{value?.StyleSetter(target, System.Windows.Controls.DataGridCell.IsSelectedProperty); return target;}
public static TChild WithIsSelected<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.SetValue(target, System.Windows.Controls.DataGridRow.IsSelectedProperty); return target;}
public static Style<TChild> WithIsSelected<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.StyleSetter(target, System.Windows.Controls.DataGridRow.IsSelectedProperty); return target;}
public static TChild WithIsSelected<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ListBoxItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ListBoxItem{value?.SetValue(target, System.Windows.Controls.ListBoxItem.IsSelectedProperty); return target;}
public static Style<TChild> WithIsSelected<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ListBoxItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ListBoxItem{value?.StyleSetter(target, System.Windows.Controls.ListBoxItem.IsSelectedProperty); return target;}
public static TChild WithIsSelected<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.TabItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabItem{value?.SetValue(target, System.Windows.Controls.TabItem.IsSelectedProperty); return target;}
public static Style<TChild> WithIsSelected<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.TabItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabItem{value?.StyleSetter(target, System.Windows.Controls.TabItem.IsSelectedProperty); return target;}
public static TChild WithIsSelected<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.TreeViewItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TreeViewItem{value?.SetValue(target, System.Windows.Controls.TreeViewItem.IsSelectedProperty); return target;}
public static Style<TChild> WithIsSelected<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.TreeViewItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TreeViewItem{value?.StyleSetter(target, System.Windows.Controls.TreeViewItem.IsSelectedProperty); return target;}
public static System.Windows.Controls.Primitives.CalendarDayButton WithIsSelected(this System.Windows.Controls.Primitives.CalendarDayButton target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Controls.Primitives.CalendarDayButton.IsSelectedProperty); return target;}
public static Style<System.Windows.Controls.Primitives.CalendarDayButton> WithIsSelected(this Style<System.Windows.Controls.Primitives.CalendarDayButton> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Controls.Primitives.CalendarDayButton.IsSelectedProperty); return target;}
public static TChild WithSelector_IsSelected<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.Primitives.Selector.IsSelectedProperty); return target;}
public static Style<TChild> WithSelector_IsSelected<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.Primitives.Selector.IsSelectedProperty); return target;}

//IsThreeStateProperty
public static TChild WithIsThreeState<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridCheckBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridCheckBoxColumn{value?.SetValue(target, System.Windows.Controls.DataGridCheckBoxColumn.IsThreeStateProperty); return target;}
public static Style<TChild> WithIsThreeState<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridCheckBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridCheckBoxColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridCheckBoxColumn.IsThreeStateProperty); return target;}
public static TChild WithIsThreeState<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.ToggleButton, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ToggleButton{value?.SetValue(target, System.Windows.Controls.Primitives.ToggleButton.IsThreeStateProperty); return target;}
public static Style<TChild> WithIsThreeState<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.ToggleButton, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ToggleButton{value?.StyleSetter(target, System.Windows.Controls.Primitives.ToggleButton.IsThreeStateProperty); return target;}

//HeaderProperty
public static TChild WithHeader<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.HeaderProperty); return target;}
public static Style<TChild> WithHeader<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.HeaderProperty); return target;}
public static TChild WithHeader<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.SetValue(target, System.Windows.Controls.DataGridRow.HeaderProperty); return target;}
public static Style<TChild> WithHeader<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.StyleSetter(target, System.Windows.Controls.DataGridRow.HeaderProperty); return target;}
public static TChild WithHeader<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.SetValue(target, System.Windows.Controls.GridViewColumn.HeaderProperty); return target;}
public static Style<TChild> WithHeader<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.StyleSetter(target, System.Windows.Controls.GridViewColumn.HeaderProperty); return target;}
public static TChild WithHeader<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.HeaderedContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedContentControl{value?.SetValue(target, System.Windows.Controls.HeaderedContentControl.HeaderProperty); return target;}
public static Style<TChild> WithHeader<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.HeaderedContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedContentControl{value?.StyleSetter(target, System.Windows.Controls.HeaderedContentControl.HeaderProperty); return target;}
public static TChild WithHeader<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.HeaderedItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedItemsControl{value?.SetValue(target, System.Windows.Controls.HeaderedItemsControl.HeaderProperty); return target;}
public static Style<TChild> WithHeader<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.HeaderedItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedItemsControl{value?.StyleSetter(target, System.Windows.Controls.HeaderedItemsControl.HeaderProperty); return target;}

//HeaderStyleProperty
public static TChild WithHeaderStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.HeaderStyleProperty); return target;}
public static Style<TChild> WithHeaderStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.HeaderStyleProperty); return target;}
public static TChild WithHeaderStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.SetValue(target, System.Windows.Controls.DataGridRow.HeaderStyleProperty); return target;}
public static Style<TChild> WithHeaderStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.StyleSetter(target, System.Windows.Controls.DataGridRow.HeaderStyleProperty); return target;}

//HeaderStringFormatProperty
public static TChild WithHeaderStringFormat<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.HeaderStringFormatProperty); return target;}
public static Style<TChild> WithHeaderStringFormat<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.HeaderStringFormatProperty); return target;}
public static TChild WithHeaderStringFormat<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.SetValue(target, System.Windows.Controls.GridViewColumn.HeaderStringFormatProperty); return target;}
public static Style<TChild> WithHeaderStringFormat<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.StyleSetter(target, System.Windows.Controls.GridViewColumn.HeaderStringFormatProperty); return target;}
public static TChild WithHeaderStringFormat<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.HeaderedContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedContentControl{value?.SetValue(target, System.Windows.Controls.HeaderedContentControl.HeaderStringFormatProperty); return target;}
public static Style<TChild> WithHeaderStringFormat<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.HeaderedContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedContentControl{value?.StyleSetter(target, System.Windows.Controls.HeaderedContentControl.HeaderStringFormatProperty); return target;}
public static TChild WithHeaderStringFormat<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.HeaderedItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedItemsControl{value?.SetValue(target, System.Windows.Controls.HeaderedItemsControl.HeaderStringFormatProperty); return target;}
public static Style<TChild> WithHeaderStringFormat<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.HeaderedItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedItemsControl{value?.StyleSetter(target, System.Windows.Controls.HeaderedItemsControl.HeaderStringFormatProperty); return target;}

//HeaderTemplateProperty
public static TChild WithHeaderTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.HeaderTemplateProperty); return target;}
public static Style<TChild> WithHeaderTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.HeaderTemplateProperty); return target;}
public static TChild WithHeaderTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.SetValue(target, System.Windows.Controls.DataGridRow.HeaderTemplateProperty); return target;}
public static Style<TChild> WithHeaderTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.StyleSetter(target, System.Windows.Controls.DataGridRow.HeaderTemplateProperty); return target;}
public static TChild WithHeaderTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.SetValue(target, System.Windows.Controls.GridViewColumn.HeaderTemplateProperty); return target;}
public static Style<TChild> WithHeaderTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.StyleSetter(target, System.Windows.Controls.GridViewColumn.HeaderTemplateProperty); return target;}
public static TChild WithHeaderTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.HeaderedContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedContentControl{value?.SetValue(target, System.Windows.Controls.HeaderedContentControl.HeaderTemplateProperty); return target;}
public static Style<TChild> WithHeaderTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.HeaderedContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedContentControl{value?.StyleSetter(target, System.Windows.Controls.HeaderedContentControl.HeaderTemplateProperty); return target;}
public static TChild WithHeaderTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.HeaderedItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedItemsControl{value?.SetValue(target, System.Windows.Controls.HeaderedItemsControl.HeaderTemplateProperty); return target;}
public static Style<TChild> WithHeaderTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.HeaderedItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedItemsControl{value?.StyleSetter(target, System.Windows.Controls.HeaderedItemsControl.HeaderTemplateProperty); return target;}

//HeaderTemplateSelectorProperty
public static TChild WithHeaderTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.HeaderTemplateSelectorProperty); return target;}
public static Style<TChild> WithHeaderTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.HeaderTemplateSelectorProperty); return target;}
public static TChild WithHeaderTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.SetValue(target, System.Windows.Controls.DataGridRow.HeaderTemplateSelectorProperty); return target;}
public static Style<TChild> WithHeaderTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.StyleSetter(target, System.Windows.Controls.DataGridRow.HeaderTemplateSelectorProperty); return target;}
public static TChild WithHeaderTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.SetValue(target, System.Windows.Controls.GridViewColumn.HeaderTemplateSelectorProperty); return target;}
public static Style<TChild> WithHeaderTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.StyleSetter(target, System.Windows.Controls.GridViewColumn.HeaderTemplateSelectorProperty); return target;}
public static TChild WithHeaderTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.HeaderedContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedContentControl{value?.SetValue(target, System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelectorProperty); return target;}
public static Style<TChild> WithHeaderTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.HeaderedContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedContentControl{value?.StyleSetter(target, System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelectorProperty); return target;}
public static TChild WithHeaderTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.HeaderedItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedItemsControl{value?.SetValue(target, System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelectorProperty); return target;}
public static Style<TChild> WithHeaderTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.HeaderedItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedItemsControl{value?.StyleSetter(target, System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelectorProperty); return target;}

//DisplayIndexProperty
public static TChild WithDisplayIndex<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.DisplayIndexProperty); return target;}
public static Style<TChild> WithDisplayIndex<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.DisplayIndexProperty); return target;}
public static TChild WithDisplayIndex<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.DataGridColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridColumnHeader{value?.SetValue(target, System.Windows.Controls.Primitives.DataGridColumnHeader.DisplayIndexProperty); return target;}
public static Style<TChild> WithDisplayIndex<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.DataGridColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridColumnHeader{value?.StyleSetter(target, System.Windows.Controls.Primitives.DataGridColumnHeader.DisplayIndexProperty); return target;}

//SortMemberPathProperty
public static TChild WithSortMemberPath<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.SortMemberPathProperty); return target;}
public static Style<TChild> WithSortMemberPath<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.SortMemberPathProperty); return target;}

//CanUserSortProperty
public static TChild WithCanUserSort<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.CanUserSortProperty); return target;}
public static Style<TChild> WithCanUserSort<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.CanUserSortProperty); return target;}
public static TChild WithCanUserSort<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.DataGridColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridColumnHeader{value?.SetValue(target, System.Windows.Controls.Primitives.DataGridColumnHeader.CanUserSortProperty); return target;}
public static Style<TChild> WithCanUserSort<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.DataGridColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridColumnHeader{value?.StyleSetter(target, System.Windows.Controls.Primitives.DataGridColumnHeader.CanUserSortProperty); return target;}

//SortDirectionProperty
public static TChild WithSortDirection<TChild>(this TChild target, ValueProxy<System.Nullable<System.ComponentModel.ListSortDirection>>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.SortDirectionProperty); return target;}
public static Style<TChild> WithSortDirection<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.ComponentModel.ListSortDirection>>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.SortDirectionProperty); return target;}
public static TChild WithSortDirection<TChild>(this TChild target, ValueProxy<System.Nullable<System.ComponentModel.ListSortDirection>>? value, Disambigator<System.Windows.Controls.Primitives.DataGridColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridColumnHeader{value?.SetValue(target, System.Windows.Controls.Primitives.DataGridColumnHeader.SortDirectionProperty); return target;}
public static Style<TChild> WithSortDirection<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.ComponentModel.ListSortDirection>>? value, Disambigator<System.Windows.Controls.Primitives.DataGridColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridColumnHeader{value?.StyleSetter(target, System.Windows.Controls.Primitives.DataGridColumnHeader.SortDirectionProperty); return target;}

//IsAutoGeneratedProperty
public static TChild WithIsAutoGenerated<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.IsAutoGeneratedProperty); return target;}
public static Style<TChild> WithIsAutoGenerated<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.IsAutoGeneratedProperty); return target;}

//IsFrozenProperty
public static TChild WithIsFrozen<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.IsFrozenProperty); return target;}
public static Style<TChild> WithIsFrozen<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.IsFrozenProperty); return target;}
public static TChild WithIsFrozen<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.DataGridColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridColumnHeader{value?.SetValue(target, System.Windows.Controls.Primitives.DataGridColumnHeader.IsFrozenProperty); return target;}
public static Style<TChild> WithIsFrozen<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.DataGridColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridColumnHeader{value?.StyleSetter(target, System.Windows.Controls.Primitives.DataGridColumnHeader.IsFrozenProperty); return target;}

//CanUserReorderProperty
public static TChild WithCanUserReorder<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.CanUserReorderProperty); return target;}
public static Style<TChild> WithCanUserReorder<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.CanUserReorderProperty); return target;}

//CanUserResizeProperty
public static TChild WithCanUserResize<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.SetValue(target, System.Windows.Controls.DataGridColumn.CanUserResizeProperty); return target;}
public static Style<TChild> WithCanUserResize<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridColumn.CanUserResizeProperty); return target;}

//ItemsSourceProperty
public static TChild WithItemsSource<TChild>(this TChild target, ValueProxy<System.Collections.IEnumerable>? value, Disambigator<System.Windows.Controls.DataGridComboBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridComboBoxColumn{value?.SetValue(target, System.Windows.Controls.DataGridComboBoxColumn.ItemsSourceProperty); return target;}
public static Style<TChild> WithItemsSource<TChild>(this Style<TChild> target, ValueProxy<System.Collections.IEnumerable>? value, Disambigator<System.Windows.Controls.DataGridComboBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridComboBoxColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridComboBoxColumn.ItemsSourceProperty); return target;}
public static TChild WithItemsSource<TChild>(this TChild target, ValueProxy<System.Collections.IEnumerable>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.ItemsSourceProperty); return target;}
public static Style<TChild> WithItemsSource<TChild>(this Style<TChild> target, ValueProxy<System.Collections.IEnumerable>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.ItemsSourceProperty); return target;}

//DisplayMemberPathProperty
public static TChild WithDisplayMemberPath<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.DataGridComboBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridComboBoxColumn{value?.SetValue(target, System.Windows.Controls.DataGridComboBoxColumn.DisplayMemberPathProperty); return target;}
public static Style<TChild> WithDisplayMemberPath<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.DataGridComboBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridComboBoxColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridComboBoxColumn.DisplayMemberPathProperty); return target;}
public static TChild WithDisplayMemberPath<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.DisplayMemberPathProperty); return target;}
public static Style<TChild> WithDisplayMemberPath<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.DisplayMemberPathProperty); return target;}

//SelectedValuePathProperty
public static TChild WithSelectedValuePath<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.DataGridComboBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridComboBoxColumn{value?.SetValue(target, System.Windows.Controls.DataGridComboBoxColumn.SelectedValuePathProperty); return target;}
public static Style<TChild> WithSelectedValuePath<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.DataGridComboBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridComboBoxColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridComboBoxColumn.SelectedValuePathProperty); return target;}
public static TChild WithSelectedValuePath<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.TreeView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TreeView{value?.SetValue(target, System.Windows.Controls.TreeView.SelectedValuePathProperty); return target;}
public static Style<TChild> WithSelectedValuePath<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.TreeView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TreeView{value?.StyleSetter(target, System.Windows.Controls.TreeView.SelectedValuePathProperty); return target;}
public static TChild WithSelectedValuePath<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.Primitives.Selector, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Selector{value?.SetValue(target, System.Windows.Controls.Primitives.Selector.SelectedValuePathProperty); return target;}
public static Style<TChild> WithSelectedValuePath<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.Primitives.Selector, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Selector{value?.StyleSetter(target, System.Windows.Controls.Primitives.Selector.SelectedValuePathProperty); return target;}

//ItemProperty
public static TChild WithItem<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.SetValue(target, System.Windows.Controls.DataGridRow.ItemProperty); return target;}
public static Style<TChild> WithItem<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.StyleSetter(target, System.Windows.Controls.DataGridRow.ItemProperty); return target;}

//ItemsPanelProperty
public static TChild WithItemsPanel<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ItemsPanelTemplate>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.SetValue(target, System.Windows.Controls.DataGridRow.ItemsPanelProperty); return target;}
public static Style<TChild> WithItemsPanel<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ItemsPanelTemplate>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.StyleSetter(target, System.Windows.Controls.DataGridRow.ItemsPanelProperty); return target;}
public static TChild WithItemsPanel<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ItemsPanelTemplate>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.ItemsPanelProperty); return target;}
public static Style<TChild> WithItemsPanel<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ItemsPanelTemplate>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.ItemsPanelProperty); return target;}

//ValidationErrorTemplateProperty
public static TChild WithValidationErrorTemplate<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ControlTemplate>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.SetValue(target, System.Windows.Controls.DataGridRow.ValidationErrorTemplateProperty); return target;}
public static Style<TChild> WithValidationErrorTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ControlTemplate>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.StyleSetter(target, System.Windows.Controls.DataGridRow.ValidationErrorTemplateProperty); return target;}

//DetailsTemplateProperty
public static TChild WithDetailsTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.SetValue(target, System.Windows.Controls.DataGridRow.DetailsTemplateProperty); return target;}
public static Style<TChild> WithDetailsTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.StyleSetter(target, System.Windows.Controls.DataGridRow.DetailsTemplateProperty); return target;}

//DetailsTemplateSelectorProperty
public static TChild WithDetailsTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.SetValue(target, System.Windows.Controls.DataGridRow.DetailsTemplateSelectorProperty); return target;}
public static Style<TChild> WithDetailsTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.StyleSetter(target, System.Windows.Controls.DataGridRow.DetailsTemplateSelectorProperty); return target;}

//DetailsVisibilityProperty
public static TChild WithDetailsVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.SetValue(target, System.Windows.Controls.DataGridRow.DetailsVisibilityProperty); return target;}
public static Style<TChild> WithDetailsVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.StyleSetter(target, System.Windows.Controls.DataGridRow.DetailsVisibilityProperty); return target;}

//AlternationIndexProperty
public static TChild WithAlternationIndex<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.SetValue(target, System.Windows.Controls.DataGridRow.AlternationIndexProperty); return target;}
public static Style<TChild> WithAlternationIndex<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.StyleSetter(target, System.Windows.Controls.DataGridRow.AlternationIndexProperty); return target;}

//IsNewItemProperty
public static TChild WithIsNewItem<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.SetValue(target, System.Windows.Controls.DataGridRow.IsNewItemProperty); return target;}
public static Style<TChild> WithIsNewItem<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DataGridRow, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRow{value?.StyleSetter(target, System.Windows.Controls.DataGridRow.IsNewItemProperty); return target;}

//CellTemplateProperty
public static TChild WithCellTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.DataGridTemplateColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTemplateColumn{value?.SetValue(target, System.Windows.Controls.DataGridTemplateColumn.CellTemplateProperty); return target;}
public static Style<TChild> WithCellTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.DataGridTemplateColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTemplateColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridTemplateColumn.CellTemplateProperty); return target;}
public static TChild WithCellTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.SetValue(target, System.Windows.Controls.GridViewColumn.CellTemplateProperty); return target;}
public static Style<TChild> WithCellTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.StyleSetter(target, System.Windows.Controls.GridViewColumn.CellTemplateProperty); return target;}

//CellTemplateSelectorProperty
public static TChild WithCellTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.DataGridTemplateColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTemplateColumn{value?.SetValue(target, System.Windows.Controls.DataGridTemplateColumn.CellTemplateSelectorProperty); return target;}
public static Style<TChild> WithCellTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.DataGridTemplateColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTemplateColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridTemplateColumn.CellTemplateSelectorProperty); return target;}
public static TChild WithCellTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.SetValue(target, System.Windows.Controls.GridViewColumn.CellTemplateSelectorProperty); return target;}
public static Style<TChild> WithCellTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.StyleSetter(target, System.Windows.Controls.GridViewColumn.CellTemplateSelectorProperty); return target;}

//CellEditingTemplateProperty
public static TChild WithCellEditingTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.DataGridTemplateColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTemplateColumn{value?.SetValue(target, System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplateProperty); return target;}
public static Style<TChild> WithCellEditingTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.DataGridTemplateColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTemplateColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplateProperty); return target;}

//CellEditingTemplateSelectorProperty
public static TChild WithCellEditingTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.DataGridTemplateColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTemplateColumn{value?.SetValue(target, System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplateSelectorProperty); return target;}
public static Style<TChild> WithCellEditingTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.DataGridTemplateColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridTemplateColumn{value?.StyleSetter(target, System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplateSelectorProperty); return target;}

//CalendarStyleProperty
public static TChild WithCalendarStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.SetValue(target, System.Windows.Controls.DatePicker.CalendarStyleProperty); return target;}
public static Style<TChild> WithCalendarStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.StyleSetter(target, System.Windows.Controls.DatePicker.CalendarStyleProperty); return target;}

//SelectedDateFormatProperty
public static TChild WithSelectedDateFormat<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DatePickerFormat>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.SetValue(target, System.Windows.Controls.DatePicker.SelectedDateFormatProperty); return target;}
public static Style<TChild> WithSelectedDateFormat<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DatePickerFormat>? value, Disambigator<System.Windows.Controls.DatePicker, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePicker{value?.StyleSetter(target, System.Windows.Controls.DatePicker.SelectedDateFormatProperty); return target;}

//SharedSizeGroupProperty
public static TChild WithSharedSizeGroup<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.DefinitionBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DefinitionBase{value?.SetValue(target, System.Windows.Controls.DefinitionBase.SharedSizeGroupProperty); return target;}
public static Style<TChild> WithSharedSizeGroup<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.DefinitionBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DefinitionBase{value?.StyleSetter(target, System.Windows.Controls.DefinitionBase.SharedSizeGroupProperty); return target;}

//LastChildFillProperty
public static TChild WithLastChildFill<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DockPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DockPanel{value?.SetValue(target, System.Windows.Controls.DockPanel.LastChildFillProperty); return target;}
public static Style<TChild> WithLastChildFill<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DockPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DockPanel{value?.StyleSetter(target, System.Windows.Controls.DockPanel.LastChildFillProperty); return target;}

//DockProperty
public static TChild WithDockPanel_Dock<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Dock>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.DockPanel.DockProperty); return target;}
public static Style<TChild> WithDockPanel_Dock<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Dock>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.DockPanel.DockProperty); return target;}

//ExtentWidthProperty
public static TChild WithExtentWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.ExtentWidthProperty); return target;}
public static Style<TChild> WithExtentWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.ExtentWidthProperty); return target;}
public static TChild WithExtentWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.ExtentWidthProperty); return target;}
public static Style<TChild> WithExtentWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.ExtentWidthProperty); return target;}

//ExtentHeightProperty
public static TChild WithExtentHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.ExtentHeightProperty); return target;}
public static Style<TChild> WithExtentHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.ExtentHeightProperty); return target;}
public static TChild WithExtentHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.ExtentHeightProperty); return target;}
public static Style<TChild> WithExtentHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.ExtentHeightProperty); return target;}

//ViewportWidthProperty
public static TChild WithViewportWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.ViewportWidthProperty); return target;}
public static Style<TChild> WithViewportWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.ViewportWidthProperty); return target;}
public static TChild WithViewportWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.ViewportWidthProperty); return target;}
public static Style<TChild> WithViewportWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.ViewportWidthProperty); return target;}

//ViewportHeightProperty
public static TChild WithViewportHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.ViewportHeightProperty); return target;}
public static Style<TChild> WithViewportHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.ViewportHeightProperty); return target;}
public static TChild WithViewportHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.ViewportHeightProperty); return target;}
public static Style<TChild> WithViewportHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.ViewportHeightProperty); return target;}

//ShowPageBordersProperty
public static TChild WithShowPageBorders<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.ShowPageBordersProperty); return target;}
public static Style<TChild> WithShowPageBorders<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.ShowPageBordersProperty); return target;}

//ZoomProperty
public static TChild WithZoom<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.ZoomProperty); return target;}
public static Style<TChild> WithZoom<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.ZoomProperty); return target;}
public static TChild WithZoom<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.ZoomProperty); return target;}
public static Style<TChild> WithZoom<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.ZoomProperty); return target;}
public static TChild WithZoom<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.ZoomProperty); return target;}
public static Style<TChild> WithZoom<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.ZoomProperty); return target;}
public static TChild WithZoom<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentPageViewer.ZoomProperty); return target;}
public static Style<TChild> WithZoom<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentPageViewer.ZoomProperty); return target;}

//MaxPagesAcrossProperty
public static TChild WithMaxPagesAcross<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.MaxPagesAcrossProperty); return target;}
public static Style<TChild> WithMaxPagesAcross<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.MaxPagesAcrossProperty); return target;}

//VerticalPageSpacingProperty
public static TChild WithVerticalPageSpacing<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.VerticalPageSpacingProperty); return target;}
public static Style<TChild> WithVerticalPageSpacing<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.VerticalPageSpacingProperty); return target;}

//HorizontalPageSpacingProperty
public static TChild WithHorizontalPageSpacing<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.HorizontalPageSpacingProperty); return target;}
public static Style<TChild> WithHorizontalPageSpacing<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.HorizontalPageSpacingProperty); return target;}

//CanMoveUpProperty
public static TChild WithCanMoveUp<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.CanMoveUpProperty); return target;}
public static Style<TChild> WithCanMoveUp<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.CanMoveUpProperty); return target;}

//CanMoveDownProperty
public static TChild WithCanMoveDown<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.CanMoveDownProperty); return target;}
public static Style<TChild> WithCanMoveDown<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.CanMoveDownProperty); return target;}

//CanMoveLeftProperty
public static TChild WithCanMoveLeft<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.CanMoveLeftProperty); return target;}
public static Style<TChild> WithCanMoveLeft<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.CanMoveLeftProperty); return target;}

//CanMoveRightProperty
public static TChild WithCanMoveRight<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.CanMoveRightProperty); return target;}
public static Style<TChild> WithCanMoveRight<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.CanMoveRightProperty); return target;}

//CanIncreaseZoomProperty
public static TChild WithCanIncreaseZoom<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.CanIncreaseZoomProperty); return target;}
public static Style<TChild> WithCanIncreaseZoom<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.CanIncreaseZoomProperty); return target;}
public static TChild WithCanIncreaseZoom<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.CanIncreaseZoomProperty); return target;}
public static Style<TChild> WithCanIncreaseZoom<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.CanIncreaseZoomProperty); return target;}
public static TChild WithCanIncreaseZoom<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.CanIncreaseZoomProperty); return target;}
public static Style<TChild> WithCanIncreaseZoom<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.CanIncreaseZoomProperty); return target;}
public static TChild WithCanIncreaseZoom<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentPageViewer.CanIncreaseZoomProperty); return target;}
public static Style<TChild> WithCanIncreaseZoom<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentPageViewer.CanIncreaseZoomProperty); return target;}

//CanDecreaseZoomProperty
public static TChild WithCanDecreaseZoom<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.SetValue(target, System.Windows.Controls.DocumentViewer.CanDecreaseZoomProperty); return target;}
public static Style<TChild> WithCanDecreaseZoom<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.DocumentViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DocumentViewer{value?.StyleSetter(target, System.Windows.Controls.DocumentViewer.CanDecreaseZoomProperty); return target;}

public static TChild WithCanDecreaseZoom<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.CanDecreaseZoomProperty); return target;}
public static Style<TChild> WithCanDecreaseZoom<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.CanDecreaseZoomProperty); return target;}
public static TChild WithCanDecreaseZoom<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.CanDecreaseZoomProperty); return target;}
public static Style<TChild> WithCanDecreaseZoom<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.CanDecreaseZoomProperty); return target;}
public static TChild WithCanDecreaseZoom<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentPageViewer.CanDecreaseZoomProperty); return target;}
public static Style<TChild> WithCanDecreaseZoom<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentPageViewer.CanDecreaseZoomProperty); return target;}

//ExpandDirectionProperty
public static TChild WithExpandDirection<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ExpandDirection>? value, Disambigator<System.Windows.Controls.Expander, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Expander{value?.SetValue(target, System.Windows.Controls.Expander.ExpandDirectionProperty); return target;}
public static Style<TChild> WithExpandDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ExpandDirection>? value, Disambigator<System.Windows.Controls.Expander, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Expander{value?.StyleSetter(target, System.Windows.Controls.Expander.ExpandDirectionProperty); return target;}

//ViewingModeProperty
public static TChild WithViewingMode<TChild>(this TChild target, ValueProxy<System.Windows.Controls.FlowDocumentReaderViewingMode>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.ViewingModeProperty); return target;}
public static Style<TChild> WithViewingMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.FlowDocumentReaderViewingMode>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.ViewingModeProperty); return target;}

//IsPageViewEnabledProperty
public static TChild WithIsPageViewEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.IsPageViewEnabledProperty); return target;}
public static Style<TChild> WithIsPageViewEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.IsPageViewEnabledProperty); return target;}

//IsTwoPageViewEnabledProperty
public static TChild WithIsTwoPageViewEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.IsTwoPageViewEnabledProperty); return target;}
public static Style<TChild> WithIsTwoPageViewEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.IsTwoPageViewEnabledProperty); return target;}

//IsScrollViewEnabledProperty
public static TChild WithIsScrollViewEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.IsScrollViewEnabledProperty); return target;}
public static Style<TChild> WithIsScrollViewEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.IsScrollViewEnabledProperty); return target;}

//PageCountProperty
public static TChild WithPageCount<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.PageCountProperty); return target;}
public static Style<TChild> WithPageCount<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.PageCountProperty); return target;}
public static TChild WithPageCount<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.DocumentViewerBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentViewerBase{value?.SetValue(target, System.Windows.Controls.Primitives.DocumentViewerBase.PageCountProperty); return target;}
public static Style<TChild> WithPageCount<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.DocumentViewerBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentViewerBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.DocumentViewerBase.PageCountProperty); return target;}

//PageNumberProperty
public static TChild WithPageNumber<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.PageNumberProperty); return target;}
public static Style<TChild> WithPageNumber<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.PageNumberProperty); return target;}
public static TChild WithPageNumber<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.DocumentPageView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentPageView{value?.SetValue(target, System.Windows.Controls.Primitives.DocumentPageView.PageNumberProperty); return target;}
public static Style<TChild> WithPageNumber<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.DocumentPageView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentPageView{value?.StyleSetter(target, System.Windows.Controls.Primitives.DocumentPageView.PageNumberProperty); return target;}

//CanGoToPreviousPageProperty
public static TChild WithCanGoToPreviousPage<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.CanGoToPreviousPageProperty); return target;}
public static Style<TChild> WithCanGoToPreviousPage<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.CanGoToPreviousPageProperty); return target;}
public static TChild WithCanGoToPreviousPage<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.DocumentViewerBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentViewerBase{value?.SetValue(target, System.Windows.Controls.Primitives.DocumentViewerBase.CanGoToPreviousPageProperty); return target;}
public static Style<TChild> WithCanGoToPreviousPage<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.DocumentViewerBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentViewerBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.DocumentViewerBase.CanGoToPreviousPageProperty); return target;}

//CanGoToNextPageProperty
public static TChild WithCanGoToNextPage<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.CanGoToNextPageProperty); return target;}
public static Style<TChild> WithCanGoToNextPage<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.CanGoToNextPageProperty); return target;}
public static TChild WithCanGoToNextPage<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.DocumentViewerBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentViewerBase{value?.SetValue(target, System.Windows.Controls.Primitives.DocumentViewerBase.CanGoToNextPageProperty); return target;}
public static Style<TChild> WithCanGoToNextPage<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.DocumentViewerBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentViewerBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.DocumentViewerBase.CanGoToNextPageProperty); return target;}

//IsFindEnabledProperty
public static TChild WithIsFindEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.IsFindEnabledProperty); return target;}
public static Style<TChild> WithIsFindEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.IsFindEnabledProperty); return target;}

//IsPrintEnabledProperty
public static TChild WithIsPrintEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.IsPrintEnabledProperty); return target;}
public static Style<TChild> WithIsPrintEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.IsPrintEnabledProperty); return target;}

//DocumentProperty
public static TChild WithDocument<TChild>(this TChild target, ValueProxy<System.Windows.Documents.FlowDocument>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.DocumentProperty); return target;}
public static Style<TChild> WithDocument<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Documents.FlowDocument>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.DocumentProperty); return target;}
public static TChild WithDocument<TChild>(this TChild target, ValueProxy<System.Windows.Documents.FlowDocument>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.DocumentProperty); return target;}
public static Style<TChild> WithDocument<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Documents.FlowDocument>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.DocumentProperty); return target;}
public static TChild WithDocument<TChild>(this TChild target, ValueProxy<System.Windows.Documents.IDocumentPaginatorSource>? value, Disambigator<System.Windows.Controls.Primitives.DocumentViewerBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentViewerBase{value?.SetValue(target, System.Windows.Controls.Primitives.DocumentViewerBase.DocumentProperty); return target;}
public static Style<TChild> WithDocument<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Documents.IDocumentPaginatorSource>? value, Disambigator<System.Windows.Controls.Primitives.DocumentViewerBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentViewerBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.DocumentViewerBase.DocumentProperty); return target;}

//MaxZoomProperty
public static TChild WithMaxZoom<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.MaxZoomProperty); return target;}
public static Style<TChild> WithMaxZoom<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.MaxZoomProperty); return target;}
public static TChild WithMaxZoom<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.MaxZoomProperty); return target;}
public static Style<TChild> WithMaxZoom<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.MaxZoomProperty); return target;}
public static TChild WithMaxZoom<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentPageViewer.MaxZoomProperty); return target;}
public static Style<TChild> WithMaxZoom<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentPageViewer.MaxZoomProperty); return target;}

//MinZoomProperty
public static TChild WithMinZoom<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.MinZoomProperty); return target;}
public static Style<TChild> WithMinZoom<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.MinZoomProperty); return target;}
public static TChild WithMinZoom<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.MinZoomProperty); return target;}
public static Style<TChild> WithMinZoom<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.MinZoomProperty); return target;}
public static TChild WithMinZoom<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentPageViewer.MinZoomProperty); return target;}
public static Style<TChild> WithMinZoom<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentPageViewer.MinZoomProperty); return target;}

//ZoomIncrementProperty
public static TChild WithZoomIncrement<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.ZoomIncrementProperty); return target;}
public static Style<TChild> WithZoomIncrement<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.ZoomIncrementProperty); return target;}
public static TChild WithZoomIncrement<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.ZoomIncrementProperty); return target;}
public static Style<TChild> WithZoomIncrement<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.ZoomIncrementProperty); return target;}
public static TChild WithZoomIncrement<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentPageViewer.ZoomIncrementProperty); return target;}
public static Style<TChild> WithZoomIncrement<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentPageViewer.ZoomIncrementProperty); return target;}

//SelectionBrushProperty
public static TChild WithSelectionBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.SelectionBrushProperty); return target;}
public static Style<TChild> WithSelectionBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.SelectionBrushProperty); return target;}
public static TChild WithSelectionBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.SelectionBrushProperty); return target;}
public static Style<TChild> WithSelectionBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.SelectionBrushProperty); return target;}
public static System.Windows.Controls.PasswordBox WithSelectionBrush(this System.Windows.Controls.PasswordBox target, ValueProxy<System.Windows.Media.Brush>? value) {value?.SetValue(target, System.Windows.Controls.PasswordBox.SelectionBrushProperty); return target;}
public static Style<System.Windows.Controls.PasswordBox> WithSelectionBrush(this Style<System.Windows.Controls.PasswordBox> target, ValueProxy<System.Windows.Media.Brush>? value) {value?.StyleSetter(target, System.Windows.Controls.PasswordBox.SelectionBrushProperty); return target;}
public static TChild WithSelectionBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentPageViewer.SelectionBrushProperty); return target;}
public static Style<TChild> WithSelectionBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentPageViewer.SelectionBrushProperty); return target;}
public static TChild WithSelectionBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.SelectionBrushProperty); return target;}
public static Style<TChild> WithSelectionBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.SelectionBrushProperty); return target;}

//SelectionOpacityProperty
public static TChild WithSelectionOpacity<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.SelectionOpacityProperty); return target;}
public static Style<TChild> WithSelectionOpacity<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.SelectionOpacityProperty); return target;}
public static TChild WithSelectionOpacity<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.SelectionOpacityProperty); return target;}
public static Style<TChild> WithSelectionOpacity<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.SelectionOpacityProperty); return target;}
public static System.Windows.Controls.PasswordBox WithSelectionOpacity(this System.Windows.Controls.PasswordBox target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Controls.PasswordBox.SelectionOpacityProperty); return target;}
public static Style<System.Windows.Controls.PasswordBox> WithSelectionOpacity(this Style<System.Windows.Controls.PasswordBox> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Controls.PasswordBox.SelectionOpacityProperty); return target;}
public static TChild WithSelectionOpacity<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentPageViewer.SelectionOpacityProperty); return target;}
public static Style<TChild> WithSelectionOpacity<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentPageViewer.SelectionOpacityProperty); return target;}
public static TChild WithSelectionOpacity<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.SelectionOpacityProperty); return target;}
public static Style<TChild> WithSelectionOpacity<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.SelectionOpacityProperty); return target;}

//IsSelectionActiveProperty
public static TChild WithIsSelectionActive<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.IsSelectionActiveProperty); return target;}
public static Style<TChild> WithIsSelectionActive<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.IsSelectionActiveProperty); return target;}
public static TChild WithIsSelectionActive<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.IsSelectionActiveProperty); return target;}
public static Style<TChild> WithIsSelectionActive<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.IsSelectionActiveProperty); return target;}
public static System.Windows.Controls.PasswordBox WithIsSelectionActive(this System.Windows.Controls.PasswordBox target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Controls.PasswordBox.IsSelectionActiveProperty); return target;}
public static Style<System.Windows.Controls.PasswordBox> WithIsSelectionActive(this Style<System.Windows.Controls.PasswordBox> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Controls.PasswordBox.IsSelectionActiveProperty); return target;}
public static TChild WithIsSelectionActive<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentPageViewer.IsSelectionActiveProperty); return target;}
public static Style<TChild> WithIsSelectionActive<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentPageViewer.IsSelectionActiveProperty); return target;}
public static TChild WithIsSelectionActive<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.TreeViewItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TreeViewItem{value?.SetValue(target, System.Windows.Controls.TreeViewItem.IsSelectionActiveProperty); return target;}
public static Style<TChild> WithIsSelectionActive<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.TreeViewItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TreeViewItem{value?.StyleSetter(target, System.Windows.Controls.TreeViewItem.IsSelectionActiveProperty); return target;}
public static TChild WithIsSelectionActive<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.IsSelectionActiveProperty); return target;}
public static Style<TChild> WithIsSelectionActive<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.IsSelectionActiveProperty); return target;}

//IsInactiveSelectionHighlightEnabledProperty
public static TChild WithIsInactiveSelectionHighlightEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.SetValue(target, System.Windows.Controls.FlowDocumentReader.IsInactiveSelectionHighlightEnabledProperty); return target;}
public static Style<TChild> WithIsInactiveSelectionHighlightEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentReader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentReader{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentReader.IsInactiveSelectionHighlightEnabledProperty); return target;}
public static TChild WithIsInactiveSelectionHighlightEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.IsInactiveSelectionHighlightEnabledProperty); return target;}
public static Style<TChild> WithIsInactiveSelectionHighlightEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.IsInactiveSelectionHighlightEnabledProperty); return target;}
public static System.Windows.Controls.PasswordBox WithIsInactiveSelectionHighlightEnabled(this System.Windows.Controls.PasswordBox target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Controls.PasswordBox.IsInactiveSelectionHighlightEnabledProperty); return target;}
public static Style<System.Windows.Controls.PasswordBox> WithIsInactiveSelectionHighlightEnabled(this Style<System.Windows.Controls.PasswordBox> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Controls.PasswordBox.IsInactiveSelectionHighlightEnabledProperty); return target;}
public static TChild WithIsInactiveSelectionHighlightEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentPageViewer.IsInactiveSelectionHighlightEnabledProperty); return target;}
public static Style<TChild> WithIsInactiveSelectionHighlightEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentPageViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentPageViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentPageViewer.IsInactiveSelectionHighlightEnabledProperty); return target;}
public static TChild WithIsInactiveSelectionHighlightEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.IsInactiveSelectionHighlightEnabledProperty); return target;}
public static Style<TChild> WithIsInactiveSelectionHighlightEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.IsInactiveSelectionHighlightEnabledProperty); return target;}

//IsSelectionEnabledProperty
public static TChild WithIsSelectionEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.IsSelectionEnabledProperty); return target;}
public static Style<TChild> WithIsSelectionEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.IsSelectionEnabledProperty); return target;}

//IsToolBarVisibleProperty
public static TChild WithIsToolBarVisible<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.SetValue(target, System.Windows.Controls.FlowDocumentScrollViewer.IsToolBarVisibleProperty); return target;}
public static Style<TChild> WithIsToolBarVisible<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.FlowDocumentScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.FlowDocumentScrollViewer{value?.StyleSetter(target, System.Windows.Controls.FlowDocumentScrollViewer.IsToolBarVisibleProperty); return target;}

//NavigationUIVisibilityProperty
public static TChild WithNavigationUIVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Navigation.NavigationUIVisibility>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.SetValue(target, System.Windows.Controls.Frame.NavigationUIVisibilityProperty); return target;}
public static Style<TChild> WithNavigationUIVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Navigation.NavigationUIVisibility>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.StyleSetter(target, System.Windows.Controls.Frame.NavigationUIVisibilityProperty); return target;}

//JournalOwnershipProperty
public static TChild WithJournalOwnership<TChild>(this TChild target, ValueProxy<System.Windows.Navigation.JournalOwnership>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.SetValue(target, System.Windows.Controls.Frame.JournalOwnershipProperty); return target;}
public static Style<TChild> WithJournalOwnership<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Navigation.JournalOwnership>? value, Disambigator<System.Windows.Controls.Frame, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Frame{value?.StyleSetter(target, System.Windows.Controls.Frame.JournalOwnershipProperty); return target;}

//ShowGridLinesProperty
public static TChild WithShowGridLines<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Grid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Grid{value?.SetValue(target, System.Windows.Controls.Grid.ShowGridLinesProperty); return target;}
public static Style<TChild> WithShowGridLines<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Grid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Grid{value?.StyleSetter(target, System.Windows.Controls.Grid.ShowGridLinesProperty); return target;}

//RowProperty
public static TChild WithGrid_Row<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.Grid.RowProperty); return target;}
public static Style<TChild> WithGrid_Row<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.Grid.RowProperty); return target;}

//IsSharedSizeScopeProperty
public static TChild WithGrid_IsSharedSizeScope<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.Grid.IsSharedSizeScopeProperty); return target;}
public static Style<TChild> WithGrid_IsSharedSizeScope<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.Grid.IsSharedSizeScopeProperty); return target;}

//ResizeDirectionProperty
public static TChild WithResizeDirection<TChild>(this TChild target, ValueProxy<System.Windows.Controls.GridResizeDirection>? value, Disambigator<System.Windows.Controls.GridSplitter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridSplitter{value?.SetValue(target, System.Windows.Controls.GridSplitter.ResizeDirectionProperty); return target;}
public static Style<TChild> WithResizeDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.GridResizeDirection>? value, Disambigator<System.Windows.Controls.GridSplitter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridSplitter{value?.StyleSetter(target, System.Windows.Controls.GridSplitter.ResizeDirectionProperty); return target;}

//ResizeBehaviorProperty
public static TChild WithResizeBehavior<TChild>(this TChild target, ValueProxy<System.Windows.Controls.GridResizeBehavior>? value, Disambigator<System.Windows.Controls.GridSplitter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridSplitter{value?.SetValue(target, System.Windows.Controls.GridSplitter.ResizeBehaviorProperty); return target;}
public static Style<TChild> WithResizeBehavior<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.GridResizeBehavior>? value, Disambigator<System.Windows.Controls.GridSplitter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridSplitter{value?.StyleSetter(target, System.Windows.Controls.GridSplitter.ResizeBehaviorProperty); return target;}

//ShowsPreviewProperty
public static TChild WithShowsPreview<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.GridSplitter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridSplitter{value?.SetValue(target, System.Windows.Controls.GridSplitter.ShowsPreviewProperty); return target;}
public static Style<TChild> WithShowsPreview<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.GridSplitter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridSplitter{value?.StyleSetter(target, System.Windows.Controls.GridSplitter.ShowsPreviewProperty); return target;}

//PreviewStyleProperty
public static TChild WithPreviewStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.GridSplitter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridSplitter{value?.SetValue(target, System.Windows.Controls.GridSplitter.PreviewStyleProperty); return target;}
public static Style<TChild> WithPreviewStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.GridSplitter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridSplitter{value?.StyleSetter(target, System.Windows.Controls.GridSplitter.PreviewStyleProperty); return target;}

//KeyboardIncrementProperty
public static TChild WithKeyboardIncrement<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.GridSplitter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridSplitter{value?.SetValue(target, System.Windows.Controls.GridSplitter.KeyboardIncrementProperty); return target;}
public static Style<TChild> WithKeyboardIncrement<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.GridSplitter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridSplitter{value?.StyleSetter(target, System.Windows.Controls.GridSplitter.KeyboardIncrementProperty); return target;}

//DragIncrementProperty
public static TChild WithDragIncrement<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.GridSplitter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridSplitter{value?.SetValue(target, System.Windows.Controls.GridSplitter.DragIncrementProperty); return target;}
public static Style<TChild> WithDragIncrement<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.GridSplitter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridSplitter{value?.StyleSetter(target, System.Windows.Controls.GridSplitter.DragIncrementProperty); return target;}

//ColumnCollectionProperty
public static TChild WithGridView_ColumnCollection<TChild>(this TChild target, ValueProxy<System.Windows.Controls.GridViewColumnCollection>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.GridView.ColumnCollectionProperty); return target;}
public static Style<TChild> WithGridView_ColumnCollection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.GridViewColumnCollection>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.GridView.ColumnCollectionProperty); return target;}

//ColumnHeaderContainerStyleProperty
public static TChild WithColumnHeaderContainerStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.GridView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridView{value?.SetValue(target, System.Windows.Controls.GridView.ColumnHeaderContainerStyleProperty); return target;}
public static Style<TChild> WithColumnHeaderContainerStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.GridView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridView{value?.StyleSetter(target, System.Windows.Controls.GridView.ColumnHeaderContainerStyleProperty); return target;}
public static TChild WithColumnHeaderContainerStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.GridViewHeaderRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewHeaderRowPresenter{value?.SetValue(target, System.Windows.Controls.GridViewHeaderRowPresenter.ColumnHeaderContainerStyleProperty); return target;}
public static Style<TChild> WithColumnHeaderContainerStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.GridViewHeaderRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewHeaderRowPresenter{value?.StyleSetter(target, System.Windows.Controls.GridViewHeaderRowPresenter.ColumnHeaderContainerStyleProperty); return target;}

//ColumnHeaderTemplateProperty
public static TChild WithColumnHeaderTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.GridView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridView{value?.SetValue(target, System.Windows.Controls.GridView.ColumnHeaderTemplateProperty); return target;}
public static Style<TChild> WithColumnHeaderTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.GridView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridView{value?.StyleSetter(target, System.Windows.Controls.GridView.ColumnHeaderTemplateProperty); return target;}
public static TChild WithColumnHeaderTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.GridViewHeaderRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewHeaderRowPresenter{value?.SetValue(target, System.Windows.Controls.GridViewHeaderRowPresenter.ColumnHeaderTemplateProperty); return target;}
public static Style<TChild> WithColumnHeaderTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.GridViewHeaderRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewHeaderRowPresenter{value?.StyleSetter(target, System.Windows.Controls.GridViewHeaderRowPresenter.ColumnHeaderTemplateProperty); return target;}

//ColumnHeaderTemplateSelectorProperty
public static TChild WithColumnHeaderTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.GridView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridView{value?.SetValue(target, System.Windows.Controls.GridView.ColumnHeaderTemplateSelectorProperty); return target;}
public static Style<TChild> WithColumnHeaderTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.GridView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridView{value?.StyleSetter(target, System.Windows.Controls.GridView.ColumnHeaderTemplateSelectorProperty); return target;}
public static TChild WithColumnHeaderTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.GridViewHeaderRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewHeaderRowPresenter{value?.SetValue(target, System.Windows.Controls.GridViewHeaderRowPresenter.ColumnHeaderTemplateSelectorProperty); return target;}
public static Style<TChild> WithColumnHeaderTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.GridViewHeaderRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewHeaderRowPresenter{value?.StyleSetter(target, System.Windows.Controls.GridViewHeaderRowPresenter.ColumnHeaderTemplateSelectorProperty); return target;}

//ColumnHeaderStringFormatProperty
public static TChild WithColumnHeaderStringFormat<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.GridView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridView{value?.SetValue(target, System.Windows.Controls.GridView.ColumnHeaderStringFormatProperty); return target;}
public static Style<TChild> WithColumnHeaderStringFormat<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.GridView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridView{value?.StyleSetter(target, System.Windows.Controls.GridView.ColumnHeaderStringFormatProperty); return target;}
public static TChild WithColumnHeaderStringFormat<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.GridViewHeaderRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewHeaderRowPresenter{value?.SetValue(target, System.Windows.Controls.GridViewHeaderRowPresenter.ColumnHeaderStringFormatProperty); return target;}
public static Style<TChild> WithColumnHeaderStringFormat<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.GridViewHeaderRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewHeaderRowPresenter{value?.StyleSetter(target, System.Windows.Controls.GridViewHeaderRowPresenter.ColumnHeaderStringFormatProperty); return target;}

//AllowsColumnReorderProperty
public static TChild WithAllowsColumnReorder<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.GridView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridView{value?.SetValue(target, System.Windows.Controls.GridView.AllowsColumnReorderProperty); return target;}
public static Style<TChild> WithAllowsColumnReorder<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.GridView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridView{value?.StyleSetter(target, System.Windows.Controls.GridView.AllowsColumnReorderProperty); return target;}
public static TChild WithAllowsColumnReorder<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.GridViewHeaderRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewHeaderRowPresenter{value?.SetValue(target, System.Windows.Controls.GridViewHeaderRowPresenter.AllowsColumnReorderProperty); return target;}
public static Style<TChild> WithAllowsColumnReorder<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.GridViewHeaderRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewHeaderRowPresenter{value?.StyleSetter(target, System.Windows.Controls.GridViewHeaderRowPresenter.AllowsColumnReorderProperty); return target;}

//ColumnHeaderContextMenuProperty
public static TChild WithColumnHeaderContextMenu<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ContextMenu>? value, Disambigator<System.Windows.Controls.GridView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridView{value?.SetValue(target, System.Windows.Controls.GridView.ColumnHeaderContextMenuProperty); return target;}
public static Style<TChild> WithColumnHeaderContextMenu<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ContextMenu>? value, Disambigator<System.Windows.Controls.GridView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridView{value?.StyleSetter(target, System.Windows.Controls.GridView.ColumnHeaderContextMenuProperty); return target;}
public static TChild WithColumnHeaderContextMenu<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ContextMenu>? value, Disambigator<System.Windows.Controls.GridViewHeaderRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewHeaderRowPresenter{value?.SetValue(target, System.Windows.Controls.GridViewHeaderRowPresenter.ColumnHeaderContextMenuProperty); return target;}
public static Style<TChild> WithColumnHeaderContextMenu<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ContextMenu>? value, Disambigator<System.Windows.Controls.GridViewHeaderRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewHeaderRowPresenter{value?.StyleSetter(target, System.Windows.Controls.GridViewHeaderRowPresenter.ColumnHeaderContextMenuProperty); return target;}

//ColumnHeaderToolTipProperty
public static TChild WithColumnHeaderToolTip<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.GridView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridView{value?.SetValue(target, System.Windows.Controls.GridView.ColumnHeaderToolTipProperty); return target;}
public static Style<TChild> WithColumnHeaderToolTip<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.GridView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridView{value?.StyleSetter(target, System.Windows.Controls.GridView.ColumnHeaderToolTipProperty); return target;}
public static TChild WithColumnHeaderToolTip<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.GridViewHeaderRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewHeaderRowPresenter{value?.SetValue(target, System.Windows.Controls.GridViewHeaderRowPresenter.ColumnHeaderToolTipProperty); return target;}
public static Style<TChild> WithColumnHeaderToolTip<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.GridViewHeaderRowPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewHeaderRowPresenter{value?.StyleSetter(target, System.Windows.Controls.GridViewHeaderRowPresenter.ColumnHeaderToolTipProperty); return target;}

//HeaderContainerStyleProperty
public static TChild WithHeaderContainerStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.SetValue(target, System.Windows.Controls.GridViewColumn.HeaderContainerStyleProperty); return target;}
public static Style<TChild> WithHeaderContainerStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn{value?.StyleSetter(target, System.Windows.Controls.GridViewColumn.HeaderContainerStyleProperty); return target;}

//RoleProperty
public static TChild WithRole<TChild>(this TChild target, ValueProxy<System.Windows.Controls.GridViewColumnHeaderRole>? value, Disambigator<System.Windows.Controls.GridViewColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumnHeader{value?.SetValue(target, System.Windows.Controls.GridViewColumnHeader.RoleProperty); return target;}
public static Style<TChild> WithRole<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.GridViewColumnHeaderRole>? value, Disambigator<System.Windows.Controls.GridViewColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumnHeader{value?.StyleSetter(target, System.Windows.Controls.GridViewColumnHeader.RoleProperty); return target;}
public static TChild WithRole<TChild>(this TChild target, ValueProxy<System.Windows.Controls.MenuItemRole>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.RoleProperty); return target;}
public static Style<TChild> WithRole<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.MenuItemRole>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.RoleProperty); return target;}

//HasHeaderProperty
public static TChild WithHasHeader<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.HeaderedContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedContentControl{value?.SetValue(target, System.Windows.Controls.HeaderedContentControl.HasHeaderProperty); return target;}
public static Style<TChild> WithHasHeader<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.HeaderedContentControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedContentControl{value?.StyleSetter(target, System.Windows.Controls.HeaderedContentControl.HasHeaderProperty); return target;}
public static TChild WithHasHeader<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.HeaderedItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedItemsControl{value?.SetValue(target, System.Windows.Controls.HeaderedItemsControl.HasHeaderProperty); return target;}
public static Style<TChild> WithHasHeader<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.HeaderedItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.HeaderedItemsControl{value?.StyleSetter(target, System.Windows.Controls.HeaderedItemsControl.HasHeaderProperty); return target;}

//StretchDirectionProperty
public static TChild WithStretchDirection<TChild>(this TChild target, ValueProxy<System.Windows.Controls.StretchDirection>? value, Disambigator<System.Windows.Controls.Image, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Image{value?.SetValue(target, System.Windows.Controls.Image.StretchDirectionProperty); return target;}
public static Style<TChild> WithStretchDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.StretchDirection>? value, Disambigator<System.Windows.Controls.Image, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Image{value?.StyleSetter(target, System.Windows.Controls.Image.StretchDirectionProperty); return target;}
public static TChild WithStretchDirection<TChild>(this TChild target, ValueProxy<System.Windows.Controls.StretchDirection>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.SetValue(target, System.Windows.Controls.MediaElement.StretchDirectionProperty); return target;}
public static Style<TChild> WithStretchDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.StretchDirection>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.StyleSetter(target, System.Windows.Controls.MediaElement.StretchDirectionProperty); return target;}
public static TChild WithStretchDirection<TChild>(this TChild target, ValueProxy<System.Windows.Controls.StretchDirection>? value, Disambigator<System.Windows.Controls.Viewbox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Viewbox{value?.SetValue(target, System.Windows.Controls.Viewbox.StretchDirectionProperty); return target;}
public static Style<TChild> WithStretchDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.StretchDirection>? value, Disambigator<System.Windows.Controls.Viewbox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Viewbox{value?.StyleSetter(target, System.Windows.Controls.Viewbox.StretchDirectionProperty); return target;}
public static TChild WithStretchDirection<TChild>(this TChild target, ValueProxy<System.Windows.Controls.StretchDirection>? value, Disambigator<System.Windows.Controls.Primitives.DocumentPageView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentPageView{value?.SetValue(target, System.Windows.Controls.Primitives.DocumentPageView.StretchDirectionProperty); return target;}
public static Style<TChild> WithStretchDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.StretchDirection>? value, Disambigator<System.Windows.Controls.Primitives.DocumentPageView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentPageView{value?.StyleSetter(target, System.Windows.Controls.Primitives.DocumentPageView.StretchDirectionProperty); return target;}

//StrokesProperty
public static TChild WithStrokes<TChild>(this TChild target, ValueProxy<System.Windows.Ink.StrokeCollection>? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas{value?.SetValue(target, System.Windows.Controls.InkCanvas.StrokesProperty); return target;}
public static Style<TChild> WithStrokes<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Ink.StrokeCollection>? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas{value?.StyleSetter(target, System.Windows.Controls.InkCanvas.StrokesProperty); return target;}
public static TChild WithStrokes<TChild>(this TChild target, ValueProxy<System.Windows.Ink.StrokeCollection>? value, Disambigator<System.Windows.Controls.InkPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkPresenter{value?.SetValue(target, System.Windows.Controls.InkPresenter.StrokesProperty); return target;}
public static Style<TChild> WithStrokes<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Ink.StrokeCollection>? value, Disambigator<System.Windows.Controls.InkPresenter, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkPresenter{value?.StyleSetter(target, System.Windows.Controls.InkPresenter.StrokesProperty); return target;}

//DefaultDrawingAttributesProperty
public static TChild WithDefaultDrawingAttributes<TChild>(this TChild target, ValueProxy<System.Windows.Ink.DrawingAttributes>? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas{value?.SetValue(target, System.Windows.Controls.InkCanvas.DefaultDrawingAttributesProperty); return target;}
public static Style<TChild> WithDefaultDrawingAttributes<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Ink.DrawingAttributes>? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas{value?.StyleSetter(target, System.Windows.Controls.InkCanvas.DefaultDrawingAttributesProperty); return target;}

//ActiveEditingModeProperty
public static TChild WithActiveEditingMode<TChild>(this TChild target, ValueProxy<System.Windows.Controls.InkCanvasEditingMode>? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas{value?.SetValue(target, System.Windows.Controls.InkCanvas.ActiveEditingModeProperty); return target;}
public static Style<TChild> WithActiveEditingMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.InkCanvasEditingMode>? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas{value?.StyleSetter(target, System.Windows.Controls.InkCanvas.ActiveEditingModeProperty); return target;}

//EditingModeProperty
public static TChild WithEditingMode<TChild>(this TChild target, ValueProxy<System.Windows.Controls.InkCanvasEditingMode>? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas{value?.SetValue(target, System.Windows.Controls.InkCanvas.EditingModeProperty); return target;}
public static Style<TChild> WithEditingMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.InkCanvasEditingMode>? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas{value?.StyleSetter(target, System.Windows.Controls.InkCanvas.EditingModeProperty); return target;}

//EditingModeInvertedProperty
public static TChild WithEditingModeInverted<TChild>(this TChild target, ValueProxy<System.Windows.Controls.InkCanvasEditingMode>? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas{value?.SetValue(target, System.Windows.Controls.InkCanvas.EditingModeInvertedProperty); return target;}
public static Style<TChild> WithEditingModeInverted<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.InkCanvasEditingMode>? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas{value?.StyleSetter(target, System.Windows.Controls.InkCanvas.EditingModeInvertedProperty); return target;}

//HasItemsProperty
public static TChild WithHasItems<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.HasItemsProperty); return target;}
public static Style<TChild> WithHasItems<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.HasItemsProperty); return target;}

//ItemTemplateProperty
public static TChild WithItemTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.ItemTemplateProperty); return target;}
public static Style<TChild> WithItemTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.ItemTemplateProperty); return target;}

//ItemTemplateSelectorProperty
public static TChild WithItemTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.ItemTemplateSelectorProperty); return target;}
public static Style<TChild> WithItemTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.ItemTemplateSelectorProperty); return target;}

//ItemStringFormatProperty
public static TChild WithItemStringFormat<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.ItemStringFormatProperty); return target;}
public static Style<TChild> WithItemStringFormat<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.ItemStringFormatProperty); return target;}

//ItemBindingGroupProperty
public static TChild WithItemBindingGroup<TChild>(this TChild target, ValueProxy<System.Windows.Data.BindingGroup>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.ItemBindingGroupProperty); return target;}
public static Style<TChild> WithItemBindingGroup<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Data.BindingGroup>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.ItemBindingGroupProperty); return target;}

//ItemContainerStyleProperty
public static TChild WithItemContainerStyle<TChild>(this TChild target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.ItemContainerStyleProperty); return target;}
public static Style<TChild> WithItemContainerStyle<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Style>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.ItemContainerStyleProperty); return target;}

//ItemContainerStyleSelectorProperty
public static TChild WithItemContainerStyleSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.StyleSelector>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.ItemContainerStyleSelectorProperty); return target;}
public static Style<TChild> WithItemContainerStyleSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.StyleSelector>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.ItemContainerStyleSelectorProperty); return target;}

//IsGroupingProperty
public static TChild WithIsGrouping<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.IsGroupingProperty); return target;}
public static Style<TChild> WithIsGrouping<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.IsGroupingProperty); return target;}

//GroupStyleSelectorProperty
public static TChild WithGroupStyleSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.GroupStyleSelector>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.GroupStyleSelectorProperty); return target;}
public static Style<TChild> WithGroupStyleSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.GroupStyleSelector>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.GroupStyleSelectorProperty); return target;}

//AlternationCountProperty
public static TChild WithAlternationCount<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.AlternationCountProperty); return target;}
public static Style<TChild> WithAlternationCount<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.AlternationCountProperty); return target;}

//IsTextSearchEnabledProperty
public static TChild WithIsTextSearchEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.IsTextSearchEnabledProperty); return target;}
public static Style<TChild> WithIsTextSearchEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.IsTextSearchEnabledProperty); return target;}

//IsTextSearchCaseSensitiveProperty
public static TChild WithIsTextSearchCaseSensitive<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.SetValue(target, System.Windows.Controls.ItemsControl.IsTextSearchCaseSensitiveProperty); return target;}
public static Style<TChild> WithIsTextSearchCaseSensitive<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ItemsControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ItemsControl{value?.StyleSetter(target, System.Windows.Controls.ItemsControl.IsTextSearchCaseSensitiveProperty); return target;}

//SelectedItemsProperty
public static TChild WithSelectedItems<TChild>(this TChild target, ValueProxy<System.Collections.IList>? value, Disambigator<System.Windows.Controls.ListBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ListBox{value?.SetValue(target, System.Windows.Controls.ListBox.SelectedItemsProperty); return target;}
public static Style<TChild> WithSelectedItems<TChild>(this Style<TChild> target, ValueProxy<System.Collections.IList>? value, Disambigator<System.Windows.Controls.ListBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ListBox{value?.StyleSetter(target, System.Windows.Controls.ListBox.SelectedItemsProperty); return target;}

//VolumeProperty
public static TChild WithVolume<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.SetValue(target, System.Windows.Controls.MediaElement.VolumeProperty); return target;}
public static Style<TChild> WithVolume<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.StyleSetter(target, System.Windows.Controls.MediaElement.VolumeProperty); return target;}

//BalanceProperty
public static TChild WithBalance<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.SetValue(target, System.Windows.Controls.MediaElement.BalanceProperty); return target;}
public static Style<TChild> WithBalance<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.StyleSetter(target, System.Windows.Controls.MediaElement.BalanceProperty); return target;}

//IsMutedProperty
public static TChild WithIsMuted<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.SetValue(target, System.Windows.Controls.MediaElement.IsMutedProperty); return target;}
public static Style<TChild> WithIsMuted<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.StyleSetter(target, System.Windows.Controls.MediaElement.IsMutedProperty); return target;}

//ScrubbingEnabledProperty
public static TChild WithScrubbingEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.SetValue(target, System.Windows.Controls.MediaElement.ScrubbingEnabledProperty); return target;}
public static Style<TChild> WithScrubbingEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.StyleSetter(target, System.Windows.Controls.MediaElement.ScrubbingEnabledProperty); return target;}

//UnloadedBehaviorProperty
public static TChild WithUnloadedBehavior<TChild>(this TChild target, ValueProxy<System.Windows.Controls.MediaState>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.SetValue(target, System.Windows.Controls.MediaElement.UnloadedBehaviorProperty); return target;}
public static Style<TChild> WithUnloadedBehavior<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.MediaState>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.StyleSetter(target, System.Windows.Controls.MediaElement.UnloadedBehaviorProperty); return target;}

//LoadedBehaviorProperty
public static TChild WithLoadedBehavior<TChild>(this TChild target, ValueProxy<System.Windows.Controls.MediaState>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.SetValue(target, System.Windows.Controls.MediaElement.LoadedBehaviorProperty); return target;}
public static Style<TChild> WithLoadedBehavior<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.MediaState>? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement{value?.StyleSetter(target, System.Windows.Controls.MediaElement.LoadedBehaviorProperty); return target;}

//IsMainMenuProperty
public static TChild WithIsMainMenu<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Menu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Menu{value?.SetValue(target, System.Windows.Controls.Menu.IsMainMenuProperty); return target;}
public static Style<TChild> WithIsMainMenu<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Menu, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Menu{value?.StyleSetter(target, System.Windows.Controls.Menu.IsMainMenuProperty); return target;}

//IsSubmenuOpenProperty
public static TChild WithIsSubmenuOpen<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.IsSubmenuOpenProperty); return target;}
public static Style<TChild> WithIsSubmenuOpen<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.IsSubmenuOpenProperty); return target;}

//IsCheckableProperty
public static TChild WithIsCheckable<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.IsCheckableProperty); return target;}
public static Style<TChild> WithIsCheckable<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.IsCheckableProperty); return target;}

//IsPressedProperty
public static TChild WithIsPressed<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.IsPressedProperty); return target;}
public static Style<TChild> WithIsPressed<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.IsPressedProperty); return target;}
public static TChild WithIsPressed<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.ButtonBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ButtonBase{value?.SetValue(target, System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty); return target;}
public static Style<TChild> WithIsPressed<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.ButtonBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ButtonBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty); return target;}

//IsCheckedProperty
public static TChild WithIsChecked<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.IsCheckedProperty); return target;}
public static Style<TChild> WithIsChecked<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.IsCheckedProperty); return target;}
public static TChild WithIsChecked<TChild>(this TChild target, ValueProxy<System.Nullable<System.Boolean>>? value, Disambigator<System.Windows.Controls.Primitives.ToggleButton, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ToggleButton{value?.SetValue(target, System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty); return target;}
public static Style<TChild> WithIsChecked<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Boolean>>? value, Disambigator<System.Windows.Controls.Primitives.ToggleButton, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ToggleButton{value?.StyleSetter(target, System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty); return target;}

//StaysOpenOnClickProperty
public static TChild WithStaysOpenOnClick<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.StaysOpenOnClickProperty); return target;}
public static Style<TChild> WithStaysOpenOnClick<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.StaysOpenOnClickProperty); return target;}

//InputGestureTextProperty
public static TChild WithInputGestureText<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.InputGestureTextProperty); return target;}
public static Style<TChild> WithInputGestureText<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.InputGestureTextProperty); return target;}

//IsSuspendingPopupAnimationProperty
public static TChild WithIsSuspendingPopupAnimation<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.IsSuspendingPopupAnimationProperty); return target;}
public static Style<TChild> WithIsSuspendingPopupAnimation<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.IsSuspendingPopupAnimationProperty); return target;}

//ItemContainerTemplateSelectorProperty
public static TChild WithItemContainerTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ItemContainerTemplateSelector>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.ItemContainerTemplateSelectorProperty); return target;}
public static Style<TChild> WithItemContainerTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ItemContainerTemplateSelector>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.ItemContainerTemplateSelectorProperty); return target;}
public static TChild WithItemContainerTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ItemContainerTemplateSelector>? value, Disambigator<System.Windows.Controls.Primitives.MenuBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.MenuBase{value?.SetValue(target, System.Windows.Controls.Primitives.MenuBase.ItemContainerTemplateSelectorProperty); return target;}

public static Style<TChild> WithItemContainerTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ItemContainerTemplateSelector>? value, Disambigator<System.Windows.Controls.Primitives.MenuBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.MenuBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.MenuBase.ItemContainerTemplateSelectorProperty); return target;}
public static TChild WithItemContainerTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ItemContainerTemplateSelector>? value, Disambigator<System.Windows.Controls.Primitives.StatusBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.StatusBar{value?.SetValue(target, System.Windows.Controls.Primitives.StatusBar.ItemContainerTemplateSelectorProperty); return target;}
public static Style<TChild> WithItemContainerTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ItemContainerTemplateSelector>? value, Disambigator<System.Windows.Controls.Primitives.StatusBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.StatusBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.StatusBar.ItemContainerTemplateSelectorProperty); return target;}

//UsesItemContainerTemplateProperty
public static TChild WithUsesItemContainerTemplate<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.SetValue(target, System.Windows.Controls.MenuItem.UsesItemContainerTemplateProperty); return target;}
public static Style<TChild> WithUsesItemContainerTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.MenuItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MenuItem{value?.StyleSetter(target, System.Windows.Controls.MenuItem.UsesItemContainerTemplateProperty); return target;}
public static TChild WithUsesItemContainerTemplate<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.MenuBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.MenuBase{value?.SetValue(target, System.Windows.Controls.Primitives.MenuBase.UsesItemContainerTemplateProperty); return target;}
public static Style<TChild> WithUsesItemContainerTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.MenuBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.MenuBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.MenuBase.UsesItemContainerTemplateProperty); return target;}
public static TChild WithUsesItemContainerTemplate<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.StatusBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.StatusBar{value?.SetValue(target, System.Windows.Controls.Primitives.StatusBar.UsesItemContainerTemplateProperty); return target;}
public static Style<TChild> WithUsesItemContainerTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.StatusBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.StatusBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.StatusBar.UsesItemContainerTemplateProperty); return target;}

//IsItemsHostProperty
public static TChild WithIsItemsHost<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Panel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Panel{value?.SetValue(target, System.Windows.Controls.Panel.IsItemsHostProperty); return target;}
public static Style<TChild> WithIsItemsHost<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Panel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Panel{value?.StyleSetter(target, System.Windows.Controls.Panel.IsItemsHostProperty); return target;}

//ZIndexProperty
public static TChild WithPanel_ZIndex<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.Controls.Panel.ZIndexProperty); return target;}
public static Style<TChild> WithPanel_ZIndex<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.Controls.Panel.ZIndexProperty); return target;}

//PasswordCharProperty
public static System.Windows.Controls.PasswordBox WithPasswordChar(this System.Windows.Controls.PasswordBox target, ValueProxy<System.Char>? value) {value?.SetValue(target, System.Windows.Controls.PasswordBox.PasswordCharProperty); return target;}
public static Style<System.Windows.Controls.PasswordBox> WithPasswordChar(this Style<System.Windows.Controls.PasswordBox> target, ValueProxy<System.Char>? value) {value?.StyleSetter(target, System.Windows.Controls.PasswordBox.PasswordCharProperty); return target;}

//MaxLengthProperty
public static System.Windows.Controls.PasswordBox WithMaxLength(this System.Windows.Controls.PasswordBox target, ValueProxy<System.Int32>? value) {value?.SetValue(target, System.Windows.Controls.PasswordBox.MaxLengthProperty); return target;}
public static Style<System.Windows.Controls.PasswordBox> WithMaxLength(this Style<System.Windows.Controls.PasswordBox> target, ValueProxy<System.Int32>? value) {value?.StyleSetter(target, System.Windows.Controls.PasswordBox.MaxLengthProperty); return target;}
public static TChild WithMaxLength<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.SetValue(target, System.Windows.Controls.TextBox.MaxLengthProperty); return target;}
public static Style<TChild> WithMaxLength<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.StyleSetter(target, System.Windows.Controls.TextBox.MaxLengthProperty); return target;}

//SelectionTextBrushProperty
public static System.Windows.Controls.PasswordBox WithSelectionTextBrush(this System.Windows.Controls.PasswordBox target, ValueProxy<System.Windows.Media.Brush>? value) {value?.SetValue(target, System.Windows.Controls.PasswordBox.SelectionTextBrushProperty); return target;}
public static Style<System.Windows.Controls.PasswordBox> WithSelectionTextBrush(this Style<System.Windows.Controls.PasswordBox> target, ValueProxy<System.Windows.Media.Brush>? value) {value?.StyleSetter(target, System.Windows.Controls.PasswordBox.SelectionTextBrushProperty); return target;}
public static TChild WithSelectionTextBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.SelectionTextBrushProperty); return target;}
public static Style<TChild> WithSelectionTextBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.SelectionTextBrushProperty); return target;}

//CaretBrushProperty
public static System.Windows.Controls.PasswordBox WithCaretBrush(this System.Windows.Controls.PasswordBox target, ValueProxy<System.Windows.Media.Brush>? value) {value?.SetValue(target, System.Windows.Controls.PasswordBox.CaretBrushProperty); return target;}
public static Style<System.Windows.Controls.PasswordBox> WithCaretBrush(this Style<System.Windows.Controls.PasswordBox> target, ValueProxy<System.Windows.Media.Brush>? value) {value?.StyleSetter(target, System.Windows.Controls.PasswordBox.CaretBrushProperty); return target;}
public static TChild WithCaretBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.CaretBrushProperty); return target;}
public static Style<TChild> WithCaretBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.CaretBrushProperty); return target;}

//CanContentScrollProperty
public static System.Windows.Controls.ScrollContentPresenter WithCanContentScroll(this System.Windows.Controls.ScrollContentPresenter target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Controls.ScrollContentPresenter.CanContentScrollProperty); return target;}
public static Style<System.Windows.Controls.ScrollContentPresenter> WithCanContentScroll(this Style<System.Windows.Controls.ScrollContentPresenter> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Controls.ScrollContentPresenter.CanContentScrollProperty); return target;}
public static TChild WithScrollViewer_CanContentScroll<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ScrollViewer.CanContentScrollProperty); return target;}
public static Style<TChild> WithScrollViewer_CanContentScroll<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.CanContentScrollProperty); return target;}
public static TChild WithCanContentScroll<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.CanContentScrollProperty); return target;}
public static Style<TChild> WithCanContentScroll<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.CanContentScrollProperty); return target;}

//IsIndeterminateProperty
public static TChild WithIsIndeterminate<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ProgressBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ProgressBar{value?.SetValue(target, System.Windows.Controls.ProgressBar.IsIndeterminateProperty); return target;}
public static Style<TChild> WithIsIndeterminate<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ProgressBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ProgressBar{value?.StyleSetter(target, System.Windows.Controls.ProgressBar.IsIndeterminateProperty); return target;}

//OrientationProperty
public static TChild WithOrientation<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.ProgressBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ProgressBar{value?.SetValue(target, System.Windows.Controls.ProgressBar.OrientationProperty); return target;}
public static Style<TChild> WithOrientation<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.ProgressBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ProgressBar{value?.StyleSetter(target, System.Windows.Controls.ProgressBar.OrientationProperty); return target;}
public static TChild WithOrientation<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.SetValue(target, System.Windows.Controls.Slider.OrientationProperty); return target;}
public static Style<TChild> WithOrientation<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.StyleSetter(target, System.Windows.Controls.Slider.OrientationProperty); return target;}
public static TChild WithOrientation<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.StackPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.StackPanel{value?.SetValue(target, System.Windows.Controls.StackPanel.OrientationProperty); return target;}
public static Style<TChild> WithOrientation<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.StackPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.StackPanel{value?.StyleSetter(target, System.Windows.Controls.StackPanel.OrientationProperty); return target;}
public static TChild WithOrientation<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.ToolBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBar{value?.SetValue(target, System.Windows.Controls.ToolBar.OrientationProperty); return target;}
public static Style<TChild> WithOrientation<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.ToolBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBar{value?.StyleSetter(target, System.Windows.Controls.ToolBar.OrientationProperty); return target;}
public static TChild WithOrientation<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.ToolBarTray, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBarTray{value?.SetValue(target, System.Windows.Controls.ToolBarTray.OrientationProperty); return target;}
public static Style<TChild> WithOrientation<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.ToolBarTray, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBarTray{value?.StyleSetter(target, System.Windows.Controls.ToolBarTray.OrientationProperty); return target;}
public static TChild WithOrientation<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.VirtualizingStackPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.VirtualizingStackPanel{value?.SetValue(target, System.Windows.Controls.VirtualizingStackPanel.OrientationProperty); return target;}
public static Style<TChild> WithOrientation<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.VirtualizingStackPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.VirtualizingStackPanel{value?.StyleSetter(target, System.Windows.Controls.VirtualizingStackPanel.OrientationProperty); return target;}
public static TChild WithOrientation<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.WrapPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.WrapPanel{value?.SetValue(target, System.Windows.Controls.WrapPanel.OrientationProperty); return target;}
public static Style<TChild> WithOrientation<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.WrapPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.WrapPanel{value?.StyleSetter(target, System.Windows.Controls.WrapPanel.OrientationProperty); return target;}
public static TChild WithOrientation<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.Primitives.ScrollBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ScrollBar{value?.SetValue(target, System.Windows.Controls.Primitives.ScrollBar.OrientationProperty); return target;}
public static Style<TChild> WithOrientation<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.Primitives.ScrollBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ScrollBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.ScrollBar.OrientationProperty); return target;}
public static TChild WithOrientation<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track{value?.SetValue(target, System.Windows.Controls.Primitives.Track.OrientationProperty); return target;}
public static Style<TChild> WithOrientation<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Orientation>? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track{value?.StyleSetter(target, System.Windows.Controls.Primitives.Track.OrientationProperty); return target;}

//GroupNameProperty
public static TChild WithGroupName<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.RadioButton, TChild>? doNotUse = null) where TChild: System.Windows.Controls.RadioButton{value?.SetValue(target, System.Windows.Controls.RadioButton.GroupNameProperty); return target;}
public static Style<TChild> WithGroupName<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.RadioButton, TChild>? doNotUse = null) where TChild: System.Windows.Controls.RadioButton{value?.StyleSetter(target, System.Windows.Controls.RadioButton.GroupNameProperty); return target;}

//IsDocumentEnabledProperty
public static TChild WithIsDocumentEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.RichTextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.RichTextBox{value?.SetValue(target, System.Windows.Controls.RichTextBox.IsDocumentEnabledProperty); return target;}
public static Style<TChild> WithIsDocumentEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.RichTextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.RichTextBox{value?.StyleSetter(target, System.Windows.Controls.RichTextBox.IsDocumentEnabledProperty); return target;}

//ComputedHorizontalScrollBarVisibilityProperty
public static TChild WithComputedHorizontalScrollBarVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty); return target;}
public static Style<TChild> WithComputedHorizontalScrollBarVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty); return target;}

//ComputedVerticalScrollBarVisibilityProperty
public static TChild WithComputedVerticalScrollBarVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibilityProperty); return target;}
public static Style<TChild> WithComputedVerticalScrollBarVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibilityProperty); return target;}

//ContentVerticalOffsetProperty
public static TChild WithContentVerticalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.ContentVerticalOffsetProperty); return target;}
public static Style<TChild> WithContentVerticalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.ContentVerticalOffsetProperty); return target;}

//ContentHorizontalOffsetProperty
public static TChild WithContentHorizontalOffset<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.ContentHorizontalOffsetProperty); return target;}
public static Style<TChild> WithContentHorizontalOffset<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.ContentHorizontalOffsetProperty); return target;}

//ScrollableWidthProperty
public static TChild WithScrollableWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.ScrollableWidthProperty); return target;}
public static Style<TChild> WithScrollableWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.ScrollableWidthProperty); return target;}

//ScrollableHeightProperty
public static TChild WithScrollableHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.ScrollableHeightProperty); return target;}
public static Style<TChild> WithScrollableHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.ScrollableHeightProperty); return target;}

//IsDeferredScrollingEnabledProperty
public static TChild WithScrollViewer_IsDeferredScrollingEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ScrollViewer.IsDeferredScrollingEnabledProperty); return target;}
public static Style<TChild> WithScrollViewer_IsDeferredScrollingEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.IsDeferredScrollingEnabledProperty); return target;}
public static TChild WithIsDeferredScrollingEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.IsDeferredScrollingEnabledProperty); return target;}
public static Style<TChild> WithIsDeferredScrollingEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.IsDeferredScrollingEnabledProperty); return target;}

//PanningModeProperty
public static TChild WithScrollViewer_PanningMode<TChild>(this TChild target, ValueProxy<System.Windows.Controls.PanningMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ScrollViewer.PanningModeProperty); return target;}
public static Style<TChild> WithScrollViewer_PanningMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.PanningMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.PanningModeProperty); return target;}
public static TChild WithPanningMode<TChild>(this TChild target, ValueProxy<System.Windows.Controls.PanningMode>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.PanningModeProperty); return target;}
public static Style<TChild> WithPanningMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.PanningMode>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.PanningModeProperty); return target;}

//PanningDecelerationProperty
public static TChild WithScrollViewer_PanningDeceleration<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ScrollViewer.PanningDecelerationProperty); return target;}
public static Style<TChild> WithScrollViewer_PanningDeceleration<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.PanningDecelerationProperty); return target;}
public static TChild WithPanningDeceleration<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.PanningDecelerationProperty); return target;}
public static Style<TChild> WithPanningDeceleration<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.PanningDecelerationProperty); return target;}

//PanningRatioProperty
public static TChild WithScrollViewer_PanningRatio<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ScrollViewer.PanningRatioProperty); return target;}
public static Style<TChild> WithScrollViewer_PanningRatio<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.PanningRatioProperty); return target;}
public static TChild WithPanningRatio<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.SetValue(target, System.Windows.Controls.ScrollViewer.PanningRatioProperty); return target;}
public static Style<TChild> WithPanningRatio<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.ScrollViewer, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ScrollViewer{value?.StyleSetter(target, System.Windows.Controls.ScrollViewer.PanningRatioProperty); return target;}

//IsDirectionReversedProperty
public static TChild WithIsDirectionReversed<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.SetValue(target, System.Windows.Controls.Slider.IsDirectionReversedProperty); return target;}
public static Style<TChild> WithIsDirectionReversed<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.StyleSetter(target, System.Windows.Controls.Slider.IsDirectionReversedProperty); return target;}
public static TChild WithIsDirectionReversed<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.SetValue(target, System.Windows.Controls.Primitives.TickBar.IsDirectionReversedProperty); return target;}
public static Style<TChild> WithIsDirectionReversed<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.TickBar.IsDirectionReversedProperty); return target;}
public static TChild WithIsDirectionReversed<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track{value?.SetValue(target, System.Windows.Controls.Primitives.Track.IsDirectionReversedProperty); return target;}
public static Style<TChild> WithIsDirectionReversed<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track{value?.StyleSetter(target, System.Windows.Controls.Primitives.Track.IsDirectionReversedProperty); return target;}

//DelayProperty
public static TChild WithDelay<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.SetValue(target, System.Windows.Controls.Slider.DelayProperty); return target;}
public static Style<TChild> WithDelay<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.StyleSetter(target, System.Windows.Controls.Slider.DelayProperty); return target;}
public static TChild WithDelay<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.RepeatButton, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.RepeatButton{value?.SetValue(target, System.Windows.Controls.Primitives.RepeatButton.DelayProperty); return target;}
public static Style<TChild> WithDelay<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.RepeatButton, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.RepeatButton{value?.StyleSetter(target, System.Windows.Controls.Primitives.RepeatButton.DelayProperty); return target;}

//IntervalProperty
public static TChild WithInterval<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.SetValue(target, System.Windows.Controls.Slider.IntervalProperty); return target;}
public static Style<TChild> WithInterval<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.StyleSetter(target, System.Windows.Controls.Slider.IntervalProperty); return target;}
public static TChild WithInterval<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.RepeatButton, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.RepeatButton{value?.SetValue(target, System.Windows.Controls.Primitives.RepeatButton.IntervalProperty); return target;}
public static Style<TChild> WithInterval<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.RepeatButton, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.RepeatButton{value?.StyleSetter(target, System.Windows.Controls.Primitives.RepeatButton.IntervalProperty); return target;}

//AutoToolTipPlacementProperty
public static TChild WithAutoToolTipPlacement<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Primitives.AutoToolTipPlacement>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.SetValue(target, System.Windows.Controls.Slider.AutoToolTipPlacementProperty); return target;}
public static Style<TChild> WithAutoToolTipPlacement<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Primitives.AutoToolTipPlacement>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.StyleSetter(target, System.Windows.Controls.Slider.AutoToolTipPlacementProperty); return target;}

//AutoToolTipPrecisionProperty
public static TChild WithAutoToolTipPrecision<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.SetValue(target, System.Windows.Controls.Slider.AutoToolTipPrecisionProperty); return target;}
public static Style<TChild> WithAutoToolTipPrecision<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.StyleSetter(target, System.Windows.Controls.Slider.AutoToolTipPrecisionProperty); return target;}

//IsSnapToTickEnabledProperty
public static TChild WithIsSnapToTickEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.SetValue(target, System.Windows.Controls.Slider.IsSnapToTickEnabledProperty); return target;}
public static Style<TChild> WithIsSnapToTickEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.StyleSetter(target, System.Windows.Controls.Slider.IsSnapToTickEnabledProperty); return target;}

//TickPlacementProperty
public static TChild WithTickPlacement<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Primitives.TickPlacement>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.SetValue(target, System.Windows.Controls.Slider.TickPlacementProperty); return target;}
public static Style<TChild> WithTickPlacement<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Primitives.TickPlacement>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.StyleSetter(target, System.Windows.Controls.Slider.TickPlacementProperty); return target;}

//TickFrequencyProperty
public static TChild WithTickFrequency<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.SetValue(target, System.Windows.Controls.Slider.TickFrequencyProperty); return target;}
public static Style<TChild> WithTickFrequency<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.StyleSetter(target, System.Windows.Controls.Slider.TickFrequencyProperty); return target;}
public static TChild WithTickFrequency<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.SetValue(target, System.Windows.Controls.Primitives.TickBar.TickFrequencyProperty); return target;}
public static Style<TChild> WithTickFrequency<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.TickBar.TickFrequencyProperty); return target;}

//TicksProperty
public static TChild WithTicks<TChild>(this TChild target, ValueProxy<System.Windows.Media.DoubleCollection>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.SetValue(target, System.Windows.Controls.Slider.TicksProperty); return target;}
public static Style<TChild> WithTicks<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.DoubleCollection>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.StyleSetter(target, System.Windows.Controls.Slider.TicksProperty); return target;}
public static TChild WithTicks<TChild>(this TChild target, ValueProxy<System.Windows.Media.DoubleCollection>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.SetValue(target, System.Windows.Controls.Primitives.TickBar.TicksProperty); return target;}
public static Style<TChild> WithTicks<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.DoubleCollection>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.TickBar.TicksProperty); return target;}

//IsSelectionRangeEnabledProperty
public static TChild WithIsSelectionRangeEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.SetValue(target, System.Windows.Controls.Slider.IsSelectionRangeEnabledProperty); return target;}
public static Style<TChild> WithIsSelectionRangeEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.StyleSetter(target, System.Windows.Controls.Slider.IsSelectionRangeEnabledProperty); return target;}
public static TChild WithIsSelectionRangeEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.SetValue(target, System.Windows.Controls.Primitives.TickBar.IsSelectionRangeEnabledProperty); return target;}
public static Style<TChild> WithIsSelectionRangeEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.TickBar.IsSelectionRangeEnabledProperty); return target;}

//SelectionStartProperty
public static TChild WithSelectionStart<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.SetValue(target, System.Windows.Controls.Slider.SelectionStartProperty); return target;}
public static Style<TChild> WithSelectionStart<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.StyleSetter(target, System.Windows.Controls.Slider.SelectionStartProperty); return target;}
public static TChild WithSelectionStart<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.SetValue(target, System.Windows.Controls.Primitives.TickBar.SelectionStartProperty); return target;}
public static Style<TChild> WithSelectionStart<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.TickBar.SelectionStartProperty); return target;}

//SelectionEndProperty
public static TChild WithSelectionEnd<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.SetValue(target, System.Windows.Controls.Slider.SelectionEndProperty); return target;}
public static Style<TChild> WithSelectionEnd<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.StyleSetter(target, System.Windows.Controls.Slider.SelectionEndProperty); return target;}
public static TChild WithSelectionEnd<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.SetValue(target, System.Windows.Controls.Primitives.TickBar.SelectionEndProperty); return target;}
public static Style<TChild> WithSelectionEnd<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.TickBar.SelectionEndProperty); return target;}

//IsMoveToPointEnabledProperty
public static TChild WithIsMoveToPointEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.SetValue(target, System.Windows.Controls.Slider.IsMoveToPointEnabledProperty); return target;}
public static Style<TChild> WithIsMoveToPointEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Slider, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Slider{value?.StyleSetter(target, System.Windows.Controls.Slider.IsMoveToPointEnabledProperty); return target;}

//SpellingReformProperty
public static TChild WithSpellCheck_SpellingReform<TChild>(this TChild target, ValueProxy<System.Windows.Controls.SpellingReform>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.SpellCheck.SpellingReformProperty); return target;}
public static Style<TChild> WithSpellCheck_SpellingReform<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.SpellingReform>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.SpellCheck.SpellingReformProperty); return target;}

//CustomDictionariesProperty

//TabStripPlacementProperty
public static TChild WithTabStripPlacement<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Dock>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.SetValue(target, System.Windows.Controls.TabControl.TabStripPlacementProperty); return target;}
public static Style<TChild> WithTabStripPlacement<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Dock>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.StyleSetter(target, System.Windows.Controls.TabControl.TabStripPlacementProperty); return target;}
public static TChild WithTabStripPlacement<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Dock>? value, Disambigator<System.Windows.Controls.TabItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabItem{value?.SetValue(target, System.Windows.Controls.TabItem.TabStripPlacementProperty); return target;}
public static Style<TChild> WithTabStripPlacement<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Dock>? value, Disambigator<System.Windows.Controls.TabItem, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabItem{value?.StyleSetter(target, System.Windows.Controls.TabItem.TabStripPlacementProperty); return target;}

//SelectedContentProperty
public static TChild WithSelectedContent<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.SetValue(target, System.Windows.Controls.TabControl.SelectedContentProperty); return target;}
public static Style<TChild> WithSelectedContent<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.StyleSetter(target, System.Windows.Controls.TabControl.SelectedContentProperty); return target;}

//SelectedContentTemplateProperty
public static TChild WithSelectedContentTemplate<TChild>(this TChild target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.SetValue(target, System.Windows.Controls.TabControl.SelectedContentTemplateProperty); return target;}
public static Style<TChild> WithSelectedContentTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DataTemplate>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.StyleSetter(target, System.Windows.Controls.TabControl.SelectedContentTemplateProperty); return target;}

//SelectedContentTemplateSelectorProperty
public static TChild WithSelectedContentTemplateSelector<TChild>(this TChild target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.SetValue(target, System.Windows.Controls.TabControl.SelectedContentTemplateSelectorProperty); return target;}
public static Style<TChild> WithSelectedContentTemplateSelector<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.DataTemplateSelector>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.StyleSetter(target, System.Windows.Controls.TabControl.SelectedContentTemplateSelectorProperty); return target;}

//SelectedContentStringFormatProperty
public static TChild WithSelectedContentStringFormat<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.SetValue(target, System.Windows.Controls.TabControl.SelectedContentStringFormatProperty); return target;}
public static Style<TChild> WithSelectedContentStringFormat<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.Controls.TabControl, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TabControl{value?.StyleSetter(target, System.Windows.Controls.TabControl.SelectedContentStringFormatProperty); return target;}

//MinLinesProperty
public static TChild WithMinLines<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.SetValue(target, System.Windows.Controls.TextBox.MinLinesProperty); return target;}
public static Style<TChild> WithMinLines<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.StyleSetter(target, System.Windows.Controls.TextBox.MinLinesProperty); return target;}

//MaxLinesProperty
public static TChild WithMaxLines<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.SetValue(target, System.Windows.Controls.TextBox.MaxLinesProperty); return target;}
public static Style<TChild> WithMaxLines<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.StyleSetter(target, System.Windows.Controls.TextBox.MaxLinesProperty); return target;}

//CharacterCasingProperty
public static TChild WithCharacterCasing<TChild>(this TChild target, ValueProxy<System.Windows.Controls.CharacterCasing>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.SetValue(target, System.Windows.Controls.TextBox.CharacterCasingProperty); return target;}
public static Style<TChild> WithCharacterCasing<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.CharacterCasing>? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox{value?.StyleSetter(target, System.Windows.Controls.TextBox.CharacterCasingProperty); return target;}

//TextPathProperty
public static TChild WithTextSearch_TextPath<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.TextSearch.TextPathProperty); return target;}
public static Style<TChild> WithTextSearch_TextPath<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.TextSearch.TextPathProperty); return target;}

//BandProperty
public static TChild WithBand<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.ToolBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBar{value?.SetValue(target, System.Windows.Controls.ToolBar.BandProperty); return target;}
public static Style<TChild> WithBand<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.ToolBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBar{value?.StyleSetter(target, System.Windows.Controls.ToolBar.BandProperty); return target;}

//BandIndexProperty
public static TChild WithBandIndex<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.ToolBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBar{value?.SetValue(target, System.Windows.Controls.ToolBar.BandIndexProperty); return target;}
public static Style<TChild> WithBandIndex<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.ToolBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBar{value?.StyleSetter(target, System.Windows.Controls.ToolBar.BandIndexProperty); return target;}

//IsOverflowOpenProperty
public static TChild WithIsOverflowOpen<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ToolBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBar{value?.SetValue(target, System.Windows.Controls.ToolBar.IsOverflowOpenProperty); return target;}
public static Style<TChild> WithIsOverflowOpen<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ToolBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBar{value?.StyleSetter(target, System.Windows.Controls.ToolBar.IsOverflowOpenProperty); return target;}

//HasOverflowItemsProperty
public static TChild WithHasOverflowItems<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ToolBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBar{value?.SetValue(target, System.Windows.Controls.ToolBar.HasOverflowItemsProperty); return target;}
public static Style<TChild> WithHasOverflowItems<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ToolBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBar{value?.StyleSetter(target, System.Windows.Controls.ToolBar.HasOverflowItemsProperty); return target;}

//IsOverflowItemProperty

//OverflowModeProperty
public static TChild WithToolBar_OverflowMode<TChild>(this TChild target, ValueProxy<System.Windows.Controls.OverflowMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ToolBar.OverflowModeProperty); return target;}
public static Style<TChild> WithToolBar_OverflowMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.OverflowMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ToolBar.OverflowModeProperty); return target;}

//IsLockedProperty
public static TChild WithToolBarTray_IsLocked<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ToolBarTray.IsLockedProperty); return target;}
public static Style<TChild> WithToolBarTray_IsLocked<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ToolBarTray.IsLockedProperty); return target;}
public static TChild WithIsLocked<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ToolBarTray, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBarTray{value?.SetValue(target, System.Windows.Controls.ToolBarTray.IsLockedProperty); return target;}
public static Style<TChild> WithIsLocked<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.ToolBarTray, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ToolBarTray{value?.StyleSetter(target, System.Windows.Controls.ToolBarTray.IsLockedProperty); return target;}

//ShowDurationProperty
public static TChild WithToolTipService_ShowDuration<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ToolTipService.ShowDurationProperty); return target;}
public static Style<TChild> WithToolTipService_ShowDuration<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ToolTipService.ShowDurationProperty); return target;}

//InitialShowDelayProperty
public static TChild WithToolTipService_InitialShowDelay<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ToolTipService.InitialShowDelayProperty); return target;}
public static Style<TChild> WithToolTipService_InitialShowDelay<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ToolTipService.InitialShowDelayProperty); return target;}

//BetweenShowDelayProperty
public static TChild WithToolTipService_BetweenShowDelay<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.ToolTipService.BetweenShowDelayProperty); return target;}
public static Style<TChild> WithToolTipService_BetweenShowDelay<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.ToolTipService.BetweenShowDelayProperty); return target;}

//SelectedItemProperty
public static TChild WithSelectedItem<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.TreeView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TreeView{value?.SetValue(target, System.Windows.Controls.TreeView.SelectedItemProperty); return target;}
public static Style<TChild> WithSelectedItem<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.TreeView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TreeView{value?.StyleSetter(target, System.Windows.Controls.TreeView.SelectedItemProperty); return target;}
public static TChild WithSelectedItem<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.Primitives.Selector, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Selector{value?.SetValue(target, System.Windows.Controls.Primitives.Selector.SelectedItemProperty); return target;}
public static Style<TChild> WithSelectedItem<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.Primitives.Selector, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Selector{value?.StyleSetter(target, System.Windows.Controls.Primitives.Selector.SelectedItemProperty); return target;}

//SelectedValueProperty
public static TChild WithSelectedValue<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.TreeView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TreeView{value?.SetValue(target, System.Windows.Controls.TreeView.SelectedValueProperty); return target;}
public static Style<TChild> WithSelectedValue<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.TreeView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TreeView{value?.StyleSetter(target, System.Windows.Controls.TreeView.SelectedValueProperty); return target;}
public static TChild WithSelectedValue<TChild>(this TChild target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.Primitives.Selector, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Selector{value?.SetValue(target, System.Windows.Controls.Primitives.Selector.SelectedValueProperty); return target;}
public static Style<TChild> WithSelectedValue<TChild>(this Style<TChild> target, ValueProxy<System.Object>? value, Disambigator<System.Windows.Controls.Primitives.Selector, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Selector{value?.StyleSetter(target, System.Windows.Controls.Primitives.Selector.SelectedValueProperty); return target;}

//ErrorsProperty

//HasErrorProperty

//ErrorTemplateProperty
public static TChild WithValidation_ErrorTemplate<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ControlTemplate>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.Validation.ErrorTemplateProperty); return target;}
public static Style<TChild> WithValidation_ErrorTemplate<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ControlTemplate>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.Validation.ErrorTemplateProperty); return target;}

//ValidationAdornerSiteProperty
public static TChild WithValidation_ValidationAdornerSite<TChild>(this TChild target, ValueProxy<System.Windows.DependencyObject>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.Validation.ValidationAdornerSiteProperty); return target;}
public static Style<TChild> WithValidation_ValidationAdornerSite<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DependencyObject>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.Validation.ValidationAdornerSiteProperty); return target;}

//ValidationAdornerSiteForProperty
public static TChild WithValidation_ValidationAdornerSiteFor<TChild>(this TChild target, ValueProxy<System.Windows.DependencyObject>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.Validation.ValidationAdornerSiteForProperty); return target;}
public static Style<TChild> WithValidation_ValidationAdornerSiteFor<TChild>(this Style<TChild> target, ValueProxy<System.Windows.DependencyObject>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.Validation.ValidationAdornerSiteForProperty); return target;}

//CameraProperty
public static TChild WithCamera<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Camera>? value, Disambigator<System.Windows.Controls.Viewport3D, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Viewport3D{value?.SetValue(target, System.Windows.Controls.Viewport3D.CameraProperty); return target;}
public static Style<TChild> WithCamera<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Camera>? value, Disambigator<System.Windows.Controls.Viewport3D, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Viewport3D{value?.StyleSetter(target, System.Windows.Controls.Viewport3D.CameraProperty); return target;}
public static System.Windows.Media.Media3D.Viewport3DVisual WithCamera(this System.Windows.Media.Media3D.Viewport3DVisual target, ValueProxy<System.Windows.Media.Media3D.Camera>? value) {value?.SetValue(target, System.Windows.Media.Media3D.Viewport3DVisual.CameraProperty); return target;}
public static Style<System.Windows.Media.Media3D.Viewport3DVisual> WithCamera(this Style<System.Windows.Media.Media3D.Viewport3DVisual> target, ValueProxy<System.Windows.Media.Media3D.Camera>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.Viewport3DVisual.CameraProperty); return target;}

//ChildrenProperty
public static TChild WithChildren<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Visual3DCollection>? value, Disambigator<System.Windows.Controls.Viewport3D, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Viewport3D{value?.SetValue(target, System.Windows.Controls.Viewport3D.ChildrenProperty); return target;}
public static Style<TChild> WithChildren<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Visual3DCollection>? value, Disambigator<System.Windows.Controls.Viewport3D, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Viewport3D{value?.StyleSetter(target, System.Windows.Controls.Viewport3D.ChildrenProperty); return target;}
public static System.Windows.Media.GeneralTransformGroup WithChildren(this System.Windows.Media.GeneralTransformGroup target, ValueProxy<System.Windows.Media.GeneralTransformCollection>? value) {value?.SetValue(target, System.Windows.Media.GeneralTransformGroup.ChildrenProperty); return target;}
public static Style<System.Windows.Media.GeneralTransformGroup> WithChildren(this Style<System.Windows.Media.GeneralTransformGroup> target, ValueProxy<System.Windows.Media.GeneralTransformCollection>? value) {value?.StyleSetter(target, System.Windows.Media.GeneralTransformGroup.ChildrenProperty); return target;}
public static System.Windows.Media.TransformGroup WithChildren(this System.Windows.Media.TransformGroup target, ValueProxy<System.Windows.Media.TransformCollection>? value) {value?.SetValue(target, System.Windows.Media.TransformGroup.ChildrenProperty); return target;}
public static Style<System.Windows.Media.TransformGroup> WithChildren(this Style<System.Windows.Media.TransformGroup> target, ValueProxy<System.Windows.Media.TransformCollection>? value) {value?.StyleSetter(target, System.Windows.Media.TransformGroup.ChildrenProperty); return target;}
public static System.Windows.Media.DrawingGroup WithChildren(this System.Windows.Media.DrawingGroup target, ValueProxy<System.Windows.Media.DrawingCollection>? value) {value?.SetValue(target, System.Windows.Media.DrawingGroup.ChildrenProperty); return target;}
public static Style<System.Windows.Media.DrawingGroup> WithChildren(this Style<System.Windows.Media.DrawingGroup> target, ValueProxy<System.Windows.Media.DrawingCollection>? value) {value?.StyleSetter(target, System.Windows.Media.DrawingGroup.ChildrenProperty); return target;}
public static System.Windows.Media.GeometryGroup WithChildren(this System.Windows.Media.GeometryGroup target, ValueProxy<System.Windows.Media.GeometryCollection>? value) {value?.SetValue(target, System.Windows.Media.GeometryGroup.ChildrenProperty); return target;}
public static Style<System.Windows.Media.GeometryGroup> WithChildren(this Style<System.Windows.Media.GeometryGroup> target, ValueProxy<System.Windows.Media.GeometryCollection>? value) {value?.StyleSetter(target, System.Windows.Media.GeometryGroup.ChildrenProperty); return target;}
public static System.Windows.Media.Media3D.GeneralTransform3DGroup WithChildren(this System.Windows.Media.Media3D.GeneralTransform3DGroup target, ValueProxy<System.Windows.Media.Media3D.GeneralTransform3DCollection>? value) {value?.SetValue(target, System.Windows.Media.Media3D.GeneralTransform3DGroup.ChildrenProperty); return target;}
public static Style<System.Windows.Media.Media3D.GeneralTransform3DGroup> WithChildren(this Style<System.Windows.Media.Media3D.GeneralTransform3DGroup> target, ValueProxy<System.Windows.Media.Media3D.GeneralTransform3DCollection>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.GeneralTransform3DGroup.ChildrenProperty); return target;}
public static System.Windows.Media.Media3D.MaterialGroup WithChildren(this System.Windows.Media.Media3D.MaterialGroup target, ValueProxy<System.Windows.Media.Media3D.MaterialCollection>? value) {value?.SetValue(target, System.Windows.Media.Media3D.MaterialGroup.ChildrenProperty); return target;}
public static Style<System.Windows.Media.Media3D.MaterialGroup> WithChildren(this Style<System.Windows.Media.Media3D.MaterialGroup> target, ValueProxy<System.Windows.Media.Media3D.MaterialCollection>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.MaterialGroup.ChildrenProperty); return target;}
public static System.Windows.Media.Media3D.Model3DGroup WithChildren(this System.Windows.Media.Media3D.Model3DGroup target, ValueProxy<System.Windows.Media.Media3D.Model3DCollection>? value) {value?.SetValue(target, System.Windows.Media.Media3D.Model3DGroup.ChildrenProperty); return target;}
public static Style<System.Windows.Media.Media3D.Model3DGroup> WithChildren(this Style<System.Windows.Media.Media3D.Model3DGroup> target, ValueProxy<System.Windows.Media.Media3D.Model3DCollection>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.Model3DGroup.ChildrenProperty); return target;}
public static System.Windows.Media.Media3D.Transform3DGroup WithChildren(this System.Windows.Media.Media3D.Transform3DGroup target, ValueProxy<System.Windows.Media.Media3D.Transform3DCollection>? value) {value?.SetValue(target, System.Windows.Media.Media3D.Transform3DGroup.ChildrenProperty); return target;}
public static Style<System.Windows.Media.Media3D.Transform3DGroup> WithChildren(this Style<System.Windows.Media.Media3D.Transform3DGroup> target, ValueProxy<System.Windows.Media.Media3D.Transform3DCollection>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.Transform3DGroup.ChildrenProperty); return target;}
public static TChild WithChildren<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.TimelineCollection>? value, Disambigator<System.Windows.Media.Animation.TimelineGroup, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.TimelineGroup{value?.SetValue(target, System.Windows.Media.Animation.TimelineGroup.ChildrenProperty); return target;}
public static Style<TChild> WithChildren<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.TimelineCollection>? value, Disambigator<System.Windows.Media.Animation.TimelineGroup, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.TimelineGroup{value?.StyleSetter(target, System.Windows.Media.Animation.TimelineGroup.ChildrenProperty); return target;}
public static System.Windows.Media.Effects.BitmapEffectGroup WithChildren(this System.Windows.Media.Effects.BitmapEffectGroup target, ValueProxy<System.Windows.Media.Effects.BitmapEffectCollection>? value) {value?.SetValue(target, System.Windows.Media.Effects.BitmapEffectGroup.ChildrenProperty); return target;}
public static Style<System.Windows.Media.Effects.BitmapEffectGroup> WithChildren(this Style<System.Windows.Media.Effects.BitmapEffectGroup> target, ValueProxy<System.Windows.Media.Effects.BitmapEffectCollection>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.BitmapEffectGroup.ChildrenProperty); return target;}

//IsVirtualizingProperty
public static TChild WithVirtualizingPanel_IsVirtualizing<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.VirtualizingPanel.IsVirtualizingProperty); return target;}
public static Style<TChild> WithVirtualizingPanel_IsVirtualizing<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.VirtualizingPanel.IsVirtualizingProperty); return target;}

//VirtualizationModeProperty
public static TChild WithVirtualizingPanel_VirtualizationMode<TChild>(this TChild target, ValueProxy<System.Windows.Controls.VirtualizationMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.VirtualizingPanel.VirtualizationModeProperty); return target;}
public static Style<TChild> WithVirtualizingPanel_VirtualizationMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.VirtualizationMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.VirtualizingPanel.VirtualizationModeProperty); return target;}

//IsVirtualizingWhenGroupingProperty
public static TChild WithVirtualizingPanel_IsVirtualizingWhenGrouping<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.VirtualizingPanel.IsVirtualizingWhenGroupingProperty); return target;}
public static Style<TChild> WithVirtualizingPanel_IsVirtualizingWhenGrouping<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.VirtualizingPanel.IsVirtualizingWhenGroupingProperty); return target;}

//ScrollUnitProperty
public static TChild WithVirtualizingPanel_ScrollUnit<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ScrollUnit>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.VirtualizingPanel.ScrollUnitProperty); return target;}
public static Style<TChild> WithVirtualizingPanel_ScrollUnit<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ScrollUnit>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.VirtualizingPanel.ScrollUnitProperty); return target;}

//CacheLengthProperty
public static TChild WithVirtualizingPanel_CacheLength<TChild>(this TChild target, ValueProxy<System.Windows.Controls.VirtualizationCacheLength>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.VirtualizingPanel.CacheLengthProperty); return target;}
public static Style<TChild> WithVirtualizingPanel_CacheLength<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.VirtualizationCacheLength>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.VirtualizingPanel.CacheLengthProperty); return target;}

//CacheLengthUnitProperty
public static TChild WithVirtualizingPanel_CacheLengthUnit<TChild>(this TChild target, ValueProxy<System.Windows.Controls.VirtualizationCacheLengthUnit>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.VirtualizingPanel.CacheLengthUnitProperty); return target;}
public static Style<TChild> WithVirtualizingPanel_CacheLengthUnit<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.VirtualizationCacheLengthUnit>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.VirtualizingPanel.CacheLengthUnitProperty); return target;}

//IsContainerVirtualizableProperty
public static TChild WithVirtualizingPanel_IsContainerVirtualizable<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.VirtualizingPanel.IsContainerVirtualizableProperty); return target;}
public static Style<TChild> WithVirtualizingPanel_IsContainerVirtualizable<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.VirtualizingPanel.IsContainerVirtualizableProperty); return target;}

//ItemWidthProperty
public static TChild WithItemWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.WrapPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.WrapPanel{value?.SetValue(target, System.Windows.Controls.WrapPanel.ItemWidthProperty); return target;}
public static Style<TChild> WithItemWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.WrapPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.WrapPanel{value?.StyleSetter(target, System.Windows.Controls.WrapPanel.ItemWidthProperty); return target;}

//ItemHeightProperty
public static TChild WithItemHeight<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.WrapPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.WrapPanel{value?.SetValue(target, System.Windows.Controls.WrapPanel.ItemHeightProperty); return target;}
public static Style<TChild> WithItemHeight<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.WrapPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.WrapPanel{value?.StyleSetter(target, System.Windows.Controls.WrapPanel.ItemHeightProperty); return target;}

//ClickModeProperty
public static TChild WithClickMode<TChild>(this TChild target, ValueProxy<System.Windows.Controls.ClickMode>? value, Disambigator<System.Windows.Controls.Primitives.ButtonBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ButtonBase{value?.SetValue(target, System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty); return target;}
public static Style<TChild> WithClickMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.ClickMode>? value, Disambigator<System.Windows.Controls.Primitives.ButtonBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ButtonBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty); return target;}

//HasSelectedDaysProperty
public static System.Windows.Controls.Primitives.CalendarButton WithHasSelectedDays(this System.Windows.Controls.Primitives.CalendarButton target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Controls.Primitives.CalendarButton.HasSelectedDaysProperty); return target;}
public static Style<System.Windows.Controls.Primitives.CalendarButton> WithHasSelectedDays(this Style<System.Windows.Controls.Primitives.CalendarButton> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Controls.Primitives.CalendarButton.HasSelectedDaysProperty); return target;}

//IsInactiveProperty
public static System.Windows.Controls.Primitives.CalendarButton WithIsInactive(this System.Windows.Controls.Primitives.CalendarButton target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Controls.Primitives.CalendarButton.IsInactiveProperty); return target;}
public static Style<System.Windows.Controls.Primitives.CalendarButton> WithIsInactive(this Style<System.Windows.Controls.Primitives.CalendarButton> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Controls.Primitives.CalendarButton.IsInactiveProperty); return target;}
public static System.Windows.Controls.Primitives.CalendarDayButton WithIsInactive(this System.Windows.Controls.Primitives.CalendarDayButton target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Controls.Primitives.CalendarDayButton.IsInactiveProperty); return target;}
public static Style<System.Windows.Controls.Primitives.CalendarDayButton> WithIsInactive(this Style<System.Windows.Controls.Primitives.CalendarDayButton> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Controls.Primitives.CalendarDayButton.IsInactiveProperty); return target;}

//IsTodayProperty
public static System.Windows.Controls.Primitives.CalendarDayButton WithIsToday(this System.Windows.Controls.Primitives.CalendarDayButton target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Controls.Primitives.CalendarDayButton.IsTodayProperty); return target;}
public static Style<System.Windows.Controls.Primitives.CalendarDayButton> WithIsToday(this Style<System.Windows.Controls.Primitives.CalendarDayButton> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Controls.Primitives.CalendarDayButton.IsTodayProperty); return target;}

//IsBlackedOutProperty
public static System.Windows.Controls.Primitives.CalendarDayButton WithIsBlackedOut(this System.Windows.Controls.Primitives.CalendarDayButton target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Controls.Primitives.CalendarDayButton.IsBlackedOutProperty); return target;}
public static Style<System.Windows.Controls.Primitives.CalendarDayButton> WithIsBlackedOut(this Style<System.Windows.Controls.Primitives.CalendarDayButton> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Controls.Primitives.CalendarDayButton.IsBlackedOutProperty); return target;}

//SeparatorBrushProperty
public static TChild WithSeparatorBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Primitives.DataGridColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridColumnHeader{value?.SetValue(target, System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrushProperty); return target;}
public static Style<TChild> WithSeparatorBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Primitives.DataGridColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridColumnHeader{value?.StyleSetter(target, System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrushProperty); return target;}
public static TChild WithSeparatorBrush<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Primitives.DataGridRowHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridRowHeader{value?.SetValue(target, System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrushProperty); return target;}
public static Style<TChild> WithSeparatorBrush<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.Controls.Primitives.DataGridRowHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridRowHeader{value?.StyleSetter(target, System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrushProperty); return target;}

//SeparatorVisibilityProperty
public static TChild WithSeparatorVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.Controls.Primitives.DataGridColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridColumnHeader{value?.SetValue(target, System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibilityProperty); return target;}
public static Style<TChild> WithSeparatorVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.Controls.Primitives.DataGridColumnHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridColumnHeader{value?.StyleSetter(target, System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibilityProperty); return target;}
public static TChild WithSeparatorVisibility<TChild>(this TChild target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.Controls.Primitives.DataGridRowHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridRowHeader{value?.SetValue(target, System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibilityProperty); return target;}
public static Style<TChild> WithSeparatorVisibility<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Visibility>? value, Disambigator<System.Windows.Controls.Primitives.DataGridRowHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridRowHeader{value?.StyleSetter(target, System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibilityProperty); return target;}

//IsRowSelectedProperty
public static TChild WithIsRowSelected<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.DataGridRowHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridRowHeader{value?.SetValue(target, System.Windows.Controls.Primitives.DataGridRowHeader.IsRowSelectedProperty); return target;}
public static Style<TChild> WithIsRowSelected<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.DataGridRowHeader, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DataGridRowHeader{value?.StyleSetter(target, System.Windows.Controls.Primitives.DataGridRowHeader.IsRowSelectedProperty); return target;}

//MasterPageNumberProperty
public static TChild WithMasterPageNumber<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.DocumentViewerBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentViewerBase{value?.SetValue(target, System.Windows.Controls.Primitives.DocumentViewerBase.MasterPageNumberProperty); return target;}
public static Style<TChild> WithMasterPageNumber<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.DocumentViewerBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentViewerBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.DocumentViewerBase.MasterPageNumberProperty); return target;}

//IsMasterPageProperty
public static TChild WithDocumentViewerBase_IsMasterPage<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.Primitives.DocumentViewerBase.IsMasterPageProperty); return target;}
public static Style<TChild> WithDocumentViewerBase_IsMasterPage<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.Primitives.DocumentViewerBase.IsMasterPageProperty); return target;}

//ColumnsProperty
public static TChild WithColumns<TChild>(this TChild target, ValueProxy<System.Windows.Controls.GridViewColumnCollection>? value, Disambigator<System.Windows.Controls.Primitives.GridViewRowPresenterBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.GridViewRowPresenterBase{value?.SetValue(target, System.Windows.Controls.Primitives.GridViewRowPresenterBase.ColumnsProperty); return target;}
public static Style<TChild> WithColumns<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.GridViewColumnCollection>? value, Disambigator<System.Windows.Controls.Primitives.GridViewRowPresenterBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.GridViewRowPresenterBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.GridViewRowPresenterBase.ColumnsProperty); return target;}
public static TChild WithColumns<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.UniformGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.UniformGrid{value?.SetValue(target, System.Windows.Controls.Primitives.UniformGrid.ColumnsProperty); return target;}
public static Style<TChild> WithColumns<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.UniformGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.UniformGrid{value?.StyleSetter(target, System.Windows.Controls.Primitives.UniformGrid.ColumnsProperty); return target;}

//ChildProperty
public static TChild WithChild<TChild>(this TChild target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.SetValue(target, System.Windows.Controls.Primitives.Popup.ChildProperty); return target;}

public static Style<TChild> WithChild<TChild>(this Style<TChild> target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.StyleSetter(target, System.Windows.Controls.Primitives.Popup.ChildProperty); return target;}

//PopupAnimationProperty
public static TChild WithPopupAnimation<TChild>(this TChild target, ValueProxy<System.Windows.Controls.Primitives.PopupAnimation>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.SetValue(target, System.Windows.Controls.Primitives.Popup.PopupAnimationProperty); return target;}
public static Style<TChild> WithPopupAnimation<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.Primitives.PopupAnimation>? value, Disambigator<System.Windows.Controls.Primitives.Popup, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Popup{value?.StyleSetter(target, System.Windows.Controls.Primitives.Popup.PopupAnimationProperty); return target;}

//MinimumProperty
public static TChild WithMinimum<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.RangeBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.RangeBase{value?.SetValue(target, System.Windows.Controls.Primitives.RangeBase.MinimumProperty); return target;}
public static Style<TChild> WithMinimum<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.RangeBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.RangeBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.RangeBase.MinimumProperty); return target;}
public static TChild WithMinimum<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.SetValue(target, System.Windows.Controls.Primitives.TickBar.MinimumProperty); return target;}
public static Style<TChild> WithMinimum<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.TickBar.MinimumProperty); return target;}
public static TChild WithMinimum<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track{value?.SetValue(target, System.Windows.Controls.Primitives.Track.MinimumProperty); return target;}
public static Style<TChild> WithMinimum<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track{value?.StyleSetter(target, System.Windows.Controls.Primitives.Track.MinimumProperty); return target;}

//MaximumProperty
public static TChild WithMaximum<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.RangeBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.RangeBase{value?.SetValue(target, System.Windows.Controls.Primitives.RangeBase.MaximumProperty); return target;}
public static Style<TChild> WithMaximum<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.RangeBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.RangeBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.RangeBase.MaximumProperty); return target;}
public static TChild WithMaximum<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.SetValue(target, System.Windows.Controls.Primitives.TickBar.MaximumProperty); return target;}
public static Style<TChild> WithMaximum<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.TickBar.MaximumProperty); return target;}
public static TChild WithMaximum<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track{value?.SetValue(target, System.Windows.Controls.Primitives.Track.MaximumProperty); return target;}
public static Style<TChild> WithMaximum<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track{value?.StyleSetter(target, System.Windows.Controls.Primitives.Track.MaximumProperty); return target;}

//LargeChangeProperty
public static TChild WithLargeChange<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.RangeBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.RangeBase{value?.SetValue(target, System.Windows.Controls.Primitives.RangeBase.LargeChangeProperty); return target;}
public static Style<TChild> WithLargeChange<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.RangeBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.RangeBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.RangeBase.LargeChangeProperty); return target;}

//SmallChangeProperty
public static TChild WithSmallChange<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.RangeBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.RangeBase{value?.SetValue(target, System.Windows.Controls.Primitives.RangeBase.SmallChangeProperty); return target;}
public static Style<TChild> WithSmallChange<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.RangeBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.RangeBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.RangeBase.SmallChangeProperty); return target;}

//ViewportSizeProperty
public static TChild WithViewportSize<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.ScrollBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ScrollBar{value?.SetValue(target, System.Windows.Controls.Primitives.ScrollBar.ViewportSizeProperty); return target;}
public static Style<TChild> WithViewportSize<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.ScrollBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ScrollBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.ScrollBar.ViewportSizeProperty); return target;}
public static TChild WithViewportSize<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track{value?.SetValue(target, System.Windows.Controls.Primitives.Track.ViewportSizeProperty); return target;}
public static Style<TChild> WithViewportSize<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track{value?.StyleSetter(target, System.Windows.Controls.Primitives.Track.ViewportSizeProperty); return target;}

//SelectiveScrollingOrientationProperty
public static TChild WithSelectiveScrollingGrid_SelectiveScrollingOrientation<TChild>(this TChild target, ValueProxy<System.Windows.Controls.SelectiveScrollingOrientation>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Controls.Primitives.SelectiveScrollingGrid.SelectiveScrollingOrientationProperty); return target;}
public static Style<TChild> WithSelectiveScrollingGrid_SelectiveScrollingOrientation<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Controls.SelectiveScrollingOrientation>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Controls.Primitives.SelectiveScrollingGrid.SelectiveScrollingOrientationProperty); return target;}

//IsSynchronizedWithCurrentItemProperty
public static TChild WithIsSynchronizedWithCurrentItem<TChild>(this TChild target, ValueProxy<System.Nullable<System.Boolean>>? value, Disambigator<System.Windows.Controls.Primitives.Selector, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Selector{value?.SetValue(target, System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItemProperty); return target;}
public static Style<TChild> WithIsSynchronizedWithCurrentItem<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Boolean>>? value, Disambigator<System.Windows.Controls.Primitives.Selector, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Selector{value?.StyleSetter(target, System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItemProperty); return target;}

//SelectedIndexProperty
public static TChild WithSelectedIndex<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.Selector, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Selector{value?.SetValue(target, System.Windows.Controls.Primitives.Selector.SelectedIndexProperty); return target;}
public static Style<TChild> WithSelectedIndex<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.Selector, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Selector{value?.StyleSetter(target, System.Windows.Controls.Primitives.Selector.SelectedIndexProperty); return target;}

//IsReadOnlyCaretVisibleProperty
public static TChild WithIsReadOnlyCaretVisible<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.IsReadOnlyCaretVisibleProperty); return target;}
public static Style<TChild> WithIsReadOnlyCaretVisible<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.IsReadOnlyCaretVisibleProperty); return target;}

//AcceptsTabProperty
public static TChild WithAcceptsTab<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.AcceptsTabProperty); return target;}
public static Style<TChild> WithAcceptsTab<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.AcceptsTabProperty); return target;}

//IsUndoEnabledProperty
public static TChild WithIsUndoEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.IsUndoEnabledProperty); return target;}
public static Style<TChild> WithIsUndoEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.IsUndoEnabledProperty); return target;}

//UndoLimitProperty
public static TChild WithUndoLimit<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.UndoLimitProperty); return target;}
public static Style<TChild> WithUndoLimit<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.UndoLimitProperty); return target;}

//AutoWordSelectionProperty
public static TChild WithAutoWordSelection<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.SetValue(target, System.Windows.Controls.Primitives.TextBoxBase.AutoWordSelectionProperty); return target;}
public static Style<TChild> WithAutoWordSelection<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.TextBoxBase, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TextBoxBase{value?.StyleSetter(target, System.Windows.Controls.Primitives.TextBoxBase.AutoWordSelectionProperty); return target;}

//IsDraggingProperty
public static TChild WithIsDragging<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.Thumb, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Thumb{value?.SetValue(target, System.Windows.Controls.Primitives.Thumb.IsDraggingProperty); return target;}
public static Style<TChild> WithIsDragging<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Controls.Primitives.Thumb, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Thumb{value?.StyleSetter(target, System.Windows.Controls.Primitives.Thumb.IsDraggingProperty); return target;}

//ReservedSpaceProperty
public static TChild WithReservedSpace<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.SetValue(target, System.Windows.Controls.Primitives.TickBar.ReservedSpaceProperty); return target;}
public static Style<TChild> WithReservedSpace<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.TickBar, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.TickBar{value?.StyleSetter(target, System.Windows.Controls.Primitives.TickBar.ReservedSpaceProperty); return target;}

//WrapWidthProperty
public static TChild WithWrapWidth<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.ToolBarOverflowPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ToolBarOverflowPanel{value?.SetValue(target, System.Windows.Controls.Primitives.ToolBarOverflowPanel.WrapWidthProperty); return target;}
public static Style<TChild> WithWrapWidth<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Controls.Primitives.ToolBarOverflowPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.ToolBarOverflowPanel{value?.StyleSetter(target, System.Windows.Controls.Primitives.ToolBarOverflowPanel.WrapWidthProperty); return target;}

//FirstColumnProperty
public static TChild WithFirstColumn<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.UniformGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.UniformGrid{value?.SetValue(target, System.Windows.Controls.Primitives.UniformGrid.FirstColumnProperty); return target;}
public static Style<TChild> WithFirstColumn<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.UniformGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.UniformGrid{value?.StyleSetter(target, System.Windows.Controls.Primitives.UniformGrid.FirstColumnProperty); return target;}

//RowsProperty
public static TChild WithRows<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.UniformGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.UniformGrid{value?.SetValue(target, System.Windows.Controls.Primitives.UniformGrid.RowsProperty); return target;}
public static Style<TChild> WithRows<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Controls.Primitives.UniformGrid, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.UniformGrid{value?.StyleSetter(target, System.Windows.Controls.Primitives.UniformGrid.RowsProperty); return target;}

//IsMouseDirectlyOverProperty
public static TChild WithIsMouseDirectlyOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.IsMouseDirectlyOverProperty); return target;}
public static Style<TChild> WithIsMouseDirectlyOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.IsMouseDirectlyOverProperty); return target;}
public static TChild WithIsMouseDirectlyOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsMouseDirectlyOverProperty); return target;}
public static Style<TChild> WithIsMouseDirectlyOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsMouseDirectlyOverProperty); return target;}
public static TChild WithIsMouseDirectlyOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.IsMouseDirectlyOverProperty); return target;}
public static Style<TChild> WithIsMouseDirectlyOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.IsMouseDirectlyOverProperty); return target;}

//IsMouseOverProperty
public static TChild WithIsMouseOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.IsMouseOverProperty); return target;}
public static Style<TChild> WithIsMouseOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.IsMouseOverProperty); return target;}
public static TChild WithIsMouseOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsMouseOverProperty); return target;}
public static Style<TChild> WithIsMouseOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsMouseOverProperty); return target;}
public static TChild WithIsMouseOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.IsMouseOverProperty); return target;}
public static Style<TChild> WithIsMouseOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.IsMouseOverProperty); return target;}

//IsStylusOverProperty
public static TChild WithIsStylusOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.IsStylusOverProperty); return target;}
public static Style<TChild> WithIsStylusOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.IsStylusOverProperty); return target;}
public static TChild WithIsStylusOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsStylusOverProperty); return target;}
public static Style<TChild> WithIsStylusOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsStylusOverProperty); return target;}
public static TChild WithIsStylusOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.IsStylusOverProperty); return target;}
public static Style<TChild> WithIsStylusOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.IsStylusOverProperty); return target;}

//IsKeyboardFocusWithinProperty
public static TChild WithIsKeyboardFocusWithin<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.IsKeyboardFocusWithinProperty); return target;}
public static Style<TChild> WithIsKeyboardFocusWithin<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.IsKeyboardFocusWithinProperty); return target;}
public static TChild WithIsKeyboardFocusWithin<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsKeyboardFocusWithinProperty); return target;}
public static Style<TChild> WithIsKeyboardFocusWithin<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsKeyboardFocusWithinProperty); return target;}
public static TChild WithIsKeyboardFocusWithin<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.IsKeyboardFocusWithinProperty); return target;}
public static Style<TChild> WithIsKeyboardFocusWithin<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.IsKeyboardFocusWithinProperty); return target;}

//IsMouseCapturedProperty
public static TChild WithIsMouseCaptured<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.IsMouseCapturedProperty); return target;}
public static Style<TChild> WithIsMouseCaptured<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.IsMouseCapturedProperty); return target;}
public static TChild WithIsMouseCaptured<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsMouseCapturedProperty); return target;}
public static Style<TChild> WithIsMouseCaptured<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsMouseCapturedProperty); return target;}
public static TChild WithIsMouseCaptured<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.IsMouseCapturedProperty); return target;}
public static Style<TChild> WithIsMouseCaptured<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.IsMouseCapturedProperty); return target;}

//IsMouseCaptureWithinProperty
public static TChild WithIsMouseCaptureWithin<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.IsMouseCaptureWithinProperty); return target;}
public static Style<TChild> WithIsMouseCaptureWithin<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.IsMouseCaptureWithinProperty); return target;}
public static TChild WithIsMouseCaptureWithin<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsMouseCaptureWithinProperty); return target;}
public static Style<TChild> WithIsMouseCaptureWithin<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsMouseCaptureWithinProperty); return target;}
public static TChild WithIsMouseCaptureWithin<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.IsMouseCaptureWithinProperty); return target;}
public static Style<TChild> WithIsMouseCaptureWithin<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.IsMouseCaptureWithinProperty); return target;}

//IsStylusDirectlyOverProperty
public static TChild WithIsStylusDirectlyOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.IsStylusDirectlyOverProperty); return target;}
public static Style<TChild> WithIsStylusDirectlyOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.IsStylusDirectlyOverProperty); return target;}
public static TChild WithIsStylusDirectlyOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsStylusDirectlyOverProperty); return target;}
public static Style<TChild> WithIsStylusDirectlyOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsStylusDirectlyOverProperty); return target;}
public static TChild WithIsStylusDirectlyOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.IsStylusDirectlyOverProperty); return target;}
public static Style<TChild> WithIsStylusDirectlyOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.IsStylusDirectlyOverProperty); return target;}

//IsStylusCapturedProperty
public static TChild WithIsStylusCaptured<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.IsStylusCapturedProperty); return target;}
public static Style<TChild> WithIsStylusCaptured<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.IsStylusCapturedProperty); return target;}
public static TChild WithIsStylusCaptured<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsStylusCapturedProperty); return target;}
public static Style<TChild> WithIsStylusCaptured<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsStylusCapturedProperty); return target;}
public static TChild WithIsStylusCaptured<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.IsStylusCapturedProperty); return target;}
public static Style<TChild> WithIsStylusCaptured<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.IsStylusCapturedProperty); return target;}

//IsStylusCaptureWithinProperty
public static TChild WithIsStylusCaptureWithin<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.IsStylusCaptureWithinProperty); return target;}
public static Style<TChild> WithIsStylusCaptureWithin<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.IsStylusCaptureWithinProperty); return target;}
public static TChild WithIsStylusCaptureWithin<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsStylusCaptureWithinProperty); return target;}
public static Style<TChild> WithIsStylusCaptureWithin<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsStylusCaptureWithinProperty); return target;}
public static TChild WithIsStylusCaptureWithin<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.IsStylusCaptureWithinProperty); return target;}
public static Style<TChild> WithIsStylusCaptureWithin<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.IsStylusCaptureWithinProperty); return target;}

//IsKeyboardFocusedProperty
public static TChild WithIsKeyboardFocused<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.IsKeyboardFocusedProperty); return target;}
public static Style<TChild> WithIsKeyboardFocused<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.IsKeyboardFocusedProperty); return target;}
public static TChild WithIsKeyboardFocused<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsKeyboardFocusedProperty); return target;}
public static Style<TChild> WithIsKeyboardFocused<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsKeyboardFocusedProperty); return target;}
public static TChild WithIsKeyboardFocused<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.IsKeyboardFocusedProperty); return target;}
public static Style<TChild> WithIsKeyboardFocused<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.IsKeyboardFocusedProperty); return target;}

//AreAnyTouchesDirectlyOverProperty
public static TChild WithAreAnyTouchesDirectlyOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty); return target;}
public static Style<TChild> WithAreAnyTouchesDirectlyOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty); return target;}
public static TChild WithAreAnyTouchesDirectlyOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty); return target;}
public static Style<TChild> WithAreAnyTouchesDirectlyOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty); return target;}
public static TChild WithAreAnyTouchesDirectlyOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty); return target;}
public static Style<TChild> WithAreAnyTouchesDirectlyOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty); return target;}

//AreAnyTouchesOverProperty
public static TChild WithAreAnyTouchesOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.AreAnyTouchesOverProperty); return target;}
public static Style<TChild> WithAreAnyTouchesOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.AreAnyTouchesOverProperty); return target;}
public static TChild WithAreAnyTouchesOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.AreAnyTouchesOverProperty); return target;}
public static Style<TChild> WithAreAnyTouchesOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.AreAnyTouchesOverProperty); return target;}
public static TChild WithAreAnyTouchesOver<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.AreAnyTouchesOverProperty); return target;}
public static Style<TChild> WithAreAnyTouchesOver<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.AreAnyTouchesOverProperty); return target;}

//AreAnyTouchesCapturedProperty
public static TChild WithAreAnyTouchesCaptured<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.AreAnyTouchesCapturedProperty); return target;}
public static Style<TChild> WithAreAnyTouchesCaptured<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.AreAnyTouchesCapturedProperty); return target;}
public static TChild WithAreAnyTouchesCaptured<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.AreAnyTouchesCapturedProperty); return target;}
public static Style<TChild> WithAreAnyTouchesCaptured<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.AreAnyTouchesCapturedProperty); return target;}
public static TChild WithAreAnyTouchesCaptured<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.AreAnyTouchesCapturedProperty); return target;}
public static Style<TChild> WithAreAnyTouchesCaptured<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.AreAnyTouchesCapturedProperty); return target;}

//AreAnyTouchesCapturedWithinProperty
public static TChild WithAreAnyTouchesCapturedWithin<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty); return target;}
public static Style<TChild> WithAreAnyTouchesCapturedWithin<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty); return target;}
public static TChild WithAreAnyTouchesCapturedWithin<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty); return target;}
public static Style<TChild> WithAreAnyTouchesCapturedWithin<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty); return target;}
public static TChild WithAreAnyTouchesCapturedWithin<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty); return target;}
public static Style<TChild> WithAreAnyTouchesCapturedWithin<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty); return target;}

//IsFocusedProperty
public static TChild WithIsFocused<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.IsFocusedProperty); return target;}
public static Style<TChild> WithIsFocused<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.IsFocusedProperty); return target;}
public static TChild WithIsFocused<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsFocusedProperty); return target;}
public static Style<TChild> WithIsFocused<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsFocusedProperty); return target;}
public static TChild WithIsFocused<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.IsFocusedProperty); return target;}
public static Style<TChild> WithIsFocused<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.IsFocusedProperty); return target;}

//FocusableProperty
public static TChild WithFocusable<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.FocusableProperty); return target;}
public static Style<TChild> WithFocusable<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.FocusableProperty); return target;}
public static TChild WithFocusable<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.FocusableProperty); return target;}
public static Style<TChild> WithFocusable<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.FocusableProperty); return target;}
public static TChild WithFocusable<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.FocusableProperty); return target;}
public static Style<TChild> WithFocusable<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.FocusableProperty); return target;}

//AllowDropProperty
public static TChild WithAllowDrop<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.SetValue(target, System.Windows.ContentElement.AllowDropProperty); return target;}
public static Style<TChild> WithAllowDrop<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.ContentElement, TChild>? doNotUse = null) where TChild: System.Windows.ContentElement{value?.StyleSetter(target, System.Windows.ContentElement.AllowDropProperty); return target;}
public static TChild WithAllowDrop<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.AllowDropProperty); return target;}
public static Style<TChild> WithAllowDrop<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.AllowDropProperty); return target;}
public static TChild WithAllowDrop<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.AllowDropProperty); return target;}
public static Style<TChild> WithAllowDrop<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.AllowDropProperty); return target;}

//TransformProperty
public static TChild WithTransform<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Transform3D>? value, Disambigator<System.Windows.Media.Media3D.Visual3D, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.Visual3D{value?.SetValue(target, System.Windows.Media.Media3D.Visual3D.TransformProperty); return target;}
public static Style<TChild> WithTransform<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Transform3D>? value, Disambigator<System.Windows.Media.Media3D.Visual3D, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.Visual3D{value?.StyleSetter(target, System.Windows.Media.Media3D.Visual3D.TransformProperty); return target;}
public static TChild WithTransform<TChild>(this TChild target, ValueProxy<System.Windows.Media.Transform>? value, Disambigator<System.Windows.Media.Brush, TChild>? doNotUse = null) where TChild: System.Windows.Media.Brush{value?.SetValue(target, System.Windows.Media.Brush.TransformProperty); return target;}
public static Style<TChild> WithTransform<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Transform>? value, Disambigator<System.Windows.Media.Brush, TChild>? doNotUse = null) where TChild: System.Windows.Media.Brush{value?.StyleSetter(target, System.Windows.Media.Brush.TransformProperty); return target;}
public static TChild WithTransform<TChild>(this TChild target, ValueProxy<System.Windows.Media.Transform>? value, Disambigator<System.Windows.Media.Geometry, TChild>? doNotUse = null) where TChild: System.Windows.Media.Geometry{value?.SetValue(target, System.Windows.Media.Geometry.TransformProperty); return target;}
public static Style<TChild> WithTransform<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Transform>? value, Disambigator<System.Windows.Media.Geometry, TChild>? doNotUse = null) where TChild: System.Windows.Media.Geometry{value?.StyleSetter(target, System.Windows.Media.Geometry.TransformProperty); return target;}
public static TChild WithTransform<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Transform3D>? value, Disambigator<System.Windows.Media.Media3D.Camera, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.Camera{value?.SetValue(target, System.Windows.Media.Media3D.Camera.TransformProperty); return target;}
public static Style<TChild> WithTransform<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Transform3D>? value, Disambigator<System.Windows.Media.Media3D.Camera, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.Camera{value?.StyleSetter(target, System.Windows.Media.Media3D.Camera.TransformProperty); return target;}
public static System.Windows.Media.TextEffect WithTransform(this System.Windows.Media.TextEffect target, ValueProxy<System.Windows.Media.Transform>? value) {value?.SetValue(target, System.Windows.Media.TextEffect.TransformProperty); return target;}
public static Style<System.Windows.Media.TextEffect> WithTransform(this Style<System.Windows.Media.TextEffect> target, ValueProxy<System.Windows.Media.Transform>? value) {value?.StyleSetter(target, System.Windows.Media.TextEffect.TransformProperty); return target;}
public static System.Windows.Media.DrawingGroup WithTransform(this System.Windows.Media.DrawingGroup target, ValueProxy<System.Windows.Media.Transform>? value) {value?.SetValue(target, System.Windows.Media.DrawingGroup.TransformProperty); return target;}
public static Style<System.Windows.Media.DrawingGroup> WithTransform(this Style<System.Windows.Media.DrawingGroup> target, ValueProxy<System.Windows.Media.Transform>? value) {value?.StyleSetter(target, System.Windows.Media.DrawingGroup.TransformProperty); return target;}
public static TChild WithTransform<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Transform3D>? value, Disambigator<System.Windows.Media.Media3D.Model3D, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.Model3D{value?.SetValue(target, System.Windows.Media.Media3D.Model3D.TransformProperty); return target;}
public static Style<TChild> WithTransform<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Transform3D>? value, Disambigator<System.Windows.Media.Media3D.Model3D, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.Model3D{value?.StyleSetter(target, System.Windows.Media.Media3D.Model3D.TransformProperty); return target;}
public static TChild WithTransform<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Transform3D>? value, Disambigator<System.Windows.Media.Media3D.ModelVisual3D, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.ModelVisual3D{value?.SetValue(target, System.Windows.Media.Media3D.ModelVisual3D.TransformProperty); return target;}
public static Style<TChild> WithTransform<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Transform3D>? value, Disambigator<System.Windows.Media.Media3D.ModelVisual3D, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.ModelVisual3D{value?.StyleSetter(target, System.Windows.Media.Media3D.ModelVisual3D.TransformProperty); return target;}
public static System.Windows.Media.Imaging.TransformedBitmap WithTransform(this System.Windows.Media.Imaging.TransformedBitmap target, ValueProxy<System.Windows.Media.Transform>? value) {value?.SetValue(target, System.Windows.Media.Imaging.TransformedBitmap.TransformProperty); return target;}
public static Style<System.Windows.Media.Imaging.TransformedBitmap> WithTransform(this Style<System.Windows.Media.Imaging.TransformedBitmap> target, ValueProxy<System.Windows.Media.Transform>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.TransformedBitmap.TransformProperty); return target;}

//RenderTransformProperty
public static TChild WithRenderTransform<TChild>(this TChild target, ValueProxy<System.Windows.Media.Transform>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.RenderTransformProperty); return target;}
public static Style<TChild> WithRenderTransform<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Transform>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.RenderTransformProperty); return target;}

//RenderTransformOriginProperty
public static TChild WithRenderTransformOrigin<TChild>(this TChild target, ValueProxy<System.Windows.Point>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.RenderTransformOriginProperty); return target;}
public static Style<TChild> WithRenderTransformOrigin<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Point>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.RenderTransformOriginProperty); return target;}

//OpacityProperty
public static TChild WithOpacity<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.OpacityProperty); return target;}
public static Style<TChild> WithOpacity<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.OpacityProperty); return target;}
public static TChild WithOpacity<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Brush, TChild>? doNotUse = null) where TChild: System.Windows.Media.Brush{value?.SetValue(target, System.Windows.Media.Brush.OpacityProperty); return target;}
public static Style<TChild> WithOpacity<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Brush, TChild>? doNotUse = null) where TChild: System.Windows.Media.Brush{value?.StyleSetter(target, System.Windows.Media.Brush.OpacityProperty); return target;}
public static System.Windows.Media.DrawingGroup WithOpacity(this System.Windows.Media.DrawingGroup target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.DrawingGroup.OpacityProperty); return target;}
public static Style<System.Windows.Media.DrawingGroup> WithOpacity(this Style<System.Windows.Media.DrawingGroup> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.DrawingGroup.OpacityProperty); return target;}
public static System.Windows.Media.Effects.DropShadowBitmapEffect WithOpacity(this System.Windows.Media.Effects.DropShadowBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.DropShadowBitmapEffect.OpacityProperty); return target;}
public static Style<System.Windows.Media.Effects.DropShadowBitmapEffect> WithOpacity(this Style<System.Windows.Media.Effects.DropShadowBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.DropShadowBitmapEffect.OpacityProperty); return target;}
public static System.Windows.Media.Effects.DropShadowEffect WithOpacity(this System.Windows.Media.Effects.DropShadowEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.DropShadowEffect.OpacityProperty); return target;}
public static Style<System.Windows.Media.Effects.DropShadowEffect> WithOpacity(this Style<System.Windows.Media.Effects.DropShadowEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.DropShadowEffect.OpacityProperty); return target;}
public static System.Windows.Media.Effects.OuterGlowBitmapEffect WithOpacity(this System.Windows.Media.Effects.OuterGlowBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.OuterGlowBitmapEffect.OpacityProperty); return target;}
public static Style<System.Windows.Media.Effects.OuterGlowBitmapEffect> WithOpacity(this Style<System.Windows.Media.Effects.OuterGlowBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.OuterGlowBitmapEffect.OpacityProperty); return target;}

//OpacityMaskProperty
public static TChild WithOpacityMask<TChild>(this TChild target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.OpacityMaskProperty); return target;}
public static Style<TChild> WithOpacityMask<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Brush>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.OpacityMaskProperty); return target;}
public static System.Windows.Media.DrawingGroup WithOpacityMask(this System.Windows.Media.DrawingGroup target, ValueProxy<System.Windows.Media.Brush>? value) {value?.SetValue(target, System.Windows.Media.DrawingGroup.OpacityMaskProperty); return target;}
public static Style<System.Windows.Media.DrawingGroup> WithOpacityMask(this Style<System.Windows.Media.DrawingGroup> target, ValueProxy<System.Windows.Media.Brush>? value) {value?.StyleSetter(target, System.Windows.Media.DrawingGroup.OpacityMaskProperty); return target;}

//BitmapEffectProperty
public static TChild WithBitmapEffect<TChild>(this TChild target, ValueProxy<System.Windows.Media.Effects.BitmapEffect>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.BitmapEffectProperty); return target;}
public static Style<TChild> WithBitmapEffect<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Effects.BitmapEffect>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.BitmapEffectProperty); return target;}
public static System.Windows.Media.DrawingGroup WithBitmapEffect(this System.Windows.Media.DrawingGroup target, ValueProxy<System.Windows.Media.Effects.BitmapEffect>? value) {value?.SetValue(target, System.Windows.Media.DrawingGroup.BitmapEffectProperty); return target;}
public static Style<System.Windows.Media.DrawingGroup> WithBitmapEffect(this Style<System.Windows.Media.DrawingGroup> target, ValueProxy<System.Windows.Media.Effects.BitmapEffect>? value) {value?.StyleSetter(target, System.Windows.Media.DrawingGroup.BitmapEffectProperty); return target;}

//EffectProperty
public static TChild WithEffect<TChild>(this TChild target, ValueProxy<System.Windows.Media.Effects.Effect>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.EffectProperty); return target;}
public static Style<TChild> WithEffect<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Effects.Effect>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.EffectProperty); return target;}

//BitmapEffectInputProperty
public static TChild WithBitmapEffectInput<TChild>(this TChild target, ValueProxy<System.Windows.Media.Effects.BitmapEffectInput>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.BitmapEffectInputProperty); return target;}
public static Style<TChild> WithBitmapEffectInput<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Effects.BitmapEffectInput>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.BitmapEffectInputProperty); return target;}
public static System.Windows.Media.DrawingGroup WithBitmapEffectInput(this System.Windows.Media.DrawingGroup target, ValueProxy<System.Windows.Media.Effects.BitmapEffectInput>? value) {value?.SetValue(target, System.Windows.Media.DrawingGroup.BitmapEffectInputProperty); return target;}
public static Style<System.Windows.Media.DrawingGroup> WithBitmapEffectInput(this Style<System.Windows.Media.DrawingGroup> target, ValueProxy<System.Windows.Media.Effects.BitmapEffectInput>? value) {value?.StyleSetter(target, System.Windows.Media.DrawingGroup.BitmapEffectInputProperty); return target;}

//CacheModeProperty
public static TChild WithCacheMode<TChild>(this TChild target, ValueProxy<System.Windows.Media.CacheMode>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.CacheModeProperty); return target;}
public static Style<TChild> WithCacheMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.CacheMode>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.CacheModeProperty); return target;}
public static System.Windows.Media.Media3D.Viewport2DVisual3D WithCacheMode(this System.Windows.Media.Media3D.Viewport2DVisual3D target, ValueProxy<System.Windows.Media.CacheMode>? value) {value?.SetValue(target, System.Windows.Media.Media3D.Viewport2DVisual3D.CacheModeProperty); return target;}
public static Style<System.Windows.Media.Media3D.Viewport2DVisual3D> WithCacheMode(this Style<System.Windows.Media.Media3D.Viewport2DVisual3D> target, ValueProxy<System.Windows.Media.CacheMode>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.Viewport2DVisual3D.CacheModeProperty); return target;}

//UidProperty
public static TChild WithUid<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.UidProperty); return target;}
public static Style<TChild> WithUid<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.UidProperty); return target;}

//ClipToBoundsProperty
public static TChild WithClipToBounds<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.ClipToBoundsProperty); return target;}
public static Style<TChild> WithClipToBounds<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.ClipToBoundsProperty); return target;}

//ClipProperty
public static TChild WithClip<TChild>(this TChild target, ValueProxy<System.Windows.Media.Geometry>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.ClipProperty); return target;}
public static Style<TChild> WithClip<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Geometry>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.ClipProperty); return target;}
public static System.Windows.Media.TextEffect WithClip(this System.Windows.Media.TextEffect target, ValueProxy<System.Windows.Media.Geometry>? value) {value?.SetValue(target, System.Windows.Media.TextEffect.ClipProperty); return target;}
public static Style<System.Windows.Media.TextEffect> WithClip(this Style<System.Windows.Media.TextEffect> target, ValueProxy<System.Windows.Media.Geometry>? value) {value?.StyleSetter(target, System.Windows.Media.TextEffect.ClipProperty); return target;}

//SnapsToDevicePixelsProperty
public static TChild WithSnapsToDevicePixels<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.SnapsToDevicePixelsProperty); return target;}
public static Style<TChild> WithSnapsToDevicePixels<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.SnapsToDevicePixelsProperty); return target;}
public static System.Windows.Media.BitmapCache WithSnapsToDevicePixels(this System.Windows.Media.BitmapCache target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Media.BitmapCache.SnapsToDevicePixelsProperty); return target;}
public static Style<System.Windows.Media.BitmapCache> WithSnapsToDevicePixels(this Style<System.Windows.Media.BitmapCache> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Media.BitmapCache.SnapsToDevicePixelsProperty); return target;}

//IsHitTestVisibleProperty
public static TChild WithIsHitTestVisible<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsHitTestVisibleProperty); return target;}
public static Style<TChild> WithIsHitTestVisible<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsHitTestVisibleProperty); return target;}
public static TChild WithIsHitTestVisible<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.IsHitTestVisibleProperty); return target;}
public static Style<TChild> WithIsHitTestVisible<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.IsHitTestVisibleProperty); return target;}

//IsVisibleProperty
public static TChild WithIsVisible<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsVisibleProperty); return target;}
public static Style<TChild> WithIsVisible<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsVisibleProperty); return target;}
public static TChild WithIsVisible<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.SetValue(target, System.Windows.UIElement3D.IsVisibleProperty); return target;}
public static Style<TChild> WithIsVisible<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement3D, TChild>? doNotUse = null) where TChild: System.Windows.UIElement3D{value?.StyleSetter(target, System.Windows.UIElement3D.IsVisibleProperty); return target;}

//IsManipulationEnabledProperty
public static TChild WithIsManipulationEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.SetValue(target, System.Windows.UIElement.IsManipulationEnabledProperty); return target;}
public static Style<TChild> WithIsManipulationEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement{value?.StyleSetter(target, System.Windows.UIElement.IsManipulationEnabledProperty); return target;}

//BaseUriProperty

//RelativeTransformProperty
public static TChild WithRelativeTransform<TChild>(this TChild target, ValueProxy<System.Windows.Media.Transform>? value, Disambigator<System.Windows.Media.Brush, TChild>? doNotUse = null) where TChild: System.Windows.Media.Brush{value?.SetValue(target, System.Windows.Media.Brush.RelativeTransformProperty); return target;}
public static Style<TChild> WithRelativeTransform<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Transform>? value, Disambigator<System.Windows.Media.Brush, TChild>? doNotUse = null) where TChild: System.Windows.Media.Brush{value?.StyleSetter(target, System.Windows.Media.Brush.RelativeTransformProperty); return target;}

//ColorProperty
public static System.Windows.Media.SolidColorBrush WithColor(this System.Windows.Media.SolidColorBrush target, ValueProxy<System.Windows.Media.Color>? value) {value?.SetValue(target, System.Windows.Media.SolidColorBrush.ColorProperty); return target;}
public static Style<System.Windows.Media.SolidColorBrush> WithColor(this Style<System.Windows.Media.SolidColorBrush> target, ValueProxy<System.Windows.Media.Color>? value) {value?.StyleSetter(target, System.Windows.Media.SolidColorBrush.ColorProperty); return target;}
public static System.Windows.Media.GradientStop WithColor(this System.Windows.Media.GradientStop target, ValueProxy<System.Windows.Media.Color>? value) {value?.SetValue(target, System.Windows.Media.GradientStop.ColorProperty); return target;}
public static Style<System.Windows.Media.GradientStop> WithColor(this Style<System.Windows.Media.GradientStop> target, ValueProxy<System.Windows.Media.Color>? value) {value?.StyleSetter(target, System.Windows.Media.GradientStop.ColorProperty); return target;}
public static TChild WithColor<TChild>(this TChild target, ValueProxy<System.Windows.Media.Color>? value, Disambigator<System.Windows.Media.Media3D.Light, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.Light{value?.SetValue(target, System.Windows.Media.Media3D.Light.ColorProperty); return target;}
public static Style<TChild> WithColor<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Color>? value, Disambigator<System.Windows.Media.Media3D.Light, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.Light{value?.StyleSetter(target, System.Windows.Media.Media3D.Light.ColorProperty); return target;}
public static System.Windows.Media.Media3D.DiffuseMaterial WithColor(this System.Windows.Media.Media3D.DiffuseMaterial target, ValueProxy<System.Windows.Media.Color>? value) {value?.SetValue(target, System.Windows.Media.Media3D.DiffuseMaterial.ColorProperty); return target;}
public static Style<System.Windows.Media.Media3D.DiffuseMaterial> WithColor(this Style<System.Windows.Media.Media3D.DiffuseMaterial> target, ValueProxy<System.Windows.Media.Color>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.DiffuseMaterial.ColorProperty); return target;}
public static System.Windows.Media.Media3D.EmissiveMaterial WithColor(this System.Windows.Media.Media3D.EmissiveMaterial target, ValueProxy<System.Windows.Media.Color>? value) {value?.SetValue(target, System.Windows.Media.Media3D.EmissiveMaterial.ColorProperty); return target;}
public static Style<System.Windows.Media.Media3D.EmissiveMaterial> WithColor(this Style<System.Windows.Media.Media3D.EmissiveMaterial> target, ValueProxy<System.Windows.Media.Color>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.EmissiveMaterial.ColorProperty); return target;}
public static System.Windows.Media.Media3D.SpecularMaterial WithColor(this System.Windows.Media.Media3D.SpecularMaterial target, ValueProxy<System.Windows.Media.Color>? value) {value?.SetValue(target, System.Windows.Media.Media3D.SpecularMaterial.ColorProperty); return target;}
public static Style<System.Windows.Media.Media3D.SpecularMaterial> WithColor(this Style<System.Windows.Media.Media3D.SpecularMaterial> target, ValueProxy<System.Windows.Media.Color>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.SpecularMaterial.ColorProperty); return target;}
public static System.Windows.Media.Effects.DropShadowBitmapEffect WithColor(this System.Windows.Media.Effects.DropShadowBitmapEffect target, ValueProxy<System.Windows.Media.Color>? value) {value?.SetValue(target, System.Windows.Media.Effects.DropShadowBitmapEffect.ColorProperty); return target;}
public static Style<System.Windows.Media.Effects.DropShadowBitmapEffect> WithColor(this Style<System.Windows.Media.Effects.DropShadowBitmapEffect> target, ValueProxy<System.Windows.Media.Color>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.DropShadowBitmapEffect.ColorProperty); return target;}
public static System.Windows.Media.Effects.DropShadowEffect WithColor(this System.Windows.Media.Effects.DropShadowEffect target, ValueProxy<System.Windows.Media.Color>? value) {value?.SetValue(target, System.Windows.Media.Effects.DropShadowEffect.ColorProperty); return target;}
public static Style<System.Windows.Media.Effects.DropShadowEffect> WithColor(this Style<System.Windows.Media.Effects.DropShadowEffect> target, ValueProxy<System.Windows.Media.Color>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.DropShadowEffect.ColorProperty); return target;}

//MatrixProperty
public static System.Windows.Media.MatrixTransform WithMatrix(this System.Windows.Media.MatrixTransform target, ValueProxy<System.Windows.Media.Matrix>? value) {value?.SetValue(target, System.Windows.Media.MatrixTransform.MatrixProperty); return target;}
public static Style<System.Windows.Media.MatrixTransform> WithMatrix(this Style<System.Windows.Media.MatrixTransform> target, ValueProxy<System.Windows.Media.Matrix>? value) {value?.StyleSetter(target, System.Windows.Media.MatrixTransform.MatrixProperty); return target;}
public static System.Windows.Media.Media3D.MatrixTransform3D WithMatrix(this System.Windows.Media.Media3D.MatrixTransform3D target, ValueProxy<System.Windows.Media.Media3D.Matrix3D>? value) {value?.SetValue(target, System.Windows.Media.Media3D.MatrixTransform3D.MatrixProperty); return target;}
public static Style<System.Windows.Media.Media3D.MatrixTransform3D> WithMatrix(this Style<System.Windows.Media.Media3D.MatrixTransform3D> target, ValueProxy<System.Windows.Media.Media3D.Matrix3D>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.MatrixTransform3D.MatrixProperty); return target;}

//FiguresProperty
public static System.Windows.Media.PathGeometry WithFigures(this System.Windows.Media.PathGeometry target, ValueProxy<System.Windows.Media.PathFigureCollection>? value) {value?.SetValue(target, System.Windows.Media.PathGeometry.FiguresProperty); return target;}
public static Style<System.Windows.Media.PathGeometry> WithFigures(this Style<System.Windows.Media.PathGeometry> target, ValueProxy<System.Windows.Media.PathFigureCollection>? value) {value?.StyleSetter(target, System.Windows.Media.PathGeometry.FiguresProperty); return target;}

//VisualProperty
public static System.Windows.Media.Media3D.Viewport2DVisual3D WithVisual(this System.Windows.Media.Media3D.Viewport2DVisual3D target, ValueProxy<System.Windows.Media.Visual>? value) {value?.SetValue(target, System.Windows.Media.Media3D.Viewport2DVisual3D.VisualProperty); return target;}
public static Style<System.Windows.Media.Media3D.Viewport2DVisual3D> WithVisual(this Style<System.Windows.Media.Media3D.Viewport2DVisual3D> target, ValueProxy<System.Windows.Media.Visual>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.Viewport2DVisual3D.VisualProperty); return target;}
public static System.Windows.Media.VisualBrush WithVisual(this System.Windows.Media.VisualBrush target, ValueProxy<System.Windows.Media.Visual>? value) {value?.SetValue(target, System.Windows.Media.VisualBrush.VisualProperty); return target;}
public static Style<System.Windows.Media.VisualBrush> WithVisual(this Style<System.Windows.Media.VisualBrush> target, ValueProxy<System.Windows.Media.Visual>? value) {value?.StyleSetter(target, System.Windows.Media.VisualBrush.VisualProperty); return target;}

//GeometryProperty
public static System.Windows.Media.Media3D.Viewport2DVisual3D WithGeometry(this System.Windows.Media.Media3D.Viewport2DVisual3D target, ValueProxy<System.Windows.Media.Media3D.Geometry3D>? value) {value?.SetValue(target, System.Windows.Media.Media3D.Viewport2DVisual3D.GeometryProperty); return target;}
public static Style<System.Windows.Media.Media3D.Viewport2DVisual3D> WithGeometry(this Style<System.Windows.Media.Media3D.Viewport2DVisual3D> target, ValueProxy<System.Windows.Media.Media3D.Geometry3D>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.Viewport2DVisual3D.GeometryProperty); return target;}
public static System.Windows.Media.GeometryDrawing WithGeometry(this System.Windows.Media.GeometryDrawing target, ValueProxy<System.Windows.Media.Geometry>? value) {value?.SetValue(target, System.Windows.Media.GeometryDrawing.GeometryProperty); return target;}
public static Style<System.Windows.Media.GeometryDrawing> WithGeometry(this Style<System.Windows.Media.GeometryDrawing> target, ValueProxy<System.Windows.Media.Geometry>? value) {value?.StyleSetter(target, System.Windows.Media.GeometryDrawing.GeometryProperty); return target;}
public static System.Windows.Media.Media3D.GeometryModel3D WithGeometry(this System.Windows.Media.Media3D.GeometryModel3D target, ValueProxy<System.Windows.Media.Media3D.Geometry3D>? value) {value?.SetValue(target, System.Windows.Media.Media3D.GeometryModel3D.GeometryProperty); return target;}
public static Style<System.Windows.Media.Media3D.GeometryModel3D> WithGeometry(this Style<System.Windows.Media.Media3D.GeometryModel3D> target, ValueProxy<System.Windows.Media.Media3D.Geometry3D>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.GeometryModel3D.GeometryProperty); return target;}

//MaterialProperty
public static System.Windows.Media.Media3D.Viewport2DVisual3D WithMaterial(this System.Windows.Media.Media3D.Viewport2DVisual3D target, ValueProxy<System.Windows.Media.Media3D.Material>? value) {value?.SetValue(target, System.Windows.Media.Media3D.Viewport2DVisual3D.MaterialProperty); return target;}
public static Style<System.Windows.Media.Media3D.Viewport2DVisual3D> WithMaterial(this Style<System.Windows.Media.Media3D.Viewport2DVisual3D> target, ValueProxy<System.Windows.Media.Media3D.Material>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.Viewport2DVisual3D.MaterialProperty); return target;}
public static System.Windows.Media.Media3D.GeometryModel3D WithMaterial(this System.Windows.Media.Media3D.GeometryModel3D target, ValueProxy<System.Windows.Media.Media3D.Material>? value) {value?.SetValue(target, System.Windows.Media.Media3D.GeometryModel3D.MaterialProperty); return target;}
public static Style<System.Windows.Media.Media3D.GeometryModel3D> WithMaterial(this Style<System.Windows.Media.Media3D.GeometryModel3D> target, ValueProxy<System.Windows.Media.Media3D.Material>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.GeometryModel3D.MaterialProperty); return target;}

//IsVisualHostMaterialProperty
public static TChild WithViewport2DVisual3D_IsVisualHostMaterial<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Media3D.Material, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.Material{value?.SetValue(target, System.Windows.Media.Media3D.Viewport2DVisual3D.IsVisualHostMaterialProperty); return target;}
public static Style<TChild> WithViewport2DVisual3D_IsVisualHostMaterial<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Media3D.Material, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.Material{value?.StyleSetter(target, System.Windows.Media.Media3D.Viewport2DVisual3D.IsVisualHostMaterialProperty); return target;}

//PositionsProperty
public static System.Windows.Media.Media3D.MeshGeometry3D WithPositions(this System.Windows.Media.Media3D.MeshGeometry3D target, ValueProxy<System.Windows.Media.Media3D.Point3DCollection>? value) {value?.SetValue(target, System.Windows.Media.Media3D.MeshGeometry3D.PositionsProperty); return target;}
public static Style<System.Windows.Media.Media3D.MeshGeometry3D> WithPositions(this Style<System.Windows.Media.Media3D.MeshGeometry3D> target, ValueProxy<System.Windows.Media.Media3D.Point3DCollection>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.MeshGeometry3D.PositionsProperty); return target;}

//NormalsProperty
public static System.Windows.Media.Media3D.MeshGeometry3D WithNormals(this System.Windows.Media.Media3D.MeshGeometry3D target, ValueProxy<System.Windows.Media.Media3D.Vector3DCollection>? value) {value?.SetValue(target, System.Windows.Media.Media3D.MeshGeometry3D.NormalsProperty); return target;}
public static Style<System.Windows.Media.Media3D.MeshGeometry3D> WithNormals(this Style<System.Windows.Media.Media3D.MeshGeometry3D> target, ValueProxy<System.Windows.Media.Media3D.Vector3DCollection>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.MeshGeometry3D.NormalsProperty); return target;}

//TextureCoordinatesProperty
public static System.Windows.Media.Media3D.MeshGeometry3D WithTextureCoordinates(this System.Windows.Media.Media3D.MeshGeometry3D target, ValueProxy<System.Windows.Media.PointCollection>? value) {value?.SetValue(target, System.Windows.Media.Media3D.MeshGeometry3D.TextureCoordinatesProperty); return target;}
public static Style<System.Windows.Media.Media3D.MeshGeometry3D> WithTextureCoordinates(this Style<System.Windows.Media.Media3D.MeshGeometry3D> target, ValueProxy<System.Windows.Media.PointCollection>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.MeshGeometry3D.TextureCoordinatesProperty); return target;}

//TriangleIndicesProperty
public static System.Windows.Media.Media3D.MeshGeometry3D WithTriangleIndices(this System.Windows.Media.Media3D.MeshGeometry3D target, ValueProxy<System.Windows.Media.Int32Collection>? value) {value?.SetValue(target, System.Windows.Media.Media3D.MeshGeometry3D.TriangleIndicesProperty); return target;}
public static Style<System.Windows.Media.Media3D.MeshGeometry3D> WithTriangleIndices(this Style<System.Windows.Media.Media3D.MeshGeometry3D> target, ValueProxy<System.Windows.Media.Int32Collection>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.MeshGeometry3D.TriangleIndicesProperty); return target;}

//ViewportProperty
public static System.Windows.Media.Media3D.Viewport3DVisual WithViewport(this System.Windows.Media.Media3D.Viewport3DVisual target, ValueProxy<System.Windows.Rect>? value) {value?.SetValue(target, System.Windows.Media.Media3D.Viewport3DVisual.ViewportProperty); return target;}
public static Style<System.Windows.Media.Media3D.Viewport3DVisual> WithViewport(this Style<System.Windows.Media.Media3D.Viewport3DVisual> target, ValueProxy<System.Windows.Rect>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.Viewport3DVisual.ViewportProperty); return target;}
public static TChild WithViewport<TChild>(this TChild target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.SetValue(target, System.Windows.Media.TileBrush.ViewportProperty); return target;}
public static Style<TChild> WithViewport<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.StyleSetter(target, System.Windows.Media.TileBrush.ViewportProperty); return target;}

//CultureSourceProperty
public static TChild WithNumberSubstitution_CultureSource<TChild>(this TChild target, ValueProxy<System.Windows.Media.NumberCultureSource>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.NumberSubstitution.CultureSourceProperty); return target;}
public static Style<TChild> WithNumberSubstitution_CultureSource<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.NumberCultureSource>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.NumberSubstitution.CultureSourceProperty); return target;}

//CultureOverrideProperty
public static TChild WithNumberSubstitution_CultureOverride<TChild>(this TChild target, ValueProxy<System.Globalization.CultureInfo>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.NumberSubstitution.CultureOverrideProperty); return target;}
public static Style<TChild> WithNumberSubstitution_CultureOverride<TChild>(this Style<TChild> target, ValueProxy<System.Globalization.CultureInfo>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.NumberSubstitution.CultureOverrideProperty); return target;}

//SubstitutionProperty
public static TChild WithNumberSubstitution_Substitution<TChild>(this TChild target, ValueProxy<System.Windows.Media.NumberSubstitutionMethod>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.NumberSubstitution.SubstitutionProperty); return target;}

public static Style<TChild> WithNumberSubstitution_Substitution<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.NumberSubstitutionMethod>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.NumberSubstitution.SubstitutionProperty); return target;}

//PenProperty
public static System.Windows.TextDecoration WithPen(this System.Windows.TextDecoration target, ValueProxy<System.Windows.Media.Pen>? value) {value?.SetValue(target, System.Windows.TextDecoration.PenProperty); return target;}
public static Style<System.Windows.TextDecoration> WithPen(this Style<System.Windows.TextDecoration> target, ValueProxy<System.Windows.Media.Pen>? value) {value?.StyleSetter(target, System.Windows.TextDecoration.PenProperty); return target;}
public static System.Windows.Media.GeometryDrawing WithPen(this System.Windows.Media.GeometryDrawing target, ValueProxy<System.Windows.Media.Pen>? value) {value?.SetValue(target, System.Windows.Media.GeometryDrawing.PenProperty); return target;}
public static Style<System.Windows.Media.GeometryDrawing> WithPen(this Style<System.Windows.Media.GeometryDrawing> target, ValueProxy<System.Windows.Media.Pen>? value) {value?.StyleSetter(target, System.Windows.Media.GeometryDrawing.PenProperty); return target;}

//PenOffsetProperty
public static System.Windows.TextDecoration WithPenOffset(this System.Windows.TextDecoration target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.TextDecoration.PenOffsetProperty); return target;}
public static Style<System.Windows.TextDecoration> WithPenOffset(this Style<System.Windows.TextDecoration> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.TextDecoration.PenOffsetProperty); return target;}

//PenOffsetUnitProperty
public static System.Windows.TextDecoration WithPenOffsetUnit(this System.Windows.TextDecoration target, ValueProxy<System.Windows.TextDecorationUnit>? value) {value?.SetValue(target, System.Windows.TextDecoration.PenOffsetUnitProperty); return target;}
public static Style<System.Windows.TextDecoration> WithPenOffsetUnit(this Style<System.Windows.TextDecoration> target, ValueProxy<System.Windows.TextDecorationUnit>? value) {value?.StyleSetter(target, System.Windows.TextDecoration.PenOffsetUnitProperty); return target;}

//PenThicknessUnitProperty
public static System.Windows.TextDecoration WithPenThicknessUnit(this System.Windows.TextDecoration target, ValueProxy<System.Windows.TextDecorationUnit>? value) {value?.SetValue(target, System.Windows.TextDecoration.PenThicknessUnitProperty); return target;}
public static Style<System.Windows.TextDecoration> WithPenThicknessUnit(this Style<System.Windows.TextDecoration> target, ValueProxy<System.Windows.TextDecorationUnit>? value) {value?.StyleSetter(target, System.Windows.TextDecoration.PenThicknessUnitProperty); return target;}

//LocationProperty
public static System.Windows.TextDecoration WithLocation(this System.Windows.TextDecoration target, ValueProxy<System.Windows.TextDecorationLocation>? value) {value?.SetValue(target, System.Windows.TextDecoration.LocationProperty); return target;}
public static Style<System.Windows.TextDecoration> WithLocation(this Style<System.Windows.TextDecoration> target, ValueProxy<System.Windows.TextDecorationLocation>? value) {value?.StyleSetter(target, System.Windows.TextDecoration.LocationProperty); return target;}

//ScaleXProperty
public static System.Windows.Media.ScaleTransform WithScaleX(this System.Windows.Media.ScaleTransform target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.ScaleTransform.ScaleXProperty); return target;}
public static Style<System.Windows.Media.ScaleTransform> WithScaleX(this Style<System.Windows.Media.ScaleTransform> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.ScaleTransform.ScaleXProperty); return target;}
public static System.Windows.Media.Media3D.ScaleTransform3D WithScaleX(this System.Windows.Media.Media3D.ScaleTransform3D target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.ScaleTransform3D.ScaleXProperty); return target;}
public static Style<System.Windows.Media.Media3D.ScaleTransform3D> WithScaleX(this Style<System.Windows.Media.Media3D.ScaleTransform3D> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.ScaleTransform3D.ScaleXProperty); return target;}

//ScaleYProperty
public static System.Windows.Media.ScaleTransform WithScaleY(this System.Windows.Media.ScaleTransform target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.ScaleTransform.ScaleYProperty); return target;}
public static Style<System.Windows.Media.ScaleTransform> WithScaleY(this Style<System.Windows.Media.ScaleTransform> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.ScaleTransform.ScaleYProperty); return target;}
public static System.Windows.Media.Media3D.ScaleTransform3D WithScaleY(this System.Windows.Media.Media3D.ScaleTransform3D target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.ScaleTransform3D.ScaleYProperty); return target;}
public static Style<System.Windows.Media.Media3D.ScaleTransform3D> WithScaleY(this Style<System.Windows.Media.Media3D.ScaleTransform3D> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.ScaleTransform3D.ScaleYProperty); return target;}

//CenterXProperty
public static System.Windows.Media.ScaleTransform WithCenterX(this System.Windows.Media.ScaleTransform target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.ScaleTransform.CenterXProperty); return target;}
public static Style<System.Windows.Media.ScaleTransform> WithCenterX(this Style<System.Windows.Media.ScaleTransform> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.ScaleTransform.CenterXProperty); return target;}
public static System.Windows.Media.RotateTransform WithCenterX(this System.Windows.Media.RotateTransform target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.RotateTransform.CenterXProperty); return target;}
public static Style<System.Windows.Media.RotateTransform> WithCenterX(this Style<System.Windows.Media.RotateTransform> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.RotateTransform.CenterXProperty); return target;}
public static System.Windows.Media.SkewTransform WithCenterX(this System.Windows.Media.SkewTransform target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.SkewTransform.CenterXProperty); return target;}
public static Style<System.Windows.Media.SkewTransform> WithCenterX(this Style<System.Windows.Media.SkewTransform> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.SkewTransform.CenterXProperty); return target;}
public static System.Windows.Media.Media3D.RotateTransform3D WithCenterX(this System.Windows.Media.Media3D.RotateTransform3D target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.RotateTransform3D.CenterXProperty); return target;}
public static Style<System.Windows.Media.Media3D.RotateTransform3D> WithCenterX(this Style<System.Windows.Media.Media3D.RotateTransform3D> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.RotateTransform3D.CenterXProperty); return target;}
public static System.Windows.Media.Media3D.ScaleTransform3D WithCenterX(this System.Windows.Media.Media3D.ScaleTransform3D target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.ScaleTransform3D.CenterXProperty); return target;}
public static Style<System.Windows.Media.Media3D.ScaleTransform3D> WithCenterX(this Style<System.Windows.Media.Media3D.ScaleTransform3D> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.ScaleTransform3D.CenterXProperty); return target;}

//CenterYProperty
public static System.Windows.Media.ScaleTransform WithCenterY(this System.Windows.Media.ScaleTransform target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.ScaleTransform.CenterYProperty); return target;}
public static Style<System.Windows.Media.ScaleTransform> WithCenterY(this Style<System.Windows.Media.ScaleTransform> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.ScaleTransform.CenterYProperty); return target;}
public static System.Windows.Media.RotateTransform WithCenterY(this System.Windows.Media.RotateTransform target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.RotateTransform.CenterYProperty); return target;}
public static Style<System.Windows.Media.RotateTransform> WithCenterY(this Style<System.Windows.Media.RotateTransform> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.RotateTransform.CenterYProperty); return target;}
public static System.Windows.Media.SkewTransform WithCenterY(this System.Windows.Media.SkewTransform target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.SkewTransform.CenterYProperty); return target;}
public static Style<System.Windows.Media.SkewTransform> WithCenterY(this Style<System.Windows.Media.SkewTransform> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.SkewTransform.CenterYProperty); return target;}
public static System.Windows.Media.Media3D.RotateTransform3D WithCenterY(this System.Windows.Media.Media3D.RotateTransform3D target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.RotateTransform3D.CenterYProperty); return target;}
public static Style<System.Windows.Media.Media3D.RotateTransform3D> WithCenterY(this Style<System.Windows.Media.Media3D.RotateTransform3D> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.RotateTransform3D.CenterYProperty); return target;}
public static System.Windows.Media.Media3D.ScaleTransform3D WithCenterY(this System.Windows.Media.Media3D.ScaleTransform3D target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.ScaleTransform3D.CenterYProperty); return target;}
public static Style<System.Windows.Media.Media3D.ScaleTransform3D> WithCenterY(this Style<System.Windows.Media.Media3D.ScaleTransform3D> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.ScaleTransform3D.CenterYProperty); return target;}

//XProperty
public static System.Windows.Media.TranslateTransform WithX(this System.Windows.Media.TranslateTransform target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.TranslateTransform.XProperty); return target;}
public static Style<System.Windows.Media.TranslateTransform> WithX(this Style<System.Windows.Media.TranslateTransform> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.TranslateTransform.XProperty); return target;}

//YProperty
public static System.Windows.Media.TranslateTransform WithY(this System.Windows.Media.TranslateTransform target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.TranslateTransform.YProperty); return target;}
public static Style<System.Windows.Media.TranslateTransform> WithY(this Style<System.Windows.Media.TranslateTransform> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.TranslateTransform.YProperty); return target;}

//BrushProperty
public static System.Windows.Media.Pen WithBrush(this System.Windows.Media.Pen target, ValueProxy<System.Windows.Media.Brush>? value) {value?.SetValue(target, System.Windows.Media.Pen.BrushProperty); return target;}
public static Style<System.Windows.Media.Pen> WithBrush(this Style<System.Windows.Media.Pen> target, ValueProxy<System.Windows.Media.Brush>? value) {value?.StyleSetter(target, System.Windows.Media.Pen.BrushProperty); return target;}
public static System.Windows.Media.GeometryDrawing WithBrush(this System.Windows.Media.GeometryDrawing target, ValueProxy<System.Windows.Media.Brush>? value) {value?.SetValue(target, System.Windows.Media.GeometryDrawing.BrushProperty); return target;}
public static Style<System.Windows.Media.GeometryDrawing> WithBrush(this Style<System.Windows.Media.GeometryDrawing> target, ValueProxy<System.Windows.Media.Brush>? value) {value?.StyleSetter(target, System.Windows.Media.GeometryDrawing.BrushProperty); return target;}
public static System.Windows.Media.Media3D.DiffuseMaterial WithBrush(this System.Windows.Media.Media3D.DiffuseMaterial target, ValueProxy<System.Windows.Media.Brush>? value) {value?.SetValue(target, System.Windows.Media.Media3D.DiffuseMaterial.BrushProperty); return target;}
public static Style<System.Windows.Media.Media3D.DiffuseMaterial> WithBrush(this Style<System.Windows.Media.Media3D.DiffuseMaterial> target, ValueProxy<System.Windows.Media.Brush>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.DiffuseMaterial.BrushProperty); return target;}
public static System.Windows.Media.Media3D.EmissiveMaterial WithBrush(this System.Windows.Media.Media3D.EmissiveMaterial target, ValueProxy<System.Windows.Media.Brush>? value) {value?.SetValue(target, System.Windows.Media.Media3D.EmissiveMaterial.BrushProperty); return target;}
public static Style<System.Windows.Media.Media3D.EmissiveMaterial> WithBrush(this Style<System.Windows.Media.Media3D.EmissiveMaterial> target, ValueProxy<System.Windows.Media.Brush>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.EmissiveMaterial.BrushProperty); return target;}
public static System.Windows.Media.Media3D.SpecularMaterial WithBrush(this System.Windows.Media.Media3D.SpecularMaterial target, ValueProxy<System.Windows.Media.Brush>? value) {value?.SetValue(target, System.Windows.Media.Media3D.SpecularMaterial.BrushProperty); return target;}
public static Style<System.Windows.Media.Media3D.SpecularMaterial> WithBrush(this Style<System.Windows.Media.Media3D.SpecularMaterial> target, ValueProxy<System.Windows.Media.Brush>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.SpecularMaterial.BrushProperty); return target;}

//ThicknessProperty
public static System.Windows.Media.Pen WithThickness(this System.Windows.Media.Pen target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Pen.ThicknessProperty); return target;}
public static Style<System.Windows.Media.Pen> WithThickness(this Style<System.Windows.Media.Pen> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Pen.ThicknessProperty); return target;}

//StartLineCapProperty
public static System.Windows.Media.Pen WithStartLineCap(this System.Windows.Media.Pen target, ValueProxy<System.Windows.Media.PenLineCap>? value) {value?.SetValue(target, System.Windows.Media.Pen.StartLineCapProperty); return target;}
public static Style<System.Windows.Media.Pen> WithStartLineCap(this Style<System.Windows.Media.Pen> target, ValueProxy<System.Windows.Media.PenLineCap>? value) {value?.StyleSetter(target, System.Windows.Media.Pen.StartLineCapProperty); return target;}

//EndLineCapProperty
public static System.Windows.Media.Pen WithEndLineCap(this System.Windows.Media.Pen target, ValueProxy<System.Windows.Media.PenLineCap>? value) {value?.SetValue(target, System.Windows.Media.Pen.EndLineCapProperty); return target;}
public static Style<System.Windows.Media.Pen> WithEndLineCap(this Style<System.Windows.Media.Pen> target, ValueProxy<System.Windows.Media.PenLineCap>? value) {value?.StyleSetter(target, System.Windows.Media.Pen.EndLineCapProperty); return target;}

//DashCapProperty
public static System.Windows.Media.Pen WithDashCap(this System.Windows.Media.Pen target, ValueProxy<System.Windows.Media.PenLineCap>? value) {value?.SetValue(target, System.Windows.Media.Pen.DashCapProperty); return target;}
public static Style<System.Windows.Media.Pen> WithDashCap(this Style<System.Windows.Media.Pen> target, ValueProxy<System.Windows.Media.PenLineCap>? value) {value?.StyleSetter(target, System.Windows.Media.Pen.DashCapProperty); return target;}

//LineJoinProperty
public static System.Windows.Media.Pen WithLineJoin(this System.Windows.Media.Pen target, ValueProxy<System.Windows.Media.PenLineJoin>? value) {value?.SetValue(target, System.Windows.Media.Pen.LineJoinProperty); return target;}
public static Style<System.Windows.Media.Pen> WithLineJoin(this Style<System.Windows.Media.Pen> target, ValueProxy<System.Windows.Media.PenLineJoin>? value) {value?.StyleSetter(target, System.Windows.Media.Pen.LineJoinProperty); return target;}

//MiterLimitProperty
public static System.Windows.Media.Pen WithMiterLimit(this System.Windows.Media.Pen target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Pen.MiterLimitProperty); return target;}
public static Style<System.Windows.Media.Pen> WithMiterLimit(this Style<System.Windows.Media.Pen> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Pen.MiterLimitProperty); return target;}

//DashStyleProperty
public static System.Windows.Media.Pen WithDashStyle(this System.Windows.Media.Pen target, ValueProxy<System.Windows.Media.DashStyle>? value) {value?.SetValue(target, System.Windows.Media.Pen.DashStyleProperty); return target;}
public static Style<System.Windows.Media.Pen> WithDashStyle(this Style<System.Windows.Media.Pen> target, ValueProxy<System.Windows.Media.DashStyle>? value) {value?.StyleSetter(target, System.Windows.Media.Pen.DashStyleProperty); return target;}

//PositionStartProperty
public static System.Windows.Media.TextEffect WithPositionStart(this System.Windows.Media.TextEffect target, ValueProxy<System.Int32>? value) {value?.SetValue(target, System.Windows.Media.TextEffect.PositionStartProperty); return target;}
public static Style<System.Windows.Media.TextEffect> WithPositionStart(this Style<System.Windows.Media.TextEffect> target, ValueProxy<System.Int32>? value) {value?.StyleSetter(target, System.Windows.Media.TextEffect.PositionStartProperty); return target;}

//PositionCountProperty
public static System.Windows.Media.TextEffect WithPositionCount(this System.Windows.Media.TextEffect target, ValueProxy<System.Int32>? value) {value?.SetValue(target, System.Windows.Media.TextEffect.PositionCountProperty); return target;}
public static Style<System.Windows.Media.TextEffect> WithPositionCount(this Style<System.Windows.Media.TextEffect> target, ValueProxy<System.Int32>? value) {value?.StyleSetter(target, System.Windows.Media.TextEffect.PositionCountProperty); return target;}

//QuaternionProperty
public static System.Windows.Media.Media3D.QuaternionRotation3D WithQuaternion(this System.Windows.Media.Media3D.QuaternionRotation3D target, ValueProxy<System.Windows.Media.Media3D.Quaternion>? value) {value?.SetValue(target, System.Windows.Media.Media3D.QuaternionRotation3D.QuaternionProperty); return target;}
public static Style<System.Windows.Media.Media3D.QuaternionRotation3D> WithQuaternion(this Style<System.Windows.Media.Media3D.QuaternionRotation3D> target, ValueProxy<System.Windows.Media.Media3D.Quaternion>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.QuaternionRotation3D.QuaternionProperty); return target;}

//IsAdditiveProperty

//IsCumulativeProperty

//IsPressAndHoldEnabledProperty
public static TChild WithStylus_IsPressAndHoldEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.Stylus.IsPressAndHoldEnabledProperty); return target;}
public static Style<TChild> WithStylus_IsPressAndHoldEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.Stylus.IsPressAndHoldEnabledProperty); return target;}

//IsFlicksEnabledProperty
public static TChild WithStylus_IsFlicksEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.Stylus.IsFlicksEnabledProperty); return target;}
public static Style<TChild> WithStylus_IsFlicksEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.Stylus.IsFlicksEnabledProperty); return target;}

//IsTapFeedbackEnabledProperty
public static TChild WithStylus_IsTapFeedbackEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.Stylus.IsTapFeedbackEnabledProperty); return target;}
public static Style<TChild> WithStylus_IsTapFeedbackEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.Stylus.IsTapFeedbackEnabledProperty); return target;}

//IsTouchFeedbackEnabledProperty
public static TChild WithStylus_IsTouchFeedbackEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.Stylus.IsTouchFeedbackEnabledProperty); return target;}
public static Style<TChild> WithStylus_IsTouchFeedbackEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.Stylus.IsTouchFeedbackEnabledProperty); return target;}

//FocusedElementProperty
public static TChild WithFocusManager_FocusedElement<TChild>(this TChild target, ValueProxy<System.Windows.IInputElement>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.FocusManager.FocusedElementProperty); return target;}
public static Style<TChild> WithFocusManager_FocusedElement<TChild>(this Style<TChild> target, ValueProxy<System.Windows.IInputElement>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.FocusManager.FocusedElementProperty); return target;}

//IsFocusScopeProperty
public static TChild WithFocusManager_IsFocusScope<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.FocusManager.IsFocusScopeProperty); return target;}
public static Style<TChild> WithFocusManager_IsFocusScope<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.FocusManager.IsFocusScopeProperty); return target;}

//IsInputMethodEnabledProperty
public static TChild WithInputMethod_IsInputMethodEnabled<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.InputMethod.IsInputMethodEnabledProperty); return target;}
public static Style<TChild> WithInputMethod_IsInputMethodEnabled<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.InputMethod.IsInputMethodEnabledProperty); return target;}

//IsInputMethodSuspendedProperty
public static TChild WithInputMethod_IsInputMethodSuspended<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.InputMethod.IsInputMethodSuspendedProperty); return target;}
public static Style<TChild> WithInputMethod_IsInputMethodSuspended<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.InputMethod.IsInputMethodSuspendedProperty); return target;}

//PreferredImeStateProperty
public static TChild WithInputMethod_PreferredImeState<TChild>(this TChild target, ValueProxy<System.Windows.Input.InputMethodState>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.InputMethod.PreferredImeStateProperty); return target;}
public static Style<TChild> WithInputMethod_PreferredImeState<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.InputMethodState>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.InputMethod.PreferredImeStateProperty); return target;}

//PreferredImeConversionModeProperty
public static TChild WithInputMethod_PreferredImeConversionMode<TChild>(this TChild target, ValueProxy<System.Windows.Input.ImeConversionModeValues>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.InputMethod.PreferredImeConversionModeProperty); return target;}
public static Style<TChild> WithInputMethod_PreferredImeConversionMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.ImeConversionModeValues>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.InputMethod.PreferredImeConversionModeProperty); return target;}

//PreferredImeSentenceModeProperty
public static TChild WithInputMethod_PreferredImeSentenceMode<TChild>(this TChild target, ValueProxy<System.Windows.Input.ImeSentenceModeValues>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.InputMethod.PreferredImeSentenceModeProperty); return target;}
public static Style<TChild> WithInputMethod_PreferredImeSentenceMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.ImeSentenceModeValues>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.InputMethod.PreferredImeSentenceModeProperty); return target;}

//InputProperty
public static System.Windows.Media.Effects.BitmapEffectInput WithInput(this System.Windows.Media.Effects.BitmapEffectInput target, ValueProxy<System.Windows.Media.Imaging.BitmapSource>? value) {value?.SetValue(target, System.Windows.Media.Effects.BitmapEffectInput.InputProperty); return target;}
public static Style<System.Windows.Media.Effects.BitmapEffectInput> WithInput(this Style<System.Windows.Media.Effects.BitmapEffectInput> target, ValueProxy<System.Windows.Media.Imaging.BitmapSource>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.BitmapEffectInput.InputProperty); return target;}

//AreaToApplyEffectUnitsProperty
public static System.Windows.Media.Effects.BitmapEffectInput WithAreaToApplyEffectUnits(this System.Windows.Media.Effects.BitmapEffectInput target, ValueProxy<System.Windows.Media.BrushMappingMode>? value) {value?.SetValue(target, System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectUnitsProperty); return target;}
public static Style<System.Windows.Media.Effects.BitmapEffectInput> WithAreaToApplyEffectUnits(this Style<System.Windows.Media.Effects.BitmapEffectInput> target, ValueProxy<System.Windows.Media.BrushMappingMode>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectUnitsProperty); return target;}

//AreaToApplyEffectProperty
public static System.Windows.Media.Effects.BitmapEffectInput WithAreaToApplyEffect(this System.Windows.Media.Effects.BitmapEffectInput target, ValueProxy<System.Windows.Rect>? value) {value?.SetValue(target, System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectProperty); return target;}
public static Style<System.Windows.Media.Effects.BitmapEffectInput> WithAreaToApplyEffect(this Style<System.Windows.Media.Effects.BitmapEffectInput> target, ValueProxy<System.Windows.Rect>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectProperty); return target;}

//EdgeModeProperty
public static TChild WithRenderOptions_EdgeMode<TChild>(this TChild target, ValueProxy<System.Windows.Media.EdgeMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.RenderOptions.EdgeModeProperty); return target;}
public static Style<TChild> WithRenderOptions_EdgeMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.EdgeMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.RenderOptions.EdgeModeProperty); return target;}

//BitmapScalingModeProperty
public static TChild WithRenderOptions_BitmapScalingMode<TChild>(this TChild target, ValueProxy<System.Windows.Media.BitmapScalingMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.RenderOptions.BitmapScalingModeProperty); return target;}
public static Style<TChild> WithRenderOptions_BitmapScalingMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.BitmapScalingMode>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.RenderOptions.BitmapScalingModeProperty); return target;}

//ClearTypeHintProperty
public static TChild WithRenderOptions_ClearTypeHint<TChild>(this TChild target, ValueProxy<System.Windows.Media.ClearTypeHint>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.RenderOptions.ClearTypeHintProperty); return target;}
public static Style<TChild> WithRenderOptions_ClearTypeHint<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.ClearTypeHint>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.RenderOptions.ClearTypeHintProperty); return target;}

//CachingHintProperty
public static TChild WithRenderOptions_CachingHint<TChild>(this TChild target, ValueProxy<System.Windows.Media.CachingHint>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.RenderOptions.CachingHintProperty); return target;}
public static Style<TChild> WithRenderOptions_CachingHint<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.CachingHint>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.RenderOptions.CachingHintProperty); return target;}

//CacheInvalidationThresholdMinimumProperty
public static TChild WithRenderOptions_CacheInvalidationThresholdMinimum<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.RenderOptions.CacheInvalidationThresholdMinimumProperty); return target;}
public static Style<TChild> WithRenderOptions_CacheInvalidationThresholdMinimum<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.RenderOptions.CacheInvalidationThresholdMinimumProperty); return target;}

//CacheInvalidationThresholdMaximumProperty
public static TChild WithRenderOptions_CacheInvalidationThresholdMaximum<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximumProperty); return target;}
public static Style<TChild> WithRenderOptions_CacheInvalidationThresholdMaximum<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximumProperty); return target;}

//GeometryCombineModeProperty
public static System.Windows.Media.CombinedGeometry WithGeometryCombineMode(this System.Windows.Media.CombinedGeometry target, ValueProxy<System.Windows.Media.GeometryCombineMode>? value) {value?.SetValue(target, System.Windows.Media.CombinedGeometry.GeometryCombineModeProperty); return target;}
public static Style<System.Windows.Media.CombinedGeometry> WithGeometryCombineMode(this Style<System.Windows.Media.CombinedGeometry> target, ValueProxy<System.Windows.Media.GeometryCombineMode>? value) {value?.StyleSetter(target, System.Windows.Media.CombinedGeometry.GeometryCombineModeProperty); return target;}

//Geometry1Property
public static System.Windows.Media.CombinedGeometry WithGeometry1(this System.Windows.Media.CombinedGeometry target, ValueProxy<System.Windows.Media.Geometry>? value) {value?.SetValue(target, System.Windows.Media.CombinedGeometry.Geometry1Property); return target;}
public static Style<System.Windows.Media.CombinedGeometry> WithGeometry1(this Style<System.Windows.Media.CombinedGeometry> target, ValueProxy<System.Windows.Media.Geometry>? value) {value?.StyleSetter(target, System.Windows.Media.CombinedGeometry.Geometry1Property); return target;}

//Geometry2Property
public static System.Windows.Media.CombinedGeometry WithGeometry2(this System.Windows.Media.CombinedGeometry target, ValueProxy<System.Windows.Media.Geometry>? value) {value?.SetValue(target, System.Windows.Media.CombinedGeometry.Geometry2Property); return target;}
public static Style<System.Windows.Media.CombinedGeometry> WithGeometry2(this Style<System.Windows.Media.CombinedGeometry> target, ValueProxy<System.Windows.Media.Geometry>? value) {value?.StyleSetter(target, System.Windows.Media.CombinedGeometry.Geometry2Property); return target;}

//ClipGeometryProperty
public static System.Windows.Media.DrawingGroup WithClipGeometry(this System.Windows.Media.DrawingGroup target, ValueProxy<System.Windows.Media.Geometry>? value) {value?.SetValue(target, System.Windows.Media.DrawingGroup.ClipGeometryProperty); return target;}
public static Style<System.Windows.Media.DrawingGroup> WithClipGeometry(this Style<System.Windows.Media.DrawingGroup> target, ValueProxy<System.Windows.Media.Geometry>? value) {value?.StyleSetter(target, System.Windows.Media.DrawingGroup.ClipGeometryProperty); return target;}

//GuidelineSetProperty
public static System.Windows.Media.DrawingGroup WithGuidelineSet(this System.Windows.Media.DrawingGroup target, ValueProxy<System.Windows.Media.GuidelineSet>? value) {value?.SetValue(target, System.Windows.Media.DrawingGroup.GuidelineSetProperty); return target;}
public static Style<System.Windows.Media.DrawingGroup> WithGuidelineSet(this Style<System.Windows.Media.DrawingGroup> target, ValueProxy<System.Windows.Media.GuidelineSet>? value) {value?.StyleSetter(target, System.Windows.Media.DrawingGroup.GuidelineSetProperty); return target;}

//RectProperty
public static System.Windows.Media.RectangleGeometry WithRect(this System.Windows.Media.RectangleGeometry target, ValueProxy<System.Windows.Rect>? value) {value?.SetValue(target, System.Windows.Media.RectangleGeometry.RectProperty); return target;}
public static Style<System.Windows.Media.RectangleGeometry> WithRect(this Style<System.Windows.Media.RectangleGeometry> target, ValueProxy<System.Windows.Rect>? value) {value?.StyleSetter(target, System.Windows.Media.RectangleGeometry.RectProperty); return target;}
public static System.Windows.Media.ImageDrawing WithRect(this System.Windows.Media.ImageDrawing target, ValueProxy<System.Windows.Rect>? value) {value?.SetValue(target, System.Windows.Media.ImageDrawing.RectProperty); return target;}
public static Style<System.Windows.Media.ImageDrawing> WithRect(this Style<System.Windows.Media.ImageDrawing> target, ValueProxy<System.Windows.Rect>? value) {value?.StyleSetter(target, System.Windows.Media.ImageDrawing.RectProperty); return target;}
public static System.Windows.Media.VideoDrawing WithRect(this System.Windows.Media.VideoDrawing target, ValueProxy<System.Windows.Rect>? value) {value?.SetValue(target, System.Windows.Media.VideoDrawing.RectProperty); return target;}
public static Style<System.Windows.Media.VideoDrawing> WithRect(this Style<System.Windows.Media.VideoDrawing> target, ValueProxy<System.Windows.Rect>? value) {value?.StyleSetter(target, System.Windows.Media.VideoDrawing.RectProperty); return target;}

//InputLanguageProperty
public static TChild WithInputLanguageManager_InputLanguage<TChild>(this TChild target, ValueProxy<System.Globalization.CultureInfo>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.InputLanguageManager.InputLanguageProperty); return target;}
public static Style<TChild> WithInputLanguageManager_InputLanguage<TChild>(this Style<TChild> target, ValueProxy<System.Globalization.CultureInfo>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.InputLanguageManager.InputLanguageProperty); return target;}

//RestoreInputLanguageProperty
public static TChild WithInputLanguageManager_RestoreInputLanguage<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Input.InputLanguageManager.RestoreInputLanguageProperty); return target;}
public static Style<TChild> WithInputLanguageManager_RestoreInputLanguage<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Input.InputLanguageManager.RestoreInputLanguageProperty); return target;}

//ModifiersProperty
public static TChild WithModifiers<TChild>(this TChild target, ValueProxy<System.Windows.Input.ModifierKeys>? value, Disambigator<System.Windows.Input.KeyBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.KeyBinding{value?.SetValue(target, System.Windows.Input.KeyBinding.ModifiersProperty); return target;}
public static Style<TChild> WithModifiers<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.ModifierKeys>? value, Disambigator<System.Windows.Input.KeyBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.KeyBinding{value?.StyleSetter(target, System.Windows.Input.KeyBinding.ModifiersProperty); return target;}

//KeyProperty
public static TChild WithKey<TChild>(this TChild target, ValueProxy<System.Windows.Input.Key>? value, Disambigator<System.Windows.Input.KeyBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.KeyBinding{value?.SetValue(target, System.Windows.Input.KeyBinding.KeyProperty); return target;}
public static Style<TChild> WithKey<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.Key>? value, Disambigator<System.Windows.Input.KeyBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.KeyBinding{value?.StyleSetter(target, System.Windows.Input.KeyBinding.KeyProperty); return target;}

//MouseActionProperty
public static TChild WithMouseAction<TChild>(this TChild target, ValueProxy<System.Windows.Input.MouseAction>? value, Disambigator<System.Windows.Input.MouseBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.MouseBinding{value?.SetValue(target, System.Windows.Input.MouseBinding.MouseActionProperty); return target;}
public static Style<TChild> WithMouseAction<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Input.MouseAction>? value, Disambigator<System.Windows.Input.MouseBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.MouseBinding{value?.StyleSetter(target, System.Windows.Input.MouseBinding.MouseActionProperty); return target;}

//AutomationIdProperty
public static TChild WithAutomationProperties_AutomationId<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.AutomationIdProperty); return target;}
public static Style<TChild> WithAutomationProperties_AutomationId<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.AutomationIdProperty); return target;}

//HelpTextProperty
public static TChild WithAutomationProperties_HelpText<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.HelpTextProperty); return target;}
public static Style<TChild> WithAutomationProperties_HelpText<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.HelpTextProperty); return target;}

//AcceleratorKeyProperty
public static TChild WithAutomationProperties_AcceleratorKey<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.AcceleratorKeyProperty); return target;}
public static Style<TChild> WithAutomationProperties_AcceleratorKey<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.AcceleratorKeyProperty); return target;}

//AccessKeyProperty
public static TChild WithAutomationProperties_AccessKey<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.AccessKeyProperty); return target;}
public static Style<TChild> WithAutomationProperties_AccessKey<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.AccessKeyProperty); return target;}

//ItemStatusProperty
public static TChild WithAutomationProperties_ItemStatus<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.ItemStatusProperty); return target;}
public static Style<TChild> WithAutomationProperties_ItemStatus<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.ItemStatusProperty); return target;}

//ItemTypeProperty
public static TChild WithAutomationProperties_ItemType<TChild>(this TChild target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.ItemTypeProperty); return target;}
public static Style<TChild> WithAutomationProperties_ItemType<TChild>(this Style<TChild> target, ValueProxy<System.String>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.ItemTypeProperty); return target;}

//IsColumnHeaderProperty
public static TChild WithAutomationProperties_IsColumnHeader<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.IsColumnHeaderProperty); return target;}
public static Style<TChild> WithAutomationProperties_IsColumnHeader<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.IsColumnHeaderProperty); return target;}

//IsRowHeaderProperty
public static TChild WithAutomationProperties_IsRowHeader<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.IsRowHeaderProperty); return target;}
public static Style<TChild> WithAutomationProperties_IsRowHeader<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.IsRowHeaderProperty); return target;}

//IsRequiredForFormProperty
public static TChild WithAutomationProperties_IsRequiredForForm<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.IsRequiredForFormProperty); return target;}
public static Style<TChild> WithAutomationProperties_IsRequiredForForm<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.IsRequiredForFormProperty); return target;}

//LabeledByProperty
public static TChild WithAutomationProperties_LabeledBy<TChild>(this TChild target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.LabeledByProperty); return target;}
public static Style<TChild> WithAutomationProperties_LabeledBy<TChild>(this Style<TChild> target, ValueProxy<System.Windows.UIElement>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.LabeledByProperty); return target;}

//IsOffscreenBehaviorProperty
public static TChild WithAutomationProperties_IsOffscreenBehavior<TChild>(this TChild target, ValueProxy<System.Windows.Automation.IsOffscreenBehavior>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.IsOffscreenBehaviorProperty); return target;}
public static Style<TChild> WithAutomationProperties_IsOffscreenBehavior<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Automation.IsOffscreenBehavior>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.IsOffscreenBehaviorProperty); return target;}

//LiveSettingProperty
public static TChild WithAutomationProperties_LiveSetting<TChild>(this TChild target, ValueProxy<System.Windows.Automation.AutomationLiveSetting>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.LiveSettingProperty); return target;}
public static Style<TChild> WithAutomationProperties_LiveSetting<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Automation.AutomationLiveSetting>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.LiveSettingProperty); return target;}

//PositionInSetProperty
public static TChild WithAutomationProperties_PositionInSet<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.PositionInSetProperty); return target;}
public static Style<TChild> WithAutomationProperties_PositionInSet<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.PositionInSetProperty); return target;}

//SizeOfSetProperty
public static TChild WithAutomationProperties_SizeOfSet<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.SetValue(target, System.Windows.Automation.AutomationProperties.SizeOfSetProperty); return target;}
public static Style<TChild> WithAutomationProperties_SizeOfSet<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.DependencyObject, TChild>? doNotUse = null) where TChild: System.Windows.DependencyObject{value?.StyleSetter(target, System.Windows.Automation.AutomationProperties.SizeOfSetProperty); return target;}

//IsFrontBufferAvailableProperty
public static TChild WithIsFrontBufferAvailable<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Interop.D3DImage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.D3DImage{value?.SetValue(target, System.Windows.Interop.D3DImage.IsFrontBufferAvailableProperty); return target;}
public static Style<TChild> WithIsFrontBufferAvailable<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Interop.D3DImage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.D3DImage{value?.StyleSetter(target, System.Windows.Interop.D3DImage.IsFrontBufferAvailableProperty); return target;}

//PointProperty
public static System.Windows.Media.ArcSegment WithPoint(this System.Windows.Media.ArcSegment target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.ArcSegment.PointProperty); return target;}
public static Style<System.Windows.Media.ArcSegment> WithPoint(this Style<System.Windows.Media.ArcSegment> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.ArcSegment.PointProperty); return target;}
public static System.Windows.Media.LineSegment WithPoint(this System.Windows.Media.LineSegment target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.LineSegment.PointProperty); return target;}
public static Style<System.Windows.Media.LineSegment> WithPoint(this Style<System.Windows.Media.LineSegment> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.LineSegment.PointProperty); return target;}

//SizeProperty
public static System.Windows.Media.ArcSegment WithSize(this System.Windows.Media.ArcSegment target, ValueProxy<System.Windows.Size>? value) {value?.SetValue(target, System.Windows.Media.ArcSegment.SizeProperty); return target;}
public static Style<System.Windows.Media.ArcSegment> WithSize(this Style<System.Windows.Media.ArcSegment> target, ValueProxy<System.Windows.Size>? value) {value?.StyleSetter(target, System.Windows.Media.ArcSegment.SizeProperty); return target;}

//RotationAngleProperty
public static System.Windows.Media.ArcSegment WithRotationAngle(this System.Windows.Media.ArcSegment target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.ArcSegment.RotationAngleProperty); return target;}
public static Style<System.Windows.Media.ArcSegment> WithRotationAngle(this Style<System.Windows.Media.ArcSegment> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.ArcSegment.RotationAngleProperty); return target;}

//IsLargeArcProperty
public static System.Windows.Media.ArcSegment WithIsLargeArc(this System.Windows.Media.ArcSegment target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Media.ArcSegment.IsLargeArcProperty); return target;}
public static Style<System.Windows.Media.ArcSegment> WithIsLargeArc(this Style<System.Windows.Media.ArcSegment> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Media.ArcSegment.IsLargeArcProperty); return target;}

//SweepDirectionProperty
public static System.Windows.Media.ArcSegment WithSweepDirection(this System.Windows.Media.ArcSegment target, ValueProxy<System.Windows.Media.SweepDirection>? value) {value?.SetValue(target, System.Windows.Media.ArcSegment.SweepDirectionProperty); return target;}
public static Style<System.Windows.Media.ArcSegment> WithSweepDirection(this Style<System.Windows.Media.ArcSegment> target, ValueProxy<System.Windows.Media.SweepDirection>? value) {value?.StyleSetter(target, System.Windows.Media.ArcSegment.SweepDirectionProperty); return target;}

//IsStrokedProperty
public static TChild WithIsStroked<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.PathSegment, TChild>? doNotUse = null) where TChild: System.Windows.Media.PathSegment{value?.SetValue(target, System.Windows.Media.PathSegment.IsStrokedProperty); return target;}
public static Style<TChild> WithIsStroked<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.PathSegment, TChild>? doNotUse = null) where TChild: System.Windows.Media.PathSegment{value?.StyleSetter(target, System.Windows.Media.PathSegment.IsStrokedProperty); return target;}

//IsSmoothJoinProperty
public static TChild WithIsSmoothJoin<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.PathSegment, TChild>? doNotUse = null) where TChild: System.Windows.Media.PathSegment{value?.SetValue(target, System.Windows.Media.PathSegment.IsSmoothJoinProperty); return target;}
public static Style<TChild> WithIsSmoothJoin<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.PathSegment, TChild>? doNotUse = null) where TChild: System.Windows.Media.PathSegment{value?.StyleSetter(target, System.Windows.Media.PathSegment.IsSmoothJoinProperty); return target;}

//StartPointProperty
public static System.Windows.Media.PathFigure WithStartPoint(this System.Windows.Media.PathFigure target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.PathFigure.StartPointProperty); return target;}
public static Style<System.Windows.Media.PathFigure> WithStartPoint(this Style<System.Windows.Media.PathFigure> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.PathFigure.StartPointProperty); return target;}
public static System.Windows.Media.LineGeometry WithStartPoint(this System.Windows.Media.LineGeometry target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.LineGeometry.StartPointProperty); return target;}
public static Style<System.Windows.Media.LineGeometry> WithStartPoint(this Style<System.Windows.Media.LineGeometry> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.LineGeometry.StartPointProperty); return target;}
public static System.Windows.Media.LinearGradientBrush WithStartPoint(this System.Windows.Media.LinearGradientBrush target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.LinearGradientBrush.StartPointProperty); return target;}
public static Style<System.Windows.Media.LinearGradientBrush> WithStartPoint(this Style<System.Windows.Media.LinearGradientBrush> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.LinearGradientBrush.StartPointProperty); return target;}

//IsFilledProperty
public static System.Windows.Media.PathFigure WithIsFilled(this System.Windows.Media.PathFigure target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Media.PathFigure.IsFilledProperty); return target;}
public static Style<System.Windows.Media.PathFigure> WithIsFilled(this Style<System.Windows.Media.PathFigure> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Media.PathFigure.IsFilledProperty); return target;}

//SegmentsProperty
public static System.Windows.Media.PathFigure WithSegments(this System.Windows.Media.PathFigure target, ValueProxy<System.Windows.Media.PathSegmentCollection>? value) {value?.SetValue(target, System.Windows.Media.PathFigure.SegmentsProperty); return target;}
public static Style<System.Windows.Media.PathFigure> WithSegments(this Style<System.Windows.Media.PathFigure> target, ValueProxy<System.Windows.Media.PathSegmentCollection>? value) {value?.StyleSetter(target, System.Windows.Media.PathFigure.SegmentsProperty); return target;}

//IsClosedProperty
public static System.Windows.Media.PathFigure WithIsClosed(this System.Windows.Media.PathFigure target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Media.PathFigure.IsClosedProperty); return target;}
public static Style<System.Windows.Media.PathFigure> WithIsClosed(this Style<System.Windows.Media.PathFigure> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Media.PathFigure.IsClosedProperty); return target;}

//Point1Property
public static System.Windows.Media.BezierSegment WithPoint1(this System.Windows.Media.BezierSegment target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.BezierSegment.Point1Property); return target;}
public static Style<System.Windows.Media.BezierSegment> WithPoint1(this Style<System.Windows.Media.BezierSegment> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.BezierSegment.Point1Property); return target;}
public static System.Windows.Media.QuadraticBezierSegment WithPoint1(this System.Windows.Media.QuadraticBezierSegment target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.QuadraticBezierSegment.Point1Property); return target;}
public static Style<System.Windows.Media.QuadraticBezierSegment> WithPoint1(this Style<System.Windows.Media.QuadraticBezierSegment> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.QuadraticBezierSegment.Point1Property); return target;}

//Point2Property
public static System.Windows.Media.BezierSegment WithPoint2(this System.Windows.Media.BezierSegment target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.BezierSegment.Point2Property); return target;}
public static Style<System.Windows.Media.BezierSegment> WithPoint2(this Style<System.Windows.Media.BezierSegment> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.BezierSegment.Point2Property); return target;}
public static System.Windows.Media.QuadraticBezierSegment WithPoint2(this System.Windows.Media.QuadraticBezierSegment target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.QuadraticBezierSegment.Point2Property); return target;}
public static Style<System.Windows.Media.QuadraticBezierSegment> WithPoint2(this Style<System.Windows.Media.QuadraticBezierSegment> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.QuadraticBezierSegment.Point2Property); return target;}

//Point3Property
public static System.Windows.Media.BezierSegment WithPoint3(this System.Windows.Media.BezierSegment target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.BezierSegment.Point3Property); return target;}
public static Style<System.Windows.Media.BezierSegment> WithPoint3(this Style<System.Windows.Media.BezierSegment> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.BezierSegment.Point3Property); return target;}

//RenderAtScaleProperty
public static System.Windows.Media.BitmapCache WithRenderAtScale(this System.Windows.Media.BitmapCache target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.BitmapCache.RenderAtScaleProperty); return target;}
public static Style<System.Windows.Media.BitmapCache> WithRenderAtScale(this Style<System.Windows.Media.BitmapCache> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.BitmapCache.RenderAtScaleProperty); return target;}

//EnableClearTypeProperty
public static System.Windows.Media.BitmapCache WithEnableClearType(this System.Windows.Media.BitmapCache target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Media.BitmapCache.EnableClearTypeProperty); return target;}
public static Style<System.Windows.Media.BitmapCache> WithEnableClearType(this Style<System.Windows.Media.BitmapCache> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Media.BitmapCache.EnableClearTypeProperty); return target;}

//BitmapCacheProperty
public static System.Windows.Media.BitmapCacheBrush WithBitmapCache(this System.Windows.Media.BitmapCacheBrush target, ValueProxy<System.Windows.Media.BitmapCache>? value) {value?.SetValue(target, System.Windows.Media.BitmapCacheBrush.BitmapCacheProperty); return target;}
public static Style<System.Windows.Media.BitmapCacheBrush> WithBitmapCache(this Style<System.Windows.Media.BitmapCacheBrush> target, ValueProxy<System.Windows.Media.BitmapCache>? value) {value?.StyleSetter(target, System.Windows.Media.BitmapCacheBrush.BitmapCacheProperty); return target;}

//AutoLayoutContentProperty
public static System.Windows.Media.BitmapCacheBrush WithAutoLayoutContent(this System.Windows.Media.BitmapCacheBrush target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Media.BitmapCacheBrush.AutoLayoutContentProperty); return target;}
public static Style<System.Windows.Media.BitmapCacheBrush> WithAutoLayoutContent(this Style<System.Windows.Media.BitmapCacheBrush> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Media.BitmapCacheBrush.AutoLayoutContentProperty); return target;}
public static System.Windows.Media.VisualBrush WithAutoLayoutContent(this System.Windows.Media.VisualBrush target, ValueProxy<System.Boolean>? value) {value?.SetValue(target, System.Windows.Media.VisualBrush.AutoLayoutContentProperty); return target;}
public static Style<System.Windows.Media.VisualBrush> WithAutoLayoutContent(this Style<System.Windows.Media.VisualBrush> target, ValueProxy<System.Boolean>? value) {value?.StyleSetter(target, System.Windows.Media.VisualBrush.AutoLayoutContentProperty); return target;}

//EndPointProperty
public static System.Windows.Media.LineGeometry WithEndPoint(this System.Windows.Media.LineGeometry target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.LineGeometry.EndPointProperty); return target;}
public static Style<System.Windows.Media.LineGeometry> WithEndPoint(this Style<System.Windows.Media.LineGeometry> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.LineGeometry.EndPointProperty); return target;}
public static System.Windows.Media.LinearGradientBrush WithEndPoint(this System.Windows.Media.LinearGradientBrush target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.LinearGradientBrush.EndPointProperty); return target;}
public static Style<System.Windows.Media.LinearGradientBrush> WithEndPoint(this Style<System.Windows.Media.LinearGradientBrush> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.LinearGradientBrush.EndPointProperty); return target;}

//CenterProperty
public static System.Windows.Media.EllipseGeometry WithCenter(this System.Windows.Media.EllipseGeometry target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.EllipseGeometry.CenterProperty); return target;}
public static Style<System.Windows.Media.EllipseGeometry> WithCenter(this Style<System.Windows.Media.EllipseGeometry> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.EllipseGeometry.CenterProperty); return target;}
public static System.Windows.Media.RadialGradientBrush WithCenter(this System.Windows.Media.RadialGradientBrush target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.RadialGradientBrush.CenterProperty); return target;}
public static Style<System.Windows.Media.RadialGradientBrush> WithCenter(this Style<System.Windows.Media.RadialGradientBrush> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.RadialGradientBrush.CenterProperty); return target;}

//GuidelinesXProperty
public static System.Windows.Media.GuidelineSet WithGuidelinesX(this System.Windows.Media.GuidelineSet target, ValueProxy<System.Windows.Media.DoubleCollection>? value) {value?.SetValue(target, System.Windows.Media.GuidelineSet.GuidelinesXProperty); return target;}
public static Style<System.Windows.Media.GuidelineSet> WithGuidelinesX(this Style<System.Windows.Media.GuidelineSet> target, ValueProxy<System.Windows.Media.DoubleCollection>? value) {value?.StyleSetter(target, System.Windows.Media.GuidelineSet.GuidelinesXProperty); return target;}

//GuidelinesYProperty
public static System.Windows.Media.GuidelineSet WithGuidelinesY(this System.Windows.Media.GuidelineSet target, ValueProxy<System.Windows.Media.DoubleCollection>? value) {value?.SetValue(target, System.Windows.Media.GuidelineSet.GuidelinesYProperty); return target;}
public static Style<System.Windows.Media.GuidelineSet> WithGuidelinesY(this Style<System.Windows.Media.GuidelineSet> target, ValueProxy<System.Windows.Media.DoubleCollection>? value) {value?.StyleSetter(target, System.Windows.Media.GuidelineSet.GuidelinesYProperty); return target;}

//OffsetProperty
public static System.Windows.Media.DashStyle WithOffset(this System.Windows.Media.DashStyle target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.DashStyle.OffsetProperty); return target;}
public static Style<System.Windows.Media.DashStyle> WithOffset(this Style<System.Windows.Media.DashStyle> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.DashStyle.OffsetProperty); return target;}
public static System.Windows.Media.GradientStop WithOffset(this System.Windows.Media.GradientStop target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.GradientStop.OffsetProperty); return target;}
public static Style<System.Windows.Media.GradientStop> WithOffset(this Style<System.Windows.Media.GradientStop> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.GradientStop.OffsetProperty); return target;}

//DashesProperty
public static System.Windows.Media.DashStyle WithDashes(this System.Windows.Media.DashStyle target, ValueProxy<System.Windows.Media.DoubleCollection>? value) {value?.SetValue(target, System.Windows.Media.DashStyle.DashesProperty); return target;}
public static Style<System.Windows.Media.DashStyle> WithDashes(this Style<System.Windows.Media.DashStyle> target, ValueProxy<System.Windows.Media.DoubleCollection>? value) {value?.StyleSetter(target, System.Windows.Media.DashStyle.DashesProperty); return target;}

//DrawingProperty
public static System.Windows.Media.DrawingBrush WithDrawing(this System.Windows.Media.DrawingBrush target, ValueProxy<System.Windows.Media.Drawing>? value) {value?.SetValue(target, System.Windows.Media.DrawingBrush.DrawingProperty); return target;}
public static Style<System.Windows.Media.DrawingBrush> WithDrawing(this Style<System.Windows.Media.DrawingBrush> target, ValueProxy<System.Windows.Media.Drawing>? value) {value?.StyleSetter(target, System.Windows.Media.DrawingBrush.DrawingProperty); return target;}
public static System.Windows.Media.DrawingImage WithDrawing(this System.Windows.Media.DrawingImage target, ValueProxy<System.Windows.Media.Drawing>? value) {value?.SetValue(target, System.Windows.Media.DrawingImage.DrawingProperty); return target;}
public static Style<System.Windows.Media.DrawingImage> WithDrawing(this Style<System.Windows.Media.DrawingImage> target, ValueProxy<System.Windows.Media.Drawing>? value) {value?.StyleSetter(target, System.Windows.Media.DrawingImage.DrawingProperty); return target;}

//ViewportUnitsProperty
public static TChild WithViewportUnits<TChild>(this TChild target, ValueProxy<System.Windows.Media.BrushMappingMode>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.SetValue(target, System.Windows.Media.TileBrush.ViewportUnitsProperty); return target;}
public static Style<TChild> WithViewportUnits<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.BrushMappingMode>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.StyleSetter(target, System.Windows.Media.TileBrush.ViewportUnitsProperty); return target;}

//ViewboxUnitsProperty
public static TChild WithViewboxUnits<TChild>(this TChild target, ValueProxy<System.Windows.Media.BrushMappingMode>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.SetValue(target, System.Windows.Media.TileBrush.ViewboxUnitsProperty); return target;}
public static Style<TChild> WithViewboxUnits<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.BrushMappingMode>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.StyleSetter(target, System.Windows.Media.TileBrush.ViewboxUnitsProperty); return target;}

//ViewboxProperty
public static TChild WithViewbox<TChild>(this TChild target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.SetValue(target, System.Windows.Media.TileBrush.ViewboxProperty); return target;}
public static Style<TChild> WithViewbox<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Rect>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.StyleSetter(target, System.Windows.Media.TileBrush.ViewboxProperty); return target;}

//TileModeProperty
public static TChild WithTileMode<TChild>(this TChild target, ValueProxy<System.Windows.Media.TileMode>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.SetValue(target, System.Windows.Media.TileBrush.TileModeProperty); return target;}
public static Style<TChild> WithTileMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.TileMode>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.StyleSetter(target, System.Windows.Media.TileBrush.TileModeProperty); return target;}

//AlignmentXProperty
public static TChild WithAlignmentX<TChild>(this TChild target, ValueProxy<System.Windows.Media.AlignmentX>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.SetValue(target, System.Windows.Media.TileBrush.AlignmentXProperty); return target;}
public static Style<TChild> WithAlignmentX<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.AlignmentX>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.StyleSetter(target, System.Windows.Media.TileBrush.AlignmentXProperty); return target;}

//AlignmentYProperty
public static TChild WithAlignmentY<TChild>(this TChild target, ValueProxy<System.Windows.Media.AlignmentY>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.SetValue(target, System.Windows.Media.TileBrush.AlignmentYProperty); return target;}
public static Style<TChild> WithAlignmentY<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.AlignmentY>? value, Disambigator<System.Windows.Media.TileBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.TileBrush{value?.StyleSetter(target, System.Windows.Media.TileBrush.AlignmentYProperty); return target;}

//PlayerProperty
public static System.Windows.Media.VideoDrawing WithPlayer(this System.Windows.Media.VideoDrawing target, ValueProxy<System.Windows.Media.MediaPlayer>? value) {value?.SetValue(target, System.Windows.Media.VideoDrawing.PlayerProperty); return target;}
public static Style<System.Windows.Media.VideoDrawing> WithPlayer(this Style<System.Windows.Media.VideoDrawing> target, ValueProxy<System.Windows.Media.MediaPlayer>? value) {value?.StyleSetter(target, System.Windows.Media.VideoDrawing.PlayerProperty); return target;}

//GlyphRunProperty
public static System.Windows.Media.GlyphRunDrawing WithGlyphRun(this System.Windows.Media.GlyphRunDrawing target, ValueProxy<System.Windows.Media.GlyphRun>? value) {value?.SetValue(target, System.Windows.Media.GlyphRunDrawing.GlyphRunProperty); return target;}
public static Style<System.Windows.Media.GlyphRunDrawing> WithGlyphRun(this Style<System.Windows.Media.GlyphRunDrawing> target, ValueProxy<System.Windows.Media.GlyphRun>? value) {value?.StyleSetter(target, System.Windows.Media.GlyphRunDrawing.GlyphRunProperty); return target;}

//ForegroundBrushProperty
public static System.Windows.Media.GlyphRunDrawing WithForegroundBrush(this System.Windows.Media.GlyphRunDrawing target, ValueProxy<System.Windows.Media.Brush>? value) {value?.SetValue(target, System.Windows.Media.GlyphRunDrawing.ForegroundBrushProperty); return target;}
public static Style<System.Windows.Media.GlyphRunDrawing> WithForegroundBrush(this Style<System.Windows.Media.GlyphRunDrawing> target, ValueProxy<System.Windows.Media.Brush>? value) {value?.StyleSetter(target, System.Windows.Media.GlyphRunDrawing.ForegroundBrushProperty); return target;}

//ColorInterpolationModeProperty
public static TChild WithColorInterpolationMode<TChild>(this TChild target, ValueProxy<System.Windows.Media.ColorInterpolationMode>? value, Disambigator<System.Windows.Media.GradientBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.GradientBrush{value?.SetValue(target, System.Windows.Media.GradientBrush.ColorInterpolationModeProperty); return target;}
public static Style<TChild> WithColorInterpolationMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.ColorInterpolationMode>? value, Disambigator<System.Windows.Media.GradientBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.GradientBrush{value?.StyleSetter(target, System.Windows.Media.GradientBrush.ColorInterpolationModeProperty); return target;}

//MappingModeProperty
public static TChild WithMappingMode<TChild>(this TChild target, ValueProxy<System.Windows.Media.BrushMappingMode>? value, Disambigator<System.Windows.Media.GradientBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.GradientBrush{value?.SetValue(target, System.Windows.Media.GradientBrush.MappingModeProperty); return target;}
public static Style<TChild> WithMappingMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.BrushMappingMode>? value, Disambigator<System.Windows.Media.GradientBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.GradientBrush{value?.StyleSetter(target, System.Windows.Media.GradientBrush.MappingModeProperty); return target;}

//SpreadMethodProperty
public static TChild WithSpreadMethod<TChild>(this TChild target, ValueProxy<System.Windows.Media.GradientSpreadMethod>? value, Disambigator<System.Windows.Media.GradientBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.GradientBrush{value?.SetValue(target, System.Windows.Media.GradientBrush.SpreadMethodProperty); return target;}
public static Style<TChild> WithSpreadMethod<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.GradientSpreadMethod>? value, Disambigator<System.Windows.Media.GradientBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.GradientBrush{value?.StyleSetter(target, System.Windows.Media.GradientBrush.SpreadMethodProperty); return target;}

//GradientStopsProperty
public static TChild WithGradientStops<TChild>(this TChild target, ValueProxy<System.Windows.Media.GradientStopCollection>? value, Disambigator<System.Windows.Media.GradientBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.GradientBrush{value?.SetValue(target, System.Windows.Media.GradientBrush.GradientStopsProperty); return target;}
public static Style<TChild> WithGradientStops<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.GradientStopCollection>? value, Disambigator<System.Windows.Media.GradientBrush, TChild>? doNotUse = null) where TChild: System.Windows.Media.GradientBrush{value?.StyleSetter(target, System.Windows.Media.GradientBrush.GradientStopsProperty); return target;}

//AccelerationRatioProperty
public static TChild WithAccelerationRatio<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.SetValue(target, System.Windows.Media.Animation.Timeline.AccelerationRatioProperty); return target;}
public static Style<TChild> WithAccelerationRatio<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.StyleSetter(target, System.Windows.Media.Animation.Timeline.AccelerationRatioProperty); return target;}

//AutoReverseProperty
public static TChild WithAutoReverse<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.SetValue(target, System.Windows.Media.Animation.Timeline.AutoReverseProperty); return target;}
public static Style<TChild> WithAutoReverse<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.StyleSetter(target, System.Windows.Media.Animation.Timeline.AutoReverseProperty); return target;}

//BeginTimeProperty
public static TChild WithBeginTime<TChild>(this TChild target, ValueProxy<System.Nullable<System.TimeSpan>>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.SetValue(target, System.Windows.Media.Animation.Timeline.BeginTimeProperty); return target;}
public static Style<TChild> WithBeginTime<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.TimeSpan>>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.StyleSetter(target, System.Windows.Media.Animation.Timeline.BeginTimeProperty); return target;}

//DecelerationRatioProperty
public static TChild WithDecelerationRatio<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.SetValue(target, System.Windows.Media.Animation.Timeline.DecelerationRatioProperty); return target;}
public static Style<TChild> WithDecelerationRatio<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.StyleSetter(target, System.Windows.Media.Animation.Timeline.DecelerationRatioProperty); return target;}

//DesiredFrameRateProperty
public static TChild WithTimeline_DesiredFrameRate<TChild>(this TChild target, ValueProxy<System.Nullable<System.Int32>>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.SetValue(target, System.Windows.Media.Animation.Timeline.DesiredFrameRateProperty); return target;}
public static Style<TChild> WithTimeline_DesiredFrameRate<TChild>(this Style<TChild> target, ValueProxy<System.Nullable<System.Int32>>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.StyleSetter(target, System.Windows.Media.Animation.Timeline.DesiredFrameRateProperty); return target;}

//DurationProperty
public static TChild WithDuration<TChild>(this TChild target, ValueProxy<System.Windows.Duration>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.SetValue(target, System.Windows.Media.Animation.Timeline.DurationProperty); return target;}
public static Style<TChild> WithDuration<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Duration>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.StyleSetter(target, System.Windows.Media.Animation.Timeline.DurationProperty); return target;}

//FillBehaviorProperty
public static TChild WithFillBehavior<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.FillBehavior>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.SetValue(target, System.Windows.Media.Animation.Timeline.FillBehaviorProperty); return target;}
public static Style<TChild> WithFillBehavior<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.FillBehavior>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.StyleSetter(target, System.Windows.Media.Animation.Timeline.FillBehaviorProperty); return target;}

//RepeatBehaviorProperty
public static TChild WithRepeatBehavior<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.RepeatBehavior>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.SetValue(target, System.Windows.Media.Animation.Timeline.RepeatBehaviorProperty); return target;}
public static Style<TChild> WithRepeatBehavior<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.RepeatBehavior>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.StyleSetter(target, System.Windows.Media.Animation.Timeline.RepeatBehaviorProperty); return target;}

//SpeedRatioProperty
public static TChild WithSpeedRatio<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.SetValue(target, System.Windows.Media.Animation.Timeline.SpeedRatioProperty); return target;}
public static Style<TChild> WithSpeedRatio<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.Timeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Timeline{value?.StyleSetter(target, System.Windows.Media.Animation.Timeline.SpeedRatioProperty); return target;}

//GradientOriginProperty
public static System.Windows.Media.RadialGradientBrush WithGradientOrigin(this System.Windows.Media.RadialGradientBrush target, ValueProxy<System.Windows.Point>? value) {value?.SetValue(target, System.Windows.Media.RadialGradientBrush.GradientOriginProperty); return target;}
public static Style<System.Windows.Media.RadialGradientBrush> WithGradientOrigin(this Style<System.Windows.Media.RadialGradientBrush> target, ValueProxy<System.Windows.Point>? value) {value?.StyleSetter(target, System.Windows.Media.RadialGradientBrush.GradientOriginProperty); return target;}

//AngleProperty
public static System.Windows.Media.RotateTransform WithAngle(this System.Windows.Media.RotateTransform target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.RotateTransform.AngleProperty); return target;}
public static Style<System.Windows.Media.RotateTransform> WithAngle(this Style<System.Windows.Media.RotateTransform> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.RotateTransform.AngleProperty); return target;}
public static System.Windows.Media.Media3D.AxisAngleRotation3D WithAngle(this System.Windows.Media.Media3D.AxisAngleRotation3D target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.AxisAngleRotation3D.AngleProperty); return target;}
public static Style<System.Windows.Media.Media3D.AxisAngleRotation3D> WithAngle(this Style<System.Windows.Media.Media3D.AxisAngleRotation3D> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.AxisAngleRotation3D.AngleProperty); return target;}

//AngleXProperty
public static System.Windows.Media.SkewTransform WithAngleX(this System.Windows.Media.SkewTransform target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.SkewTransform.AngleXProperty); return target;}
public static Style<System.Windows.Media.SkewTransform> WithAngleX(this Style<System.Windows.Media.SkewTransform> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.SkewTransform.AngleXProperty); return target;}

//AngleYProperty
public static System.Windows.Media.SkewTransform WithAngleY(this System.Windows.Media.SkewTransform target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.SkewTransform.AngleYProperty); return target;}
public static Style<System.Windows.Media.SkewTransform> WithAngleY(this Style<System.Windows.Media.SkewTransform> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.SkewTransform.AngleYProperty); return target;}

//AxisProperty
public static System.Windows.Media.Media3D.AxisAngleRotation3D WithAxis(this System.Windows.Media.Media3D.AxisAngleRotation3D target, ValueProxy<System.Windows.Media.Media3D.Vector3D>? value) {value?.SetValue(target, System.Windows.Media.Media3D.AxisAngleRotation3D.AxisProperty); return target;}
public static Style<System.Windows.Media.Media3D.AxisAngleRotation3D> WithAxis(this Style<System.Windows.Media.Media3D.AxisAngleRotation3D> target, ValueProxy<System.Windows.Media.Media3D.Vector3D>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.AxisAngleRotation3D.AxisProperty); return target;}

//AmbientColorProperty
public static System.Windows.Media.Media3D.DiffuseMaterial WithAmbientColor(this System.Windows.Media.Media3D.DiffuseMaterial target, ValueProxy<System.Windows.Media.Color>? value) {value?.SetValue(target, System.Windows.Media.Media3D.DiffuseMaterial.AmbientColorProperty); return target;}
public static Style<System.Windows.Media.Media3D.DiffuseMaterial> WithAmbientColor(this Style<System.Windows.Media.Media3D.DiffuseMaterial> target, ValueProxy<System.Windows.Media.Color>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.DiffuseMaterial.AmbientColorProperty); return target;}

//DirectionProperty
public static System.Windows.Media.Media3D.DirectionalLight WithDirection(this System.Windows.Media.Media3D.DirectionalLight target, ValueProxy<System.Windows.Media.Media3D.Vector3D>? value) {value?.SetValue(target, System.Windows.Media.Media3D.DirectionalLight.DirectionProperty); return target;}

public static Style<System.Windows.Media.Media3D.DirectionalLight> WithDirection(this Style<System.Windows.Media.Media3D.DirectionalLight> target, ValueProxy<System.Windows.Media.Media3D.Vector3D>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.DirectionalLight.DirectionProperty); return target;}
public static System.Windows.Media.Media3D.SpotLight WithDirection(this System.Windows.Media.Media3D.SpotLight target, ValueProxy<System.Windows.Media.Media3D.Vector3D>? value) {value?.SetValue(target, System.Windows.Media.Media3D.SpotLight.DirectionProperty); return target;}
public static Style<System.Windows.Media.Media3D.SpotLight> WithDirection(this Style<System.Windows.Media.Media3D.SpotLight> target, ValueProxy<System.Windows.Media.Media3D.Vector3D>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.SpotLight.DirectionProperty); return target;}
public static System.Windows.Media.Effects.DropShadowBitmapEffect WithDirection(this System.Windows.Media.Effects.DropShadowBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.DropShadowBitmapEffect.DirectionProperty); return target;}
public static Style<System.Windows.Media.Effects.DropShadowBitmapEffect> WithDirection(this Style<System.Windows.Media.Effects.DropShadowBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.DropShadowBitmapEffect.DirectionProperty); return target;}
public static System.Windows.Media.Effects.DropShadowEffect WithDirection(this System.Windows.Media.Effects.DropShadowEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.DropShadowEffect.DirectionProperty); return target;}
public static Style<System.Windows.Media.Effects.DropShadowEffect> WithDirection(this Style<System.Windows.Media.Effects.DropShadowEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.DropShadowEffect.DirectionProperty); return target;}

//BackMaterialProperty
public static System.Windows.Media.Media3D.GeometryModel3D WithBackMaterial(this System.Windows.Media.Media3D.GeometryModel3D target, ValueProxy<System.Windows.Media.Media3D.Material>? value) {value?.SetValue(target, System.Windows.Media.Media3D.GeometryModel3D.BackMaterialProperty); return target;}
public static Style<System.Windows.Media.Media3D.GeometryModel3D> WithBackMaterial(this Style<System.Windows.Media.Media3D.GeometryModel3D> target, ValueProxy<System.Windows.Media.Media3D.Material>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.GeometryModel3D.BackMaterialProperty); return target;}

//ViewMatrixProperty
public static System.Windows.Media.Media3D.MatrixCamera WithViewMatrix(this System.Windows.Media.Media3D.MatrixCamera target, ValueProxy<System.Windows.Media.Media3D.Matrix3D>? value) {value?.SetValue(target, System.Windows.Media.Media3D.MatrixCamera.ViewMatrixProperty); return target;}
public static Style<System.Windows.Media.Media3D.MatrixCamera> WithViewMatrix(this Style<System.Windows.Media.Media3D.MatrixCamera> target, ValueProxy<System.Windows.Media.Media3D.Matrix3D>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.MatrixCamera.ViewMatrixProperty); return target;}

//ProjectionMatrixProperty
public static System.Windows.Media.Media3D.MatrixCamera WithProjectionMatrix(this System.Windows.Media.Media3D.MatrixCamera target, ValueProxy<System.Windows.Media.Media3D.Matrix3D>? value) {value?.SetValue(target, System.Windows.Media.Media3D.MatrixCamera.ProjectionMatrixProperty); return target;}
public static Style<System.Windows.Media.Media3D.MatrixCamera> WithProjectionMatrix(this Style<System.Windows.Media.Media3D.MatrixCamera> target, ValueProxy<System.Windows.Media.Media3D.Matrix3D>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.MatrixCamera.ProjectionMatrixProperty); return target;}

//ModelProperty
public static System.Windows.Media.Media3D.ModelUIElement3D WithModel(this System.Windows.Media.Media3D.ModelUIElement3D target, ValueProxy<System.Windows.Media.Media3D.Model3D>? value) {value?.SetValue(target, System.Windows.Media.Media3D.ModelUIElement3D.ModelProperty); return target;}
public static Style<System.Windows.Media.Media3D.ModelUIElement3D> WithModel(this Style<System.Windows.Media.Media3D.ModelUIElement3D> target, ValueProxy<System.Windows.Media.Media3D.Model3D>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.ModelUIElement3D.ModelProperty); return target;}

//NearPlaneDistanceProperty
public static TChild WithNearPlaneDistance<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Media3D.ProjectionCamera, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.ProjectionCamera{value?.SetValue(target, System.Windows.Media.Media3D.ProjectionCamera.NearPlaneDistanceProperty); return target;}
public static Style<TChild> WithNearPlaneDistance<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Media3D.ProjectionCamera, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.ProjectionCamera{value?.StyleSetter(target, System.Windows.Media.Media3D.ProjectionCamera.NearPlaneDistanceProperty); return target;}

//FarPlaneDistanceProperty
public static TChild WithFarPlaneDistance<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Media3D.ProjectionCamera, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.ProjectionCamera{value?.SetValue(target, System.Windows.Media.Media3D.ProjectionCamera.FarPlaneDistanceProperty); return target;}
public static Style<TChild> WithFarPlaneDistance<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Media3D.ProjectionCamera, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.ProjectionCamera{value?.StyleSetter(target, System.Windows.Media.Media3D.ProjectionCamera.FarPlaneDistanceProperty); return target;}

//PositionProperty
public static TChild WithPosition<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Point3D>? value, Disambigator<System.Windows.Media.Media3D.ProjectionCamera, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.ProjectionCamera{value?.SetValue(target, System.Windows.Media.Media3D.ProjectionCamera.PositionProperty); return target;}
public static Style<TChild> WithPosition<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Point3D>? value, Disambigator<System.Windows.Media.Media3D.ProjectionCamera, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.ProjectionCamera{value?.StyleSetter(target, System.Windows.Media.Media3D.ProjectionCamera.PositionProperty); return target;}
public static TChild WithPosition<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Point3D>? value, Disambigator<System.Windows.Media.Media3D.PointLightBase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.PointLightBase{value?.SetValue(target, System.Windows.Media.Media3D.PointLightBase.PositionProperty); return target;}
public static Style<TChild> WithPosition<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Point3D>? value, Disambigator<System.Windows.Media.Media3D.PointLightBase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.PointLightBase{value?.StyleSetter(target, System.Windows.Media.Media3D.PointLightBase.PositionProperty); return target;}

//LookDirectionProperty
public static TChild WithLookDirection<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Vector3D>? value, Disambigator<System.Windows.Media.Media3D.ProjectionCamera, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.ProjectionCamera{value?.SetValue(target, System.Windows.Media.Media3D.ProjectionCamera.LookDirectionProperty); return target;}
public static Style<TChild> WithLookDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Vector3D>? value, Disambigator<System.Windows.Media.Media3D.ProjectionCamera, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.ProjectionCamera{value?.StyleSetter(target, System.Windows.Media.Media3D.ProjectionCamera.LookDirectionProperty); return target;}

//UpDirectionProperty
public static TChild WithUpDirection<TChild>(this TChild target, ValueProxy<System.Windows.Media.Media3D.Vector3D>? value, Disambigator<System.Windows.Media.Media3D.ProjectionCamera, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.ProjectionCamera{value?.SetValue(target, System.Windows.Media.Media3D.ProjectionCamera.UpDirectionProperty); return target;}
public static Style<TChild> WithUpDirection<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Media3D.Vector3D>? value, Disambigator<System.Windows.Media.Media3D.ProjectionCamera, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.ProjectionCamera{value?.StyleSetter(target, System.Windows.Media.Media3D.ProjectionCamera.UpDirectionProperty); return target;}

//FieldOfViewProperty
public static System.Windows.Media.Media3D.PerspectiveCamera WithFieldOfView(this System.Windows.Media.Media3D.PerspectiveCamera target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.PerspectiveCamera.FieldOfViewProperty); return target;}
public static Style<System.Windows.Media.Media3D.PerspectiveCamera> WithFieldOfView(this Style<System.Windows.Media.Media3D.PerspectiveCamera> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.PerspectiveCamera.FieldOfViewProperty); return target;}

//RangeProperty
public static TChild WithRange<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Media3D.PointLightBase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.PointLightBase{value?.SetValue(target, System.Windows.Media.Media3D.PointLightBase.RangeProperty); return target;}
public static Style<TChild> WithRange<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Media3D.PointLightBase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.PointLightBase{value?.StyleSetter(target, System.Windows.Media.Media3D.PointLightBase.RangeProperty); return target;}

//ConstantAttenuationProperty
public static TChild WithConstantAttenuation<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Media3D.PointLightBase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.PointLightBase{value?.SetValue(target, System.Windows.Media.Media3D.PointLightBase.ConstantAttenuationProperty); return target;}
public static Style<TChild> WithConstantAttenuation<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Media3D.PointLightBase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.PointLightBase{value?.StyleSetter(target, System.Windows.Media.Media3D.PointLightBase.ConstantAttenuationProperty); return target;}

//LinearAttenuationProperty
public static TChild WithLinearAttenuation<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Media3D.PointLightBase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.PointLightBase{value?.SetValue(target, System.Windows.Media.Media3D.PointLightBase.LinearAttenuationProperty); return target;}
public static Style<TChild> WithLinearAttenuation<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Media3D.PointLightBase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.PointLightBase{value?.StyleSetter(target, System.Windows.Media.Media3D.PointLightBase.LinearAttenuationProperty); return target;}

//QuadraticAttenuationProperty
public static TChild WithQuadraticAttenuation<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Media3D.PointLightBase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.PointLightBase{value?.SetValue(target, System.Windows.Media.Media3D.PointLightBase.QuadraticAttenuationProperty); return target;}
public static Style<TChild> WithQuadraticAttenuation<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Media3D.PointLightBase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Media3D.PointLightBase{value?.StyleSetter(target, System.Windows.Media.Media3D.PointLightBase.QuadraticAttenuationProperty); return target;}

//CenterZProperty
public static System.Windows.Media.Media3D.RotateTransform3D WithCenterZ(this System.Windows.Media.Media3D.RotateTransform3D target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.RotateTransform3D.CenterZProperty); return target;}
public static Style<System.Windows.Media.Media3D.RotateTransform3D> WithCenterZ(this Style<System.Windows.Media.Media3D.RotateTransform3D> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.RotateTransform3D.CenterZProperty); return target;}
public static System.Windows.Media.Media3D.ScaleTransform3D WithCenterZ(this System.Windows.Media.Media3D.ScaleTransform3D target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.ScaleTransform3D.CenterZProperty); return target;}
public static Style<System.Windows.Media.Media3D.ScaleTransform3D> WithCenterZ(this Style<System.Windows.Media.Media3D.ScaleTransform3D> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.ScaleTransform3D.CenterZProperty); return target;}

//RotationProperty
public static System.Windows.Media.Media3D.RotateTransform3D WithRotation(this System.Windows.Media.Media3D.RotateTransform3D target, ValueProxy<System.Windows.Media.Media3D.Rotation3D>? value) {value?.SetValue(target, System.Windows.Media.Media3D.RotateTransform3D.RotationProperty); return target;}
public static Style<System.Windows.Media.Media3D.RotateTransform3D> WithRotation(this Style<System.Windows.Media.Media3D.RotateTransform3D> target, ValueProxy<System.Windows.Media.Media3D.Rotation3D>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.RotateTransform3D.RotationProperty); return target;}
public static System.Windows.Media.Imaging.BitmapImage WithRotation(this System.Windows.Media.Imaging.BitmapImage target, ValueProxy<System.Windows.Media.Imaging.Rotation>? value) {value?.SetValue(target, System.Windows.Media.Imaging.BitmapImage.RotationProperty); return target;}
public static Style<System.Windows.Media.Imaging.BitmapImage> WithRotation(this Style<System.Windows.Media.Imaging.BitmapImage> target, ValueProxy<System.Windows.Media.Imaging.Rotation>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.BitmapImage.RotationProperty); return target;}

//ScaleZProperty
public static System.Windows.Media.Media3D.ScaleTransform3D WithScaleZ(this System.Windows.Media.Media3D.ScaleTransform3D target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.ScaleTransform3D.ScaleZProperty); return target;}
public static Style<System.Windows.Media.Media3D.ScaleTransform3D> WithScaleZ(this Style<System.Windows.Media.Media3D.ScaleTransform3D> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.ScaleTransform3D.ScaleZProperty); return target;}

//SpecularPowerProperty
public static System.Windows.Media.Media3D.SpecularMaterial WithSpecularPower(this System.Windows.Media.Media3D.SpecularMaterial target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.SpecularMaterial.SpecularPowerProperty); return target;}
public static Style<System.Windows.Media.Media3D.SpecularMaterial> WithSpecularPower(this Style<System.Windows.Media.Media3D.SpecularMaterial> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.SpecularMaterial.SpecularPowerProperty); return target;}

//OuterConeAngleProperty
public static System.Windows.Media.Media3D.SpotLight WithOuterConeAngle(this System.Windows.Media.Media3D.SpotLight target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.SpotLight.OuterConeAngleProperty); return target;}
public static Style<System.Windows.Media.Media3D.SpotLight> WithOuterConeAngle(this Style<System.Windows.Media.Media3D.SpotLight> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.SpotLight.OuterConeAngleProperty); return target;}

//InnerConeAngleProperty
public static System.Windows.Media.Media3D.SpotLight WithInnerConeAngle(this System.Windows.Media.Media3D.SpotLight target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.SpotLight.InnerConeAngleProperty); return target;}
public static Style<System.Windows.Media.Media3D.SpotLight> WithInnerConeAngle(this Style<System.Windows.Media.Media3D.SpotLight> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.SpotLight.InnerConeAngleProperty); return target;}

//OffsetXProperty
public static System.Windows.Media.Media3D.TranslateTransform3D WithOffsetX(this System.Windows.Media.Media3D.TranslateTransform3D target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.TranslateTransform3D.OffsetXProperty); return target;}
public static Style<System.Windows.Media.Media3D.TranslateTransform3D> WithOffsetX(this Style<System.Windows.Media.Media3D.TranslateTransform3D> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.TranslateTransform3D.OffsetXProperty); return target;}

//OffsetYProperty
public static System.Windows.Media.Media3D.TranslateTransform3D WithOffsetY(this System.Windows.Media.Media3D.TranslateTransform3D target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.TranslateTransform3D.OffsetYProperty); return target;}
public static Style<System.Windows.Media.Media3D.TranslateTransform3D> WithOffsetY(this Style<System.Windows.Media.Media3D.TranslateTransform3D> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.TranslateTransform3D.OffsetYProperty); return target;}

//OffsetZProperty
public static System.Windows.Media.Media3D.TranslateTransform3D WithOffsetZ(this System.Windows.Media.Media3D.TranslateTransform3D target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Media3D.TranslateTransform3D.OffsetZProperty); return target;}
public static Style<System.Windows.Media.Media3D.TranslateTransform3D> WithOffsetZ(this Style<System.Windows.Media.Media3D.TranslateTransform3D> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Media3D.TranslateTransform3D.OffsetZProperty); return target;}

//AmplitudeProperty
public static TChild WithAmplitude<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.BackEase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.BackEase{value?.SetValue(target, System.Windows.Media.Animation.BackEase.AmplitudeProperty); return target;}
public static Style<TChild> WithAmplitude<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.BackEase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.BackEase{value?.StyleSetter(target, System.Windows.Media.Animation.BackEase.AmplitudeProperty); return target;}

//EasingModeProperty
public static TChild WithEasingMode<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.EasingMode>? value, Disambigator<System.Windows.Media.Animation.EasingFunctionBase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingFunctionBase{value?.SetValue(target, System.Windows.Media.Animation.EasingFunctionBase.EasingModeProperty); return target;}
public static Style<TChild> WithEasingMode<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.EasingMode>? value, Disambigator<System.Windows.Media.Animation.EasingFunctionBase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingFunctionBase{value?.StyleSetter(target, System.Windows.Media.Animation.EasingFunctionBase.EasingModeProperty); return target;}

//BouncesProperty
public static TChild WithBounces<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Media.Animation.BounceEase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.BounceEase{value?.SetValue(target, System.Windows.Media.Animation.BounceEase.BouncesProperty); return target;}
public static Style<TChild> WithBounces<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Media.Animation.BounceEase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.BounceEase{value?.StyleSetter(target, System.Windows.Media.Animation.BounceEase.BouncesProperty); return target;}

//BouncinessProperty
public static TChild WithBounciness<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.BounceEase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.BounceEase{value?.SetValue(target, System.Windows.Media.Animation.BounceEase.BouncinessProperty); return target;}
public static Style<TChild> WithBounciness<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.BounceEase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.BounceEase{value?.StyleSetter(target, System.Windows.Media.Animation.BounceEase.BouncinessProperty); return target;}

//SlipBehaviorProperty
public static TChild WithSlipBehavior<TChild>(this TChild target, ValueProxy<System.Windows.Media.Animation.SlipBehavior>? value, Disambigator<System.Windows.Media.Animation.ParallelTimeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ParallelTimeline{value?.SetValue(target, System.Windows.Media.Animation.ParallelTimeline.SlipBehaviorProperty); return target;}
public static Style<TChild> WithSlipBehavior<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.Animation.SlipBehavior>? value, Disambigator<System.Windows.Media.Animation.ParallelTimeline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ParallelTimeline{value?.StyleSetter(target, System.Windows.Media.Animation.ParallelTimeline.SlipBehaviorProperty); return target;}

//PathGeometryProperty
public static TChild WithPathGeometry<TChild>(this TChild target, ValueProxy<System.Windows.Media.PathGeometry>? value, Disambigator<System.Windows.Media.Animation.DoubleAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimationUsingPath{value?.SetValue(target, System.Windows.Media.Animation.DoubleAnimationUsingPath.PathGeometryProperty); return target;}
public static Style<TChild> WithPathGeometry<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.PathGeometry>? value, Disambigator<System.Windows.Media.Animation.DoubleAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimationUsingPath{value?.StyleSetter(target, System.Windows.Media.Animation.DoubleAnimationUsingPath.PathGeometryProperty); return target;}
public static TChild WithPathGeometry<TChild>(this TChild target, ValueProxy<System.Windows.Media.PathGeometry>? value, Disambigator<System.Windows.Media.Animation.MatrixAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.MatrixAnimationUsingPath{value?.SetValue(target, System.Windows.Media.Animation.MatrixAnimationUsingPath.PathGeometryProperty); return target;}
public static Style<TChild> WithPathGeometry<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.PathGeometry>? value, Disambigator<System.Windows.Media.Animation.MatrixAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.MatrixAnimationUsingPath{value?.StyleSetter(target, System.Windows.Media.Animation.MatrixAnimationUsingPath.PathGeometryProperty); return target;}
public static TChild WithPathGeometry<TChild>(this TChild target, ValueProxy<System.Windows.Media.PathGeometry>? value, Disambigator<System.Windows.Media.Animation.PointAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimationUsingPath{value?.SetValue(target, System.Windows.Media.Animation.PointAnimationUsingPath.PathGeometryProperty); return target;}
public static Style<TChild> WithPathGeometry<TChild>(this Style<TChild> target, ValueProxy<System.Windows.Media.PathGeometry>? value, Disambigator<System.Windows.Media.Animation.PointAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimationUsingPath{value?.StyleSetter(target, System.Windows.Media.Animation.PointAnimationUsingPath.PathGeometryProperty); return target;}

//UseShortestPathProperty
public static TChild WithUseShortestPath<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.EasingQuaternionKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingQuaternionKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.EasingQuaternionKeyFrame.UseShortestPathProperty); return target;}
public static Style<TChild> WithUseShortestPath<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.EasingQuaternionKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.EasingQuaternionKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.EasingQuaternionKeyFrame.UseShortestPathProperty); return target;}
public static TChild WithUseShortestPath<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.LinearQuaternionKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.LinearQuaternionKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.LinearQuaternionKeyFrame.UseShortestPathProperty); return target;}
public static Style<TChild> WithUseShortestPath<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.LinearQuaternionKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.LinearQuaternionKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.LinearQuaternionKeyFrame.UseShortestPathProperty); return target;}
public static TChild WithUseShortestPath<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimation{value?.SetValue(target, System.Windows.Media.Animation.QuaternionAnimation.UseShortestPathProperty); return target;}
public static Style<TChild> WithUseShortestPath<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimation{value?.StyleSetter(target, System.Windows.Media.Animation.QuaternionAnimation.UseShortestPathProperty); return target;}
public static TChild WithUseShortestPath<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.SplineQuaternionKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineQuaternionKeyFrame{value?.SetValue(target, System.Windows.Media.Animation.SplineQuaternionKeyFrame.UseShortestPathProperty); return target;}
public static Style<TChild> WithUseShortestPath<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.SplineQuaternionKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SplineQuaternionKeyFrame{value?.StyleSetter(target, System.Windows.Media.Animation.SplineQuaternionKeyFrame.UseShortestPathProperty); return target;}

//OscillationsProperty
public static TChild WithOscillations<TChild>(this TChild target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Media.Animation.ElasticEase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ElasticEase{value?.SetValue(target, System.Windows.Media.Animation.ElasticEase.OscillationsProperty); return target;}
public static Style<TChild> WithOscillations<TChild>(this Style<TChild> target, ValueProxy<System.Int32>? value, Disambigator<System.Windows.Media.Animation.ElasticEase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ElasticEase{value?.StyleSetter(target, System.Windows.Media.Animation.ElasticEase.OscillationsProperty); return target;}

//SpringinessProperty
public static TChild WithSpringiness<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.ElasticEase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ElasticEase{value?.SetValue(target, System.Windows.Media.Animation.ElasticEase.SpringinessProperty); return target;}
public static Style<TChild> WithSpringiness<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.ElasticEase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ElasticEase{value?.StyleSetter(target, System.Windows.Media.Animation.ElasticEase.SpringinessProperty); return target;}

//ExponentProperty
public static TChild WithExponent<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.ExponentialEase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ExponentialEase{value?.SetValue(target, System.Windows.Media.Animation.ExponentialEase.ExponentProperty); return target;}
public static Style<TChild> WithExponent<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.ExponentialEase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ExponentialEase{value?.StyleSetter(target, System.Windows.Media.Animation.ExponentialEase.ExponentProperty); return target;}

//DoesRotateWithTangentProperty
public static TChild WithDoesRotateWithTangent<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.MatrixAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.MatrixAnimationUsingPath{value?.SetValue(target, System.Windows.Media.Animation.MatrixAnimationUsingPath.DoesRotateWithTangentProperty); return target;}
public static Style<TChild> WithDoesRotateWithTangent<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.MatrixAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.MatrixAnimationUsingPath{value?.StyleSetter(target, System.Windows.Media.Animation.MatrixAnimationUsingPath.DoesRotateWithTangentProperty); return target;}

//IsAngleCumulativeProperty
public static TChild WithIsAngleCumulative<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.MatrixAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.MatrixAnimationUsingPath{value?.SetValue(target, System.Windows.Media.Animation.MatrixAnimationUsingPath.IsAngleCumulativeProperty); return target;}
public static Style<TChild> WithIsAngleCumulative<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.MatrixAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.MatrixAnimationUsingPath{value?.StyleSetter(target, System.Windows.Media.Animation.MatrixAnimationUsingPath.IsAngleCumulativeProperty); return target;}

//IsOffsetCumulativeProperty
public static TChild WithIsOffsetCumulative<TChild>(this TChild target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.MatrixAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.MatrixAnimationUsingPath{value?.SetValue(target, System.Windows.Media.Animation.MatrixAnimationUsingPath.IsOffsetCumulativeProperty); return target;}
public static Style<TChild> WithIsOffsetCumulative<TChild>(this Style<TChild> target, ValueProxy<System.Boolean>? value, Disambigator<System.Windows.Media.Animation.MatrixAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.MatrixAnimationUsingPath{value?.StyleSetter(target, System.Windows.Media.Animation.MatrixAnimationUsingPath.IsOffsetCumulativeProperty); return target;}

//PowerProperty
public static TChild WithPower<TChild>(this TChild target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.PowerEase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PowerEase{value?.SetValue(target, System.Windows.Media.Animation.PowerEase.PowerProperty); return target;}
public static Style<TChild> WithPower<TChild>(this Style<TChild> target, ValueProxy<System.Double>? value, Disambigator<System.Windows.Media.Animation.PowerEase, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PowerEase{value?.StyleSetter(target, System.Windows.Media.Animation.PowerEase.PowerProperty); return target;}

//UriCachePolicyProperty
public static System.Windows.Media.Imaging.BitmapImage WithUriCachePolicy(this System.Windows.Media.Imaging.BitmapImage target, ValueProxy<System.Net.Cache.RequestCachePolicy>? value) {value?.SetValue(target, System.Windows.Media.Imaging.BitmapImage.UriCachePolicyProperty); return target;}
public static Style<System.Windows.Media.Imaging.BitmapImage> WithUriCachePolicy(this Style<System.Windows.Media.Imaging.BitmapImage> target, ValueProxy<System.Net.Cache.RequestCachePolicy>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.BitmapImage.UriCachePolicyProperty); return target;}

//UriSourceProperty
public static System.Windows.Media.Imaging.BitmapImage WithUriSource(this System.Windows.Media.Imaging.BitmapImage target, ValueProxy<System.Uri>? value) {value?.SetValue(target, System.Windows.Media.Imaging.BitmapImage.UriSourceProperty); return target;}
public static Style<System.Windows.Media.Imaging.BitmapImage> WithUriSource(this Style<System.Windows.Media.Imaging.BitmapImage> target, ValueProxy<System.Uri>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.BitmapImage.UriSourceProperty); return target;}
public static System.Windows.Media.Effects.PixelShader WithUriSource(this System.Windows.Media.Effects.PixelShader target, ValueProxy<System.Uri>? value) {value?.SetValue(target, System.Windows.Media.Effects.PixelShader.UriSourceProperty); return target;}
public static Style<System.Windows.Media.Effects.PixelShader> WithUriSource(this Style<System.Windows.Media.Effects.PixelShader> target, ValueProxy<System.Uri>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.PixelShader.UriSourceProperty); return target;}

//StreamSourceProperty
public static System.Windows.Media.Imaging.BitmapImage WithStreamSource(this System.Windows.Media.Imaging.BitmapImage target, ValueProxy<System.IO.Stream>? value) {value?.SetValue(target, System.Windows.Media.Imaging.BitmapImage.StreamSourceProperty); return target;}
public static Style<System.Windows.Media.Imaging.BitmapImage> WithStreamSource(this Style<System.Windows.Media.Imaging.BitmapImage> target, ValueProxy<System.IO.Stream>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.BitmapImage.StreamSourceProperty); return target;}

//DecodePixelWidthProperty
public static System.Windows.Media.Imaging.BitmapImage WithDecodePixelWidth(this System.Windows.Media.Imaging.BitmapImage target, ValueProxy<System.Int32>? value) {value?.SetValue(target, System.Windows.Media.Imaging.BitmapImage.DecodePixelWidthProperty); return target;}
public static Style<System.Windows.Media.Imaging.BitmapImage> WithDecodePixelWidth(this Style<System.Windows.Media.Imaging.BitmapImage> target, ValueProxy<System.Int32>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.BitmapImage.DecodePixelWidthProperty); return target;}

//DecodePixelHeightProperty
public static System.Windows.Media.Imaging.BitmapImage WithDecodePixelHeight(this System.Windows.Media.Imaging.BitmapImage target, ValueProxy<System.Int32>? value) {value?.SetValue(target, System.Windows.Media.Imaging.BitmapImage.DecodePixelHeightProperty); return target;}
public static Style<System.Windows.Media.Imaging.BitmapImage> WithDecodePixelHeight(this Style<System.Windows.Media.Imaging.BitmapImage> target, ValueProxy<System.Int32>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.BitmapImage.DecodePixelHeightProperty); return target;}

//SourceRectProperty
public static System.Windows.Media.Imaging.BitmapImage WithSourceRect(this System.Windows.Media.Imaging.BitmapImage target, ValueProxy<System.Windows.Int32Rect>? value) {value?.SetValue(target, System.Windows.Media.Imaging.BitmapImage.SourceRectProperty); return target;}
public static Style<System.Windows.Media.Imaging.BitmapImage> WithSourceRect(this Style<System.Windows.Media.Imaging.BitmapImage> target, ValueProxy<System.Windows.Int32Rect>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.BitmapImage.SourceRectProperty); return target;}
public static System.Windows.Media.Imaging.CroppedBitmap WithSourceRect(this System.Windows.Media.Imaging.CroppedBitmap target, ValueProxy<System.Windows.Int32Rect>? value) {value?.SetValue(target, System.Windows.Media.Imaging.CroppedBitmap.SourceRectProperty); return target;}
public static Style<System.Windows.Media.Imaging.CroppedBitmap> WithSourceRect(this Style<System.Windows.Media.Imaging.CroppedBitmap> target, ValueProxy<System.Windows.Int32Rect>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.CroppedBitmap.SourceRectProperty); return target;}

//CreateOptionsProperty
public static System.Windows.Media.Imaging.BitmapImage WithCreateOptions(this System.Windows.Media.Imaging.BitmapImage target, ValueProxy<System.Windows.Media.Imaging.BitmapCreateOptions>? value) {value?.SetValue(target, System.Windows.Media.Imaging.BitmapImage.CreateOptionsProperty); return target;}
public static Style<System.Windows.Media.Imaging.BitmapImage> WithCreateOptions(this Style<System.Windows.Media.Imaging.BitmapImage> target, ValueProxy<System.Windows.Media.Imaging.BitmapCreateOptions>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.BitmapImage.CreateOptionsProperty); return target;}

//CacheOptionProperty
public static System.Windows.Media.Imaging.BitmapImage WithCacheOption(this System.Windows.Media.Imaging.BitmapImage target, ValueProxy<System.Windows.Media.Imaging.BitmapCacheOption>? value) {value?.SetValue(target, System.Windows.Media.Imaging.BitmapImage.CacheOptionProperty); return target;}
public static Style<System.Windows.Media.Imaging.BitmapImage> WithCacheOption(this Style<System.Windows.Media.Imaging.BitmapImage> target, ValueProxy<System.Windows.Media.Imaging.BitmapCacheOption>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.BitmapImage.CacheOptionProperty); return target;}

//SourceColorContextProperty
public static System.Windows.Media.Imaging.ColorConvertedBitmap WithSourceColorContext(this System.Windows.Media.Imaging.ColorConvertedBitmap target, ValueProxy<System.Windows.Media.ColorContext>? value) {value?.SetValue(target, System.Windows.Media.Imaging.ColorConvertedBitmap.SourceColorContextProperty); return target;}
public static Style<System.Windows.Media.Imaging.ColorConvertedBitmap> WithSourceColorContext(this Style<System.Windows.Media.Imaging.ColorConvertedBitmap> target, ValueProxy<System.Windows.Media.ColorContext>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.ColorConvertedBitmap.SourceColorContextProperty); return target;}

//DestinationColorContextProperty
public static System.Windows.Media.Imaging.ColorConvertedBitmap WithDestinationColorContext(this System.Windows.Media.Imaging.ColorConvertedBitmap target, ValueProxy<System.Windows.Media.ColorContext>? value) {value?.SetValue(target, System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationColorContextProperty); return target;}
public static Style<System.Windows.Media.Imaging.ColorConvertedBitmap> WithDestinationColorContext(this Style<System.Windows.Media.Imaging.ColorConvertedBitmap> target, ValueProxy<System.Windows.Media.ColorContext>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationColorContextProperty); return target;}

//DestinationFormatProperty
public static System.Windows.Media.Imaging.ColorConvertedBitmap WithDestinationFormat(this System.Windows.Media.Imaging.ColorConvertedBitmap target, ValueProxy<System.Windows.Media.PixelFormat>? value) {value?.SetValue(target, System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationFormatProperty); return target;}
public static Style<System.Windows.Media.Imaging.ColorConvertedBitmap> WithDestinationFormat(this Style<System.Windows.Media.Imaging.ColorConvertedBitmap> target, ValueProxy<System.Windows.Media.PixelFormat>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationFormatProperty); return target;}
public static System.Windows.Media.Imaging.FormatConvertedBitmap WithDestinationFormat(this System.Windows.Media.Imaging.FormatConvertedBitmap target, ValueProxy<System.Windows.Media.PixelFormat>? value) {value?.SetValue(target, System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormatProperty); return target;}
public static Style<System.Windows.Media.Imaging.FormatConvertedBitmap> WithDestinationFormat(this Style<System.Windows.Media.Imaging.FormatConvertedBitmap> target, ValueProxy<System.Windows.Media.PixelFormat>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormatProperty); return target;}

//DestinationPaletteProperty
public static System.Windows.Media.Imaging.FormatConvertedBitmap WithDestinationPalette(this System.Windows.Media.Imaging.FormatConvertedBitmap target, ValueProxy<System.Windows.Media.Imaging.BitmapPalette>? value) {value?.SetValue(target, System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPaletteProperty); return target;}
public static Style<System.Windows.Media.Imaging.FormatConvertedBitmap> WithDestinationPalette(this Style<System.Windows.Media.Imaging.FormatConvertedBitmap> target, ValueProxy<System.Windows.Media.Imaging.BitmapPalette>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPaletteProperty); return target;}

//AlphaThresholdProperty
public static System.Windows.Media.Imaging.FormatConvertedBitmap WithAlphaThreshold(this System.Windows.Media.Imaging.FormatConvertedBitmap target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThresholdProperty); return target;}
public static Style<System.Windows.Media.Imaging.FormatConvertedBitmap> WithAlphaThreshold(this Style<System.Windows.Media.Imaging.FormatConvertedBitmap> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThresholdProperty); return target;}

//BevelWidthProperty
public static System.Windows.Media.Effects.BevelBitmapEffect WithBevelWidth(this System.Windows.Media.Effects.BevelBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.BevelBitmapEffect.BevelWidthProperty); return target;}
public static Style<System.Windows.Media.Effects.BevelBitmapEffect> WithBevelWidth(this Style<System.Windows.Media.Effects.BevelBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.BevelBitmapEffect.BevelWidthProperty); return target;}

//ReliefProperty
public static System.Windows.Media.Effects.BevelBitmapEffect WithRelief(this System.Windows.Media.Effects.BevelBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.BevelBitmapEffect.ReliefProperty); return target;}
public static Style<System.Windows.Media.Effects.BevelBitmapEffect> WithRelief(this Style<System.Windows.Media.Effects.BevelBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.BevelBitmapEffect.ReliefProperty); return target;}
public static System.Windows.Media.Effects.EmbossBitmapEffect WithRelief(this System.Windows.Media.Effects.EmbossBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.EmbossBitmapEffect.ReliefProperty); return target;}
public static Style<System.Windows.Media.Effects.EmbossBitmapEffect> WithRelief(this Style<System.Windows.Media.Effects.EmbossBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.EmbossBitmapEffect.ReliefProperty); return target;}

//LightAngleProperty
public static System.Windows.Media.Effects.BevelBitmapEffect WithLightAngle(this System.Windows.Media.Effects.BevelBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.BevelBitmapEffect.LightAngleProperty); return target;}
public static Style<System.Windows.Media.Effects.BevelBitmapEffect> WithLightAngle(this Style<System.Windows.Media.Effects.BevelBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.BevelBitmapEffect.LightAngleProperty); return target;}
public static System.Windows.Media.Effects.EmbossBitmapEffect WithLightAngle(this System.Windows.Media.Effects.EmbossBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.EmbossBitmapEffect.LightAngleProperty); return target;}
public static Style<System.Windows.Media.Effects.EmbossBitmapEffect> WithLightAngle(this Style<System.Windows.Media.Effects.EmbossBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.EmbossBitmapEffect.LightAngleProperty); return target;}

//SmoothnessProperty
public static System.Windows.Media.Effects.BevelBitmapEffect WithSmoothness(this System.Windows.Media.Effects.BevelBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.BevelBitmapEffect.SmoothnessProperty); return target;}
public static Style<System.Windows.Media.Effects.BevelBitmapEffect> WithSmoothness(this Style<System.Windows.Media.Effects.BevelBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.BevelBitmapEffect.SmoothnessProperty); return target;}

//EdgeProfileProperty
public static System.Windows.Media.Effects.BevelBitmapEffect WithEdgeProfile(this System.Windows.Media.Effects.BevelBitmapEffect target, ValueProxy<System.Windows.Media.Effects.EdgeProfile>? value) {value?.SetValue(target, System.Windows.Media.Effects.BevelBitmapEffect.EdgeProfileProperty); return target;}
public static Style<System.Windows.Media.Effects.BevelBitmapEffect> WithEdgeProfile(this Style<System.Windows.Media.Effects.BevelBitmapEffect> target, ValueProxy<System.Windows.Media.Effects.EdgeProfile>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.BevelBitmapEffect.EdgeProfileProperty); return target;}

//RadiusProperty
public static System.Windows.Media.Effects.BlurBitmapEffect WithRadius(this System.Windows.Media.Effects.BlurBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.BlurBitmapEffect.RadiusProperty); return target;}
public static Style<System.Windows.Media.Effects.BlurBitmapEffect> WithRadius(this Style<System.Windows.Media.Effects.BlurBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.BlurBitmapEffect.RadiusProperty); return target;}
public static System.Windows.Media.Effects.BlurEffect WithRadius(this System.Windows.Media.Effects.BlurEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.BlurEffect.RadiusProperty); return target;}
public static Style<System.Windows.Media.Effects.BlurEffect> WithRadius(this Style<System.Windows.Media.Effects.BlurEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.BlurEffect.RadiusProperty); return target;}

//KernelTypeProperty
public static System.Windows.Media.Effects.BlurBitmapEffect WithKernelType(this System.Windows.Media.Effects.BlurBitmapEffect target, ValueProxy<System.Windows.Media.Effects.KernelType>? value) {value?.SetValue(target, System.Windows.Media.Effects.BlurBitmapEffect.KernelTypeProperty); return target;}
public static Style<System.Windows.Media.Effects.BlurBitmapEffect> WithKernelType(this Style<System.Windows.Media.Effects.BlurBitmapEffect> target, ValueProxy<System.Windows.Media.Effects.KernelType>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.BlurBitmapEffect.KernelTypeProperty); return target;}
public static System.Windows.Media.Effects.BlurEffect WithKernelType(this System.Windows.Media.Effects.BlurEffect target, ValueProxy<System.Windows.Media.Effects.KernelType>? value) {value?.SetValue(target, System.Windows.Media.Effects.BlurEffect.KernelTypeProperty); return target;}
public static Style<System.Windows.Media.Effects.BlurEffect> WithKernelType(this Style<System.Windows.Media.Effects.BlurEffect> target, ValueProxy<System.Windows.Media.Effects.KernelType>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.BlurEffect.KernelTypeProperty); return target;}

//RenderingBiasProperty
public static System.Windows.Media.Effects.BlurEffect WithRenderingBias(this System.Windows.Media.Effects.BlurEffect target, ValueProxy<System.Windows.Media.Effects.RenderingBias>? value) {value?.SetValue(target, System.Windows.Media.Effects.BlurEffect.RenderingBiasProperty); return target;}
public static Style<System.Windows.Media.Effects.BlurEffect> WithRenderingBias(this Style<System.Windows.Media.Effects.BlurEffect> target, ValueProxy<System.Windows.Media.Effects.RenderingBias>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.BlurEffect.RenderingBiasProperty); return target;}
public static System.Windows.Media.Effects.DropShadowEffect WithRenderingBias(this System.Windows.Media.Effects.DropShadowEffect target, ValueProxy<System.Windows.Media.Effects.RenderingBias>? value) {value?.SetValue(target, System.Windows.Media.Effects.DropShadowEffect.RenderingBiasProperty); return target;}
public static Style<System.Windows.Media.Effects.DropShadowEffect> WithRenderingBias(this Style<System.Windows.Media.Effects.DropShadowEffect> target, ValueProxy<System.Windows.Media.Effects.RenderingBias>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.DropShadowEffect.RenderingBiasProperty); return target;}

//ShadowDepthProperty
public static System.Windows.Media.Effects.DropShadowBitmapEffect WithShadowDepth(this System.Windows.Media.Effects.DropShadowBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.DropShadowBitmapEffect.ShadowDepthProperty); return target;}
public static Style<System.Windows.Media.Effects.DropShadowBitmapEffect> WithShadowDepth(this Style<System.Windows.Media.Effects.DropShadowBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.DropShadowBitmapEffect.ShadowDepthProperty); return target;}
public static System.Windows.Media.Effects.DropShadowEffect WithShadowDepth(this System.Windows.Media.Effects.DropShadowEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.DropShadowEffect.ShadowDepthProperty); return target;}
public static Style<System.Windows.Media.Effects.DropShadowEffect> WithShadowDepth(this Style<System.Windows.Media.Effects.DropShadowEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.DropShadowEffect.ShadowDepthProperty); return target;}

//NoiseProperty
public static System.Windows.Media.Effects.DropShadowBitmapEffect WithNoise(this System.Windows.Media.Effects.DropShadowBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.DropShadowBitmapEffect.NoiseProperty); return target;}
public static Style<System.Windows.Media.Effects.DropShadowBitmapEffect> WithNoise(this Style<System.Windows.Media.Effects.DropShadowBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.DropShadowBitmapEffect.NoiseProperty); return target;}
public static System.Windows.Media.Effects.OuterGlowBitmapEffect WithNoise(this System.Windows.Media.Effects.OuterGlowBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.OuterGlowBitmapEffect.NoiseProperty); return target;}
public static Style<System.Windows.Media.Effects.OuterGlowBitmapEffect> WithNoise(this Style<System.Windows.Media.Effects.OuterGlowBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.OuterGlowBitmapEffect.NoiseProperty); return target;}

//SoftnessProperty
public static System.Windows.Media.Effects.DropShadowBitmapEffect WithSoftness(this System.Windows.Media.Effects.DropShadowBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.DropShadowBitmapEffect.SoftnessProperty); return target;}
public static Style<System.Windows.Media.Effects.DropShadowBitmapEffect> WithSoftness(this Style<System.Windows.Media.Effects.DropShadowBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.DropShadowBitmapEffect.SoftnessProperty); return target;}

//BlurRadiusProperty
public static System.Windows.Media.Effects.DropShadowEffect WithBlurRadius(this System.Windows.Media.Effects.DropShadowEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.DropShadowEffect.BlurRadiusProperty); return target;}
public static Style<System.Windows.Media.Effects.DropShadowEffect> WithBlurRadius(this Style<System.Windows.Media.Effects.DropShadowEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.DropShadowEffect.BlurRadiusProperty); return target;}

//GlowColorProperty
public static System.Windows.Media.Effects.OuterGlowBitmapEffect WithGlowColor(this System.Windows.Media.Effects.OuterGlowBitmapEffect target, ValueProxy<System.Windows.Media.Color>? value) {value?.SetValue(target, System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowColorProperty); return target;}
public static Style<System.Windows.Media.Effects.OuterGlowBitmapEffect> WithGlowColor(this Style<System.Windows.Media.Effects.OuterGlowBitmapEffect> target, ValueProxy<System.Windows.Media.Color>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowColorProperty); return target;}

//GlowSizeProperty
public static System.Windows.Media.Effects.OuterGlowBitmapEffect WithGlowSize(this System.Windows.Media.Effects.OuterGlowBitmapEffect target, ValueProxy<System.Double>? value) {value?.SetValue(target, System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowSizeProperty); return target;}
public static Style<System.Windows.Media.Effects.OuterGlowBitmapEffect> WithGlowSize(this Style<System.Windows.Media.Effects.OuterGlowBitmapEffect> target, ValueProxy<System.Double>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowSizeProperty); return target;}

//ShaderRenderModeProperty
public static System.Windows.Media.Effects.PixelShader WithShaderRenderMode(this System.Windows.Media.Effects.PixelShader target, ValueProxy<System.Windows.Media.Effects.ShaderRenderMode>? value) {value?.SetValue(target, System.Windows.Media.Effects.PixelShader.ShaderRenderModeProperty); return target;}
public static Style<System.Windows.Media.Effects.PixelShader> WithShaderRenderMode(this Style<System.Windows.Media.Effects.PixelShader> target, ValueProxy<System.Windows.Media.Effects.ShaderRenderMode>? value) {value?.StyleSetter(target, System.Windows.Media.Effects.PixelShader.ShaderRenderModeProperty); return target;}
// Microsoft.Win32.CommonDialog / Tag
public static TChild WithTag<TChild>(this TChild target, System.Object? value, Disambigator<Microsoft.Win32.CommonDialog, TChild>? doNotUse = null) where TChild: Microsoft.Win32.CommonDialog
{if (value != null) target.Tag = value ?? default; return target; }
// Microsoft.Win32.FileDialog / AddExtension
public static TChild WithAddExtension<TChild>(this TChild target, System.Boolean? value, Disambigator<Microsoft.Win32.FileDialog, TChild>? doNotUse = null) where TChild: Microsoft.Win32.FileDialog
{if (value != null) target.AddExtension = value ?? default; return target; }
// Microsoft.Win32.FileDialog / CheckFileExists
public static TChild WithCheckFileExists<TChild>(this TChild target, System.Boolean? value, Disambigator<Microsoft.Win32.FileDialog, TChild>? doNotUse = null) where TChild: Microsoft.Win32.FileDialog
{if (value != null) target.CheckFileExists = value ?? default; return target; }
// Microsoft.Win32.FileDialog / CheckPathExists
public static TChild WithCheckPathExists<TChild>(this TChild target, System.Boolean? value, Disambigator<Microsoft.Win32.FileDialog, TChild>? doNotUse = null) where TChild: Microsoft.Win32.FileDialog
{if (value != null) target.CheckPathExists = value ?? default; return target; }
// Microsoft.Win32.FileDialog / DefaultExt
public static TChild WithDefaultExt<TChild>(this TChild target, System.String? value, Disambigator<Microsoft.Win32.FileDialog, TChild>? doNotUse = null) where TChild: Microsoft.Win32.FileDialog
{if (value != null) target.DefaultExt = value ?? default; return target; }
// Microsoft.Win32.FileDialog / DereferenceLinks
public static TChild WithDereferenceLinks<TChild>(this TChild target, System.Boolean? value, Disambigator<Microsoft.Win32.FileDialog, TChild>? doNotUse = null) where TChild: Microsoft.Win32.FileDialog
{if (value != null) target.DereferenceLinks = value ?? default; return target; }
// Microsoft.Win32.FileDialog / FileName
public static TChild WithFileName<TChild>(this TChild target, System.String? value, Disambigator<Microsoft.Win32.FileDialog, TChild>? doNotUse = null) where TChild: Microsoft.Win32.FileDialog
{if (value != null) target.FileName = value ?? default; return target; }
// Microsoft.Win32.FileDialog / Filter
public static TChild WithFilter<TChild>(this TChild target, System.String? value, Disambigator<Microsoft.Win32.FileDialog, TChild>? doNotUse = null) where TChild: Microsoft.Win32.FileDialog
{if (value != null) target.Filter = value ?? default; return target; }
// Microsoft.Win32.FileDialog / FilterIndex
public static TChild WithFilterIndex<TChild>(this TChild target, System.Int32? value, Disambigator<Microsoft.Win32.FileDialog, TChild>? doNotUse = null) where TChild: Microsoft.Win32.FileDialog
{if (value != null) target.FilterIndex = value ?? default; return target; }
// Microsoft.Win32.FileDialog / InitialDirectory
public static TChild WithInitialDirectory<TChild>(this TChild target, System.String? value, Disambigator<Microsoft.Win32.FileDialog, TChild>? doNotUse = null) where TChild: Microsoft.Win32.FileDialog
{if (value != null) target.InitialDirectory = value ?? default; return target; }
// Microsoft.Win32.FileDialog / RestoreDirectory
public static TChild WithRestoreDirectory<TChild>(this TChild target, System.Boolean? value, Disambigator<Microsoft.Win32.FileDialog, TChild>? doNotUse = null) where TChild: Microsoft.Win32.FileDialog
{if (value != null) target.RestoreDirectory = value ?? default; return target; }
// Microsoft.Win32.FileDialog / Title
public static TChild WithTitle<TChild>(this TChild target, System.String? value, Disambigator<Microsoft.Win32.FileDialog, TChild>? doNotUse = null) where TChild: Microsoft.Win32.FileDialog
{if (value != null) target.Title = value ?? default; return target; }
// Microsoft.Win32.FileDialog / ValidateNames
public static TChild WithValidateNames<TChild>(this TChild target, System.Boolean? value, Disambigator<Microsoft.Win32.FileDialog, TChild>? doNotUse = null) where TChild: Microsoft.Win32.FileDialog
{if (value != null) target.ValidateNames = value ?? default; return target; }
// Microsoft.Win32.FileDialog / CustomPlaces
public static TChild WithCustomPlaces<TChild>(this TChild target, System.Collections.Generic.IList<Microsoft.Win32.FileDialogCustomPlace>? value, Disambigator<Microsoft.Win32.FileDialog, TChild>? doNotUse = null) where TChild: Microsoft.Win32.FileDialog
{if (value != null) target.CustomPlaces = value ?? default; return target; }
// Microsoft.Win32.OpenFileDialog / Multiselect
public static Microsoft.Win32.OpenFileDialog WithMultiselect<TChild>(this Microsoft.Win32.OpenFileDialog target, System.Boolean? value) 
{if (value != null) target.Multiselect = value ?? default; return target; }
// Microsoft.Win32.OpenFileDialog / ReadOnlyChecked
public static Microsoft.Win32.OpenFileDialog WithReadOnlyChecked<TChild>(this Microsoft.Win32.OpenFileDialog target, System.Boolean? value) 
{if (value != null) target.ReadOnlyChecked = value ?? default; return target; }
// Microsoft.Win32.OpenFileDialog / ShowReadOnly
public static Microsoft.Win32.OpenFileDialog WithShowReadOnly<TChild>(this Microsoft.Win32.OpenFileDialog target, System.Boolean? value) 
{if (value != null) target.ShowReadOnly = value ?? default; return target; }
// Microsoft.Win32.SaveFileDialog / CreatePrompt
public static Microsoft.Win32.SaveFileDialog WithCreatePrompt<TChild>(this Microsoft.Win32.SaveFileDialog target, System.Boolean? value) 
{if (value != null) target.CreatePrompt = value ?? default; return target; }
// Microsoft.Win32.SaveFileDialog / OverwritePrompt
public static Microsoft.Win32.SaveFileDialog WithOverwritePrompt<TChild>(this Microsoft.Win32.SaveFileDialog target, System.Boolean? value) 
{if (value != null) target.OverwritePrompt = value ?? default; return target; }
// System.Windows.Application / MainWindow
public static TChild WithMainWindow<TChild>(this TChild target, System.Windows.Window? value, Disambigator<System.Windows.Application, TChild>? doNotUse = null) where TChild: System.Windows.Application
{if (value != null) target.MainWindow = value ?? default; return target; }
// System.Windows.Application / ShutdownMode
public static TChild WithShutdownMode<TChild>(this TChild target, System.Windows.ShutdownMode? value, Disambigator<System.Windows.Application, TChild>? doNotUse = null) where TChild: System.Windows.Application
{if (value != null) target.ShutdownMode = value ?? default; return target; }
// System.Windows.Application / Resources
public static TChild WithResources<TChild>(this TChild target, System.Windows.ResourceDictionary? value, Disambigator<System.Windows.Application, TChild>? doNotUse = null) where TChild: System.Windows.Application
{if (value != null) target.Resources = value ?? default; return target; }
// System.Windows.Application / StartupUri
public static TChild WithStartupUri<TChild>(this TChild target, System.Uri? value, Disambigator<System.Windows.Application, TChild>? doNotUse = null) where TChild: System.Windows.Application
{if (value != null) target.StartupUri = value ?? default; return target; }
// System.Windows.AttachedPropertyBrowsableForChildrenAttribute / IncludeDescendants
public static System.Windows.AttachedPropertyBrowsableForChildrenAttribute WithIncludeDescendants<TChild>(this System.Windows.AttachedPropertyBrowsableForChildrenAttribute target, System.Boolean? value) 
{if (value != null) target.IncludeDescendants = value ?? default; return target; }
// System.Windows.ComponentResourceKey / TypeInTargetAssembly
public static TChild WithTypeInTargetAssembly<TChild>(this TChild target, System.Type? value, Disambigator<System.Windows.ComponentResourceKey, TChild>? doNotUse = null) where TChild: System.Windows.ComponentResourceKey
{if (value != null) target.TypeInTargetAssembly = value ?? default; return target; }
// System.Windows.ComponentResourceKey / ResourceId
public static TChild WithResourceId<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.ComponentResourceKey, TChild>? doNotUse = null) where TChild: System.Windows.ComponentResourceKey
{if (value != null) target.ResourceId = value ?? default; return target; }
// System.Windows.Condition / Property
public static System.Windows.Condition WithProperty<TChild>(this System.Windows.Condition target, System.Windows.DependencyProperty? value) 
{if (value != null) target.Property = value ?? default; return target; }
// System.Windows.Condition / Binding
public static System.Windows.Condition WithBinding<TChild>(this System.Windows.Condition target, System.Windows.Data.BindingBase? value) 
{if (value != null) target.Binding = value ?? default; return target; }
// System.Windows.Condition / Value
public static System.Windows.Condition WithValue<TChild>(this System.Windows.Condition target, System.Object? value) 
{if (value != null) target.Value = value ?? default; return target; }
// System.Windows.Condition / SourceName
public static System.Windows.Condition WithSourceName<TChild>(this System.Windows.Condition target, System.String? value) 
{if (value != null) target.SourceName = value ?? default; return target; }
// System.Windows.CornerRadius / TopLeft
public static System.Windows.CornerRadius WithTopLeft<TChild>(this System.Windows.CornerRadius target, System.Double? value) 
{if (value != null) target.TopLeft = value ?? default; return target; }
// System.Windows.CornerRadius / TopRight
public static System.Windows.CornerRadius WithTopRight<TChild>(this System.Windows.CornerRadius target, System.Double? value) 
{if (value != null) target.TopRight = value ?? default; return target; }
// System.Windows.CornerRadius / BottomRight
public static System.Windows.CornerRadius WithBottomRight<TChild>(this System.Windows.CornerRadius target, System.Double? value) 
{if (value != null) target.BottomRight = value ?? default; return target; }
// System.Windows.CornerRadius / BottomLeft
public static System.Windows.CornerRadius WithBottomLeft<TChild>(this System.Windows.CornerRadius target, System.Double? value) 
{if (value != null) target.BottomLeft = value ?? default; return target; }
// System.Windows.DataTemplate / DataType
public static TChild WithDataType<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.DataTemplate, TChild>? doNotUse = null) where TChild: System.Windows.DataTemplate
{if (value != null) target.DataType = value ?? default; return target; }
// System.Windows.DataTrigger / Binding
public static TChild WithBinding<TChild>(this TChild target, System.Windows.Data.BindingBase? value, Disambigator<System.Windows.DataTrigger, TChild>? doNotUse = null) where TChild: System.Windows.DataTrigger
{if (value != null) target.Binding = value ?? default; return target; }
// System.Windows.DataTrigger / Value
public static TChild WithValue<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.DataTrigger, TChild>? doNotUse = null) where TChild: System.Windows.DataTrigger
{if (value != null) target.Value = value ?? default; return target; }
// System.Windows.DynamicResourceExtension / ResourceKey
public static TChild WithResourceKey<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.DynamicResourceExtension, TChild>? doNotUse = null) where TChild: System.Windows.DynamicResourceExtension
{if (value != null) target.ResourceKey = value ?? default; return target; }
// System.Windows.EventSetter / Event
public static TChild WithEvent<TChild>(this TChild target, System.Windows.RoutedEvent? value, Disambigator<System.Windows.EventSetter, TChild>? doNotUse = null) where TChild: System.Windows.EventSetter
{if (value != null) target.Event = value ?? default; return target; }
// System.Windows.EventSetter / Handler
public static TChild WithHandler<TChild>(this TChild target, System.Delegate? value, Disambigator<System.Windows.EventSetter, TChild>? doNotUse = null) where TChild: System.Windows.EventSetter
{if (value != null) target.Handler = value ?? default; return target; }
// System.Windows.EventSetter / HandledEventsToo
public static TChild WithHandledEventsToo<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.EventSetter, TChild>? doNotUse = null) where TChild: System.Windows.EventSetter
{if (value != null) target.HandledEventsToo = value ?? default; return target; }
// System.Windows.EventTrigger / RoutedEvent
public static TChild WithRoutedEvent<TChild>(this TChild target, System.Windows.RoutedEvent? value, Disambigator<System.Windows.EventTrigger, TChild>? doNotUse = null) where TChild: System.Windows.EventTrigger
{if (value != null) target.RoutedEvent = value ?? default; return target; }
// System.Windows.EventTrigger / SourceName
public static TChild WithSourceName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.EventTrigger, TChild>? doNotUse = null) where TChild: System.Windows.EventTrigger
{if (value != null) target.SourceName = value ?? default; return target; }
// System.Windows.ExitEventArgs / ApplicationExitCode
public static TChild WithApplicationExitCode<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.ExitEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.ExitEventArgs
{if (value != null) target.ApplicationExitCode = value ?? default; return target; }
// System.Windows.FrameworkContentElement / Resources
public static TChild WithResources<TChild>(this TChild target, System.Windows.ResourceDictionary? value, Disambigator<System.Windows.FrameworkContentElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkContentElement
{if (value != null) target.Resources = value ?? default; return target; }
// System.Windows.FrameworkElement / Resources
public static TChild WithResources<TChild>(this TChild target, System.Windows.ResourceDictionary? value, Disambigator<System.Windows.FrameworkElement, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElement
{if (value != null) target.Resources = value ?? default; return target; }
// System.Windows.FrameworkElementFactory / Type
public static TChild WithType<TChild>(this TChild target, System.Type? value, Disambigator<System.Windows.FrameworkElementFactory, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElementFactory
{if (value != null) target.Type = value ?? default; return target; }
// System.Windows.FrameworkElementFactory / Text
public static TChild WithText<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.FrameworkElementFactory, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElementFactory
{if (value != null) target.Text = value ?? default; return target; }
// System.Windows.FrameworkElementFactory / Name
public static TChild WithName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.FrameworkElementFactory, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkElementFactory
{if (value != null) target.Name = value ?? default; return target; }
// System.Windows.FrameworkPropertyMetadata / AffectsMeasure
public static TChild WithAffectsMeasure<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.FrameworkPropertyMetadata, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkPropertyMetadata
{if (value != null) target.AffectsMeasure = value ?? default; return target; }
// System.Windows.FrameworkPropertyMetadata / AffectsArrange
public static TChild WithAffectsArrange<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.FrameworkPropertyMetadata, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkPropertyMetadata
{if (value != null) target.AffectsArrange = value ?? default; return target; }
// System.Windows.FrameworkPropertyMetadata / AffectsParentMeasure
public static TChild WithAffectsParentMeasure<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.FrameworkPropertyMetadata, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkPropertyMetadata
{if (value != null) target.AffectsParentMeasure = value ?? default; return target; }
// System.Windows.FrameworkPropertyMetadata / AffectsParentArrange
public static TChild WithAffectsParentArrange<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.FrameworkPropertyMetadata, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkPropertyMetadata
{if (value != null) target.AffectsParentArrange = value ?? default; return target; }
// System.Windows.FrameworkPropertyMetadata / AffectsRender
public static TChild WithAffectsRender<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.FrameworkPropertyMetadata, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkPropertyMetadata
{if (value != null) target.AffectsRender = value ?? default; return target; }
// System.Windows.FrameworkPropertyMetadata / Inherits
public static TChild WithInherits<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.FrameworkPropertyMetadata, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkPropertyMetadata
{if (value != null) target.Inherits = value ?? default; return target; }
// System.Windows.FrameworkPropertyMetadata / OverridesInheritanceBehavior
public static TChild WithOverridesInheritanceBehavior<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.FrameworkPropertyMetadata, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkPropertyMetadata
{if (value != null) target.OverridesInheritanceBehavior = value ?? default; return target; }
// System.Windows.FrameworkPropertyMetadata / IsNotDataBindable
public static TChild WithIsNotDataBindable<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.FrameworkPropertyMetadata, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkPropertyMetadata
{if (value != null) target.IsNotDataBindable = value ?? default; return target; }
// System.Windows.FrameworkPropertyMetadata / BindsTwoWayByDefault
public static TChild WithBindsTwoWayByDefault<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.FrameworkPropertyMetadata, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkPropertyMetadata
{if (value != null) target.BindsTwoWayByDefault = value ?? default; return target; }
// System.Windows.FrameworkPropertyMetadata / DefaultUpdateSourceTrigger
public static TChild WithDefaultUpdateSourceTrigger<TChild>(this TChild target, System.Windows.Data.UpdateSourceTrigger? value, Disambigator<System.Windows.FrameworkPropertyMetadata, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkPropertyMetadata
{if (value != null) target.DefaultUpdateSourceTrigger = value ?? default; return target; }
// System.Windows.FrameworkPropertyMetadata / Journal
public static TChild WithJournal<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.FrameworkPropertyMetadata, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkPropertyMetadata
{if (value != null) target.Journal = value ?? default; return target; }
// System.Windows.FrameworkPropertyMetadata / SubPropertiesDoNotAffectRender
public static TChild WithSubPropertiesDoNotAffectRender<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.FrameworkPropertyMetadata, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkPropertyMetadata
{if (value != null) target.SubPropertiesDoNotAffectRender = value ?? default; return target; }
// System.Windows.FrameworkTemplate / VisualTree
public static TChild WithVisualTree<TChild>(this TChild target, System.Windows.FrameworkElementFactory? value, Disambigator<System.Windows.FrameworkTemplate, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkTemplate
{if (value != null) target.VisualTree = value ?? default; return target; }
// System.Windows.FrameworkTemplate / Template
public static TChild WithTemplate<TChild>(this TChild target, System.Windows.TemplateContent? value, Disambigator<System.Windows.FrameworkTemplate, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkTemplate
{if (value != null) target.Template = value ?? default; return target; }
// System.Windows.FrameworkTemplate / Resources
public static TChild WithResources<TChild>(this TChild target, System.Windows.ResourceDictionary? value, Disambigator<System.Windows.FrameworkTemplate, TChild>? doNotUse = null) where TChild: System.Windows.FrameworkTemplate
{if (value != null) target.Resources = value ?? default; return target; }
// System.Windows.HierarchicalDataTemplate / ItemsSource
public static TChild WithItemsSource<TChild>(this TChild target, System.Windows.Data.BindingBase? value, Disambigator<System.Windows.HierarchicalDataTemplate, TChild>? doNotUse = null) where TChild: System.Windows.HierarchicalDataTemplate
{if (value != null) target.ItemsSource = value ?? default; return target; }
// System.Windows.HierarchicalDataTemplate / ItemTemplate
public static TChild WithItemTemplate<TChild>(this TChild target, System.Windows.DataTemplate? value, Disambigator<System.Windows.HierarchicalDataTemplate, TChild>? doNotUse = null) where TChild: System.Windows.HierarchicalDataTemplate
{if (value != null) target.ItemTemplate = value ?? default; return target; }
// System.Windows.HierarchicalDataTemplate / ItemTemplateSelector
public static TChild WithItemTemplateSelector<TChild>(this TChild target, System.Windows.Controls.DataTemplateSelector? value, Disambigator<System.Windows.HierarchicalDataTemplate, TChild>? doNotUse = null) where TChild: System.Windows.HierarchicalDataTemplate
{if (value != null) target.ItemTemplateSelector = value ?? default; return target; }
// System.Windows.HierarchicalDataTemplate / ItemContainerStyle
public static TChild WithItemContainerStyle<TChild>(this TChild target, System.Windows.Style? value, Disambigator<System.Windows.HierarchicalDataTemplate, TChild>? doNotUse = null) where TChild: System.Windows.HierarchicalDataTemplate
{if (value != null) target.ItemContainerStyle = value ?? default; return target; }
// System.Windows.HierarchicalDataTemplate / ItemContainerStyleSelector
public static TChild WithItemContainerStyleSelector<TChild>(this TChild target, System.Windows.Controls.StyleSelector? value, Disambigator<System.Windows.HierarchicalDataTemplate, TChild>? doNotUse = null) where TChild: System.Windows.HierarchicalDataTemplate
{if (value != null) target.ItemContainerStyleSelector = value ?? default; return target; }
// System.Windows.HierarchicalDataTemplate / ItemStringFormat
public static TChild WithItemStringFormat<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.HierarchicalDataTemplate, TChild>? doNotUse = null) where TChild: System.Windows.HierarchicalDataTemplate
{if (value != null) target.ItemStringFormat = value ?? default; return target; }
// System.Windows.HierarchicalDataTemplate / AlternationCount
public static TChild WithAlternationCount<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.HierarchicalDataTemplate, TChild>? doNotUse = null) where TChild: System.Windows.HierarchicalDataTemplate
{if (value != null) target.AlternationCount = value ?? default; return target; }
// System.Windows.HierarchicalDataTemplate / ItemBindingGroup
public static TChild WithItemBindingGroup<TChild>(this TChild target, System.Windows.Data.BindingGroup? value, Disambigator<System.Windows.HierarchicalDataTemplate, TChild>? doNotUse = null) where TChild: System.Windows.HierarchicalDataTemplate
{if (value != null) target.ItemBindingGroup = value ?? default; return target; }
// System.Windows.IFrameworkInputElement / Name
public static TChild WithName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.IFrameworkInputElement, TChild>? doNotUse = null) where TChild: System.Windows.IFrameworkInputElement
{if (value != null) target.Name = value ?? default; return target; }
// System.Windows.PropertyPath / Path
public static System.Windows.PropertyPath WithPath<TChild>(this System.Windows.PropertyPath target, System.String? value) 
{if (value != null) target.Path = value ?? default; return target; }
// System.Windows.ResourceDictionary / Source
public static TChild WithSource<TChild>(this TChild target, System.Uri? value, Disambigator<System.Windows.ResourceDictionary, TChild>? doNotUse = null) where TChild: System.Windows.ResourceDictionary
{if (value != null) target.Source = value ?? default; return target; }
// System.Windows.ResourceDictionary / InvalidatesImplicitDataTemplateResources
public static TChild WithInvalidatesImplicitDataTemplateResources<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.ResourceDictionary, TChild>? doNotUse = null) where TChild: System.Windows.ResourceDictionary
{if (value != null) target.InvalidatesImplicitDataTemplateResources = value ?? default; return target; }
// System.Windows.ResourceDictionary / DeferrableContent
public static TChild WithDeferrableContent<TChild>(this TChild target, System.Windows.DeferrableContent? value, Disambigator<System.Windows.ResourceDictionary, TChild>? doNotUse = null) where TChild: System.Windows.ResourceDictionary
{if (value != null) target.DeferrableContent = value ?? default; return target; }
// System.Windows.Setter / Property
public static TChild WithProperty<TChild>(this TChild target, System.Windows.DependencyProperty? value, Disambigator<System.Windows.Setter, TChild>? doNotUse = null) where TChild: System.Windows.Setter
{if (value != null) target.Property = value ?? default; return target; }
// System.Windows.Setter / Value
public static TChild WithValue<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.Setter, TChild>? doNotUse = null) where TChild: System.Windows.Setter
{if (value != null) target.Value = value ?? default; return target; }
// System.Windows.Setter / TargetName
public static TChild WithTargetName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Setter, TChild>? doNotUse = null) where TChild: System.Windows.Setter
{if (value != null) target.TargetName = value ?? default; return target; }
// System.Windows.StaticResourceExtension / ResourceKey
public static TChild WithResourceKey<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.StaticResourceExtension, TChild>? doNotUse = null) where TChild: System.Windows.StaticResourceExtension
{if (value != null) target.ResourceKey = value ?? default; return target; }
// System.Windows.Style / TargetType
public static TChild WithTargetType<TChild>(this TChild target, System.Type? value, Disambigator<System.Windows.Style, TChild>? doNotUse = null) where TChild: System.Windows.Style
{if (value != null) target.TargetType = value ?? default; return target; }
// System.Windows.Style / BasedOn
public static TChild WithBasedOn<TChild>(this TChild target, System.Windows.Style? value, Disambigator<System.Windows.Style, TChild>? doNotUse = null) where TChild: System.Windows.Style
{if (value != null) target.BasedOn = value ?? default; return target; }
// System.Windows.Style / Resources
public static TChild WithResources<TChild>(this TChild target, System.Windows.ResourceDictionary? value, Disambigator<System.Windows.Style, TChild>? doNotUse = null) where TChild: System.Windows.Style
{if (value != null) target.Resources = value ?? default; return target; }
// System.Windows.StyleTypedPropertyAttribute / Property
public static System.Windows.StyleTypedPropertyAttribute WithProperty<TChild>(this System.Windows.StyleTypedPropertyAttribute target, System.String? value) 
{if (value != null) target.Property = value ?? default; return target; }
// System.Windows.StyleTypedPropertyAttribute / StyleTargetType
public static System.Windows.StyleTypedPropertyAttribute WithStyleTargetType<TChild>(this System.Windows.StyleTypedPropertyAttribute target, System.Type? value) 
{if (value != null) target.StyleTargetType = value ?? default; return target; }
// System.Windows.TemplateBindingExtension / Property
public static TChild WithProperty<TChild>(this TChild target, System.Windows.DependencyProperty? value, Disambigator<System.Windows.TemplateBindingExtension, TChild>? doNotUse = null) where TChild: System.Windows.TemplateBindingExtension
{if (value != null) target.Property = value ?? default; return target; }
// System.Windows.TemplateBindingExtension / Converter
public static TChild WithConverter<TChild>(this TChild target, System.Windows.Data.IValueConverter? value, Disambigator<System.Windows.TemplateBindingExtension, TChild>? doNotUse = null) where TChild: System.Windows.TemplateBindingExtension
{if (value != null) target.Converter = value ?? default; return target; }
// System.Windows.TemplateBindingExtension / ConverterParameter
public static TChild WithConverterParameter<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.TemplateBindingExtension, TChild>? doNotUse = null) where TChild: System.Windows.TemplateBindingExtension
{if (value != null) target.ConverterParameter = value ?? default; return target; }
// System.Windows.TemplateKey / DataType
public static TChild WithDataType<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.TemplateKey, TChild>? doNotUse = null) where TChild: System.Windows.TemplateKey
{if (value != null) target.DataType = value ?? default; return target; }
// System.Windows.TemplatePartAttribute / Name
public static System.Windows.TemplatePartAttribute WithName<TChild>(this System.Windows.TemplatePartAttribute target, System.String? value) 
{if (value != null) target.Name = value ?? default; return target; }
// System.Windows.TemplatePartAttribute / Type
public static System.Windows.TemplatePartAttribute WithType<TChild>(this System.Windows.TemplatePartAttribute target, System.Type? value) 
{if (value != null) target.Type = value ?? default; return target; }
// System.Windows.TemplateVisualStateAttribute / Name
public static System.Windows.TemplateVisualStateAttribute WithName<TChild>(this System.Windows.TemplateVisualStateAttribute target, System.String? value) 
{if (value != null) target.Name = value ?? default; return target; }
// System.Windows.TemplateVisualStateAttribute / GroupName
public static System.Windows.TemplateVisualStateAttribute WithGroupName<TChild>(this System.Windows.TemplateVisualStateAttribute target, System.String? value) 
{if (value != null) target.GroupName = value ?? default; return target; }
// System.Windows.ThemeDictionaryExtension / AssemblyName
public static TChild WithAssemblyName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.ThemeDictionaryExtension, TChild>? doNotUse = null) where TChild: System.Windows.ThemeDictionaryExtension
{if (value != null) target.AssemblyName = value ?? default; return target; }
// System.Windows.Thickness / Left
public static System.Windows.Thickness WithLeft<TChild>(this System.Windows.Thickness target, System.Double? value) 
{if (value != null) target.Left = value ?? default; return target; }
// System.Windows.Thickness / Top
public static System.Windows.Thickness WithTop<TChild>(this System.Windows.Thickness target, System.Double? value) 
{if (value != null) target.Top = value ?? default; return target; }
// System.Windows.Thickness / Right
public static System.Windows.Thickness WithRight<TChild>(this System.Windows.Thickness target, System.Double? value) 
{if (value != null) target.Right = value ?? default; return target; }
// System.Windows.Thickness / Bottom
public static System.Windows.Thickness WithBottom<TChild>(this System.Windows.Thickness target, System.Double? value) 
{if (value != null) target.Bottom = value ?? default; return target; }
// System.Windows.Trigger / Property
public static TChild WithProperty<TChild>(this TChild target, System.Windows.DependencyProperty? value, Disambigator<System.Windows.Trigger, TChild>? doNotUse = null) where TChild: System.Windows.Trigger
{if (value != null) target.Property = value ?? default; return target; }
// System.Windows.Trigger / Value
public static TChild WithValue<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.Trigger, TChild>? doNotUse = null) where TChild: System.Windows.Trigger
{if (value != null) target.Value = value ?? default; return target; }
// System.Windows.Trigger / SourceName
public static TChild WithSourceName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Trigger, TChild>? doNotUse = null) where TChild: System.Windows.Trigger
{if (value != null) target.SourceName = value ?? default; return target; }
// System.Windows.VisualState / Name
public static TChild WithName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.VisualState, TChild>? doNotUse = null) where TChild: System.Windows.VisualState
{if (value != null) target.Name = value ?? default; return target; }
// System.Windows.VisualState / Storyboard
public static TChild WithStoryboard<TChild>(this TChild target, System.Windows.Media.Animation.Storyboard? value, Disambigator<System.Windows.VisualState, TChild>? doNotUse = null) where TChild: System.Windows.VisualState
{if (value != null) target.Storyboard = value ?? default; return target; }
// System.Windows.VisualStateGroup / Name
public static TChild WithName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.VisualStateGroup, TChild>? doNotUse = null) where TChild: System.Windows.VisualStateGroup
{if (value != null) target.Name = value ?? default; return target; }
// System.Windows.VisualTransition / From
public static TChild WithFrom<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.VisualTransition, TChild>? doNotUse = null) where TChild: System.Windows.VisualTransition
{if (value != null) target.From = value ?? default; return target; }
// System.Windows.VisualTransition / To
public static TChild WithTo<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.VisualTransition, TChild>? doNotUse = null) where TChild: System.Windows.VisualTransition
{if (value != null) target.To = value ?? default; return target; }
// System.Windows.VisualTransition / Storyboard
public static TChild WithStoryboard<TChild>(this TChild target, System.Windows.Media.Animation.Storyboard? value, Disambigator<System.Windows.VisualTransition, TChild>? doNotUse = null) where TChild: System.Windows.VisualTransition
{if (value != null) target.Storyboard = value ?? default; return target; }
// System.Windows.VisualTransition / GeneratedDuration
public static TChild WithGeneratedDuration<TChild>(this TChild target, System.Windows.Duration? value, Disambigator<System.Windows.VisualTransition, TChild>? doNotUse = null) where TChild: System.Windows.VisualTransition
{if (value != null) target.GeneratedDuration = value ?? default; return target; }
// System.Windows.VisualTransition / GeneratedEasingFunction
public static TChild WithGeneratedEasingFunction<TChild>(this TChild target, System.Windows.Media.Animation.IEasingFunction? value, Disambigator<System.Windows.VisualTransition, TChild>? doNotUse = null) where TChild: System.Windows.VisualTransition
{if (value != null) target.GeneratedEasingFunction = value ?? default; return target; }
// System.Windows.Window / WindowStartupLocation
public static TChild WithWindowStartupLocation<TChild>(this TChild target, System.Windows.WindowStartupLocation? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window

{if (value != null) target.WindowStartupLocation = value ?? default; return target; }
// System.Windows.Window / Owner
public static TChild WithOwner<TChild>(this TChild target, System.Windows.Window? value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window
{if (value != null) target.Owner = value ?? default; return target; }
// System.Windows.Window / DialogResult
public static TChild WithDialogResult<TChild>(this TChild target, System.Nullable<System.Boolean> value, Disambigator<System.Windows.Window, TChild>? doNotUse = null) where TChild: System.Windows.Window
{if (value != null) target.DialogResult = value ?? default; return target; }
// System.Windows.Shell.JumpItem / CustomCategory
public static TChild WithCustomCategory<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Shell.JumpItem, TChild>? doNotUse = null) where TChild: System.Windows.Shell.JumpItem
{if (value != null) target.CustomCategory = value ?? default; return target; }
// System.Windows.Shell.JumpList / ShowFrequentCategory
public static System.Windows.Shell.JumpList WithShowFrequentCategory<TChild>(this System.Windows.Shell.JumpList target, System.Boolean? value) 
{if (value != null) target.ShowFrequentCategory = value ?? default; return target; }
// System.Windows.Shell.JumpList / ShowRecentCategory
public static System.Windows.Shell.JumpList WithShowRecentCategory<TChild>(this System.Windows.Shell.JumpList target, System.Boolean? value) 
{if (value != null) target.ShowRecentCategory = value ?? default; return target; }
// System.Windows.Shell.JumpPath / Path
public static TChild WithPath<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Shell.JumpPath, TChild>? doNotUse = null) where TChild: System.Windows.Shell.JumpPath
{if (value != null) target.Path = value ?? default; return target; }
// System.Windows.Shell.JumpTask / Title
public static TChild WithTitle<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Shell.JumpTask, TChild>? doNotUse = null) where TChild: System.Windows.Shell.JumpTask
{if (value != null) target.Title = value ?? default; return target; }
// System.Windows.Shell.JumpTask / Description
public static TChild WithDescription<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Shell.JumpTask, TChild>? doNotUse = null) where TChild: System.Windows.Shell.JumpTask
{if (value != null) target.Description = value ?? default; return target; }
// System.Windows.Shell.JumpTask / ApplicationPath
public static TChild WithApplicationPath<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Shell.JumpTask, TChild>? doNotUse = null) where TChild: System.Windows.Shell.JumpTask
{if (value != null) target.ApplicationPath = value ?? default; return target; }
// System.Windows.Shell.JumpTask / Arguments
public static TChild WithArguments<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Shell.JumpTask, TChild>? doNotUse = null) where TChild: System.Windows.Shell.JumpTask
{if (value != null) target.Arguments = value ?? default; return target; }
// System.Windows.Shell.JumpTask / WorkingDirectory
public static TChild WithWorkingDirectory<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Shell.JumpTask, TChild>? doNotUse = null) where TChild: System.Windows.Shell.JumpTask
{if (value != null) target.WorkingDirectory = value ?? default; return target; }
// System.Windows.Shell.JumpTask / IconResourcePath
public static TChild WithIconResourcePath<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Shell.JumpTask, TChild>? doNotUse = null) where TChild: System.Windows.Shell.JumpTask
{if (value != null) target.IconResourcePath = value ?? default; return target; }
// System.Windows.Shell.JumpTask / IconResourceIndex
public static TChild WithIconResourceIndex<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.Shell.JumpTask, TChild>? doNotUse = null) where TChild: System.Windows.Shell.JumpTask
{if (value != null) target.IconResourceIndex = value ?? default; return target; }
// System.Windows.Interop.IErrorPage / DeploymentPath
public static TChild WithDeploymentPath<TChild>(this TChild target, System.Uri? value, Disambigator<System.Windows.Interop.IErrorPage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.IErrorPage
{if (value != null) target.DeploymentPath = value ?? default; return target; }
// System.Windows.Interop.IErrorPage / ErrorTitle
public static TChild WithErrorTitle<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Interop.IErrorPage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.IErrorPage
{if (value != null) target.ErrorTitle = value ?? default; return target; }
// System.Windows.Interop.IErrorPage / ErrorText
public static TChild WithErrorText<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Interop.IErrorPage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.IErrorPage
{if (value != null) target.ErrorText = value ?? default; return target; }
// System.Windows.Interop.IErrorPage / ErrorFlag
public static TChild WithErrorFlag<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Interop.IErrorPage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.IErrorPage
{if (value != null) target.ErrorFlag = value ?? default; return target; }
// System.Windows.Interop.IErrorPage / LogFilePath
public static TChild WithLogFilePath<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Interop.IErrorPage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.IErrorPage
{if (value != null) target.LogFilePath = value ?? default; return target; }
// System.Windows.Interop.IErrorPage / SupportUri
public static TChild WithSupportUri<TChild>(this TChild target, System.Uri? value, Disambigator<System.Windows.Interop.IErrorPage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.IErrorPage
{if (value != null) target.SupportUri = value ?? default; return target; }
// System.Windows.Interop.IErrorPage / RefreshCallback
public static TChild WithRefreshCallback<TChild>(this TChild target, System.Windows.Threading.DispatcherOperationCallback? value, Disambigator<System.Windows.Interop.IErrorPage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.IErrorPage
{if (value != null) target.RefreshCallback = value ?? default; return target; }
// System.Windows.Interop.IErrorPage / GetWinFxCallback
public static TChild WithGetWinFxCallback<TChild>(this TChild target, System.Windows.Threading.DispatcherOperationCallback? value, Disambigator<System.Windows.Interop.IErrorPage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.IErrorPage
{if (value != null) target.GetWinFxCallback = value ?? default; return target; }
// System.Windows.Interop.IProgressPage / DeploymentPath
public static TChild WithDeploymentPath<TChild>(this TChild target, System.Uri? value, Disambigator<System.Windows.Interop.IProgressPage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.IProgressPage
{if (value != null) target.DeploymentPath = value ?? default; return target; }
// System.Windows.Interop.IProgressPage / StopCallback
public static TChild WithStopCallback<TChild>(this TChild target, System.Windows.Threading.DispatcherOperationCallback? value, Disambigator<System.Windows.Interop.IProgressPage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.IProgressPage
{if (value != null) target.StopCallback = value ?? default; return target; }
// System.Windows.Interop.IProgressPage / RefreshCallback
public static TChild WithRefreshCallback<TChild>(this TChild target, System.Windows.Threading.DispatcherOperationCallback? value, Disambigator<System.Windows.Interop.IProgressPage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.IProgressPage
{if (value != null) target.RefreshCallback = value ?? default; return target; }
// System.Windows.Interop.IProgressPage / ApplicationName
public static TChild WithApplicationName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Interop.IProgressPage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.IProgressPage
{if (value != null) target.ApplicationName = value ?? default; return target; }
// System.Windows.Interop.IProgressPage / PublisherName
public static TChild WithPublisherName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Interop.IProgressPage, TChild>? doNotUse = null) where TChild: System.Windows.Interop.IProgressPage
{if (value != null) target.PublisherName = value ?? default; return target; }
// System.Windows.Interop.WindowInteropHelper / Owner
public static System.Windows.Interop.WindowInteropHelper WithOwner<TChild>(this System.Windows.Interop.WindowInteropHelper target, System.IntPtr? value) 
{if (value != null) target.Owner = value ?? default; return target; }
// System.Windows.Media.Animation.BeginStoryboard / HandoffBehavior
public static System.Windows.Media.Animation.BeginStoryboard WithHandoffBehavior<TChild>(this System.Windows.Media.Animation.BeginStoryboard target, System.Windows.Media.Animation.HandoffBehavior? value) 
{if (value != null) target.HandoffBehavior = value ?? default; return target; }
// System.Windows.Media.Animation.BeginStoryboard / Name
public static System.Windows.Media.Animation.BeginStoryboard WithName<TChild>(this System.Windows.Media.Animation.BeginStoryboard target, System.String? value) 
{if (value != null) target.Name = value ?? default; return target; }
// System.Windows.Media.Animation.ControllableStoryboardAction / BeginStoryboardName
public static TChild WithBeginStoryboardName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Media.Animation.ControllableStoryboardAction, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ControllableStoryboardAction
{if (value != null) target.BeginStoryboardName = value ?? default; return target; }
// System.Windows.Media.Animation.ThicknessAnimation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.ThicknessAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessAnimation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.ThicknessAnimation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.ThicknessAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessAnimation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.ThicknessKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.SeekStoryboard / Offset
public static System.Windows.Media.Animation.SeekStoryboard WithOffset<TChild>(this System.Windows.Media.Animation.SeekStoryboard target, System.TimeSpan? value) 
{if (value != null) target.Offset = value ?? default; return target; }
// System.Windows.Media.Animation.SeekStoryboard / Origin
public static System.Windows.Media.Animation.SeekStoryboard WithOrigin<TChild>(this System.Windows.Media.Animation.SeekStoryboard target, System.Windows.Media.Animation.TimeSeekOrigin? value) 
{if (value != null) target.Origin = value ?? default; return target; }
// System.Windows.Media.Animation.SetStoryboardSpeedRatio / SpeedRatio
public static System.Windows.Media.Animation.SetStoryboardSpeedRatio WithSpeedRatio<TChild>(this System.Windows.Media.Animation.SetStoryboardSpeedRatio target, System.Double? value) 
{if (value != null) target.SpeedRatio = value ?? default; return target; }
// System.Windows.Data.Binding / ValidatesOnExceptions
public static TChild WithValidatesOnExceptions<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.ValidatesOnExceptions = value ?? default; return target; }
// System.Windows.Data.Binding / ValidatesOnDataErrors
public static TChild WithValidatesOnDataErrors<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.ValidatesOnDataErrors = value ?? default; return target; }
// System.Windows.Data.Binding / ValidatesOnNotifyDataErrors
public static TChild WithValidatesOnNotifyDataErrors<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.ValidatesOnNotifyDataErrors = value ?? default; return target; }
// System.Windows.Data.Binding / Path
public static TChild WithPath<TChild>(this TChild target, System.Windows.PropertyPath? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.Path = value ?? default; return target; }
// System.Windows.Data.Binding / XPath
public static TChild WithXPath<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.XPath = value ?? default; return target; }
// System.Windows.Data.Binding / Mode
public static TChild WithMode<TChild>(this TChild target, System.Windows.Data.BindingMode? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.Mode = value ?? default; return target; }
// System.Windows.Data.Binding / UpdateSourceTrigger
public static TChild WithUpdateSourceTrigger<TChild>(this TChild target, System.Windows.Data.UpdateSourceTrigger? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.UpdateSourceTrigger = value ?? default; return target; }
// System.Windows.Data.Binding / NotifyOnSourceUpdated
public static TChild WithNotifyOnSourceUpdated<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.NotifyOnSourceUpdated = value ?? default; return target; }
// System.Windows.Data.Binding / NotifyOnTargetUpdated
public static TChild WithNotifyOnTargetUpdated<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.NotifyOnTargetUpdated = value ?? default; return target; }
// System.Windows.Data.Binding / NotifyOnValidationError
public static TChild WithNotifyOnValidationError<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.NotifyOnValidationError = value ?? default; return target; }
// System.Windows.Data.Binding / Converter
public static TChild WithConverter<TChild>(this TChild target, System.Windows.Data.IValueConverter? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.Converter = value ?? default; return target; }
// System.Windows.Data.Binding / ConverterParameter
public static TChild WithConverterParameter<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.ConverterParameter = value ?? default; return target; }
// System.Windows.Data.Binding / ConverterCulture
public static TChild WithConverterCulture<TChild>(this TChild target, System.Globalization.CultureInfo? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.ConverterCulture = value ?? default; return target; }
// System.Windows.Data.Binding / Source
public static TChild WithSource<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.Source = value ?? default; return target; }
// System.Windows.Data.Binding / RelativeSource
public static TChild WithRelativeSource<TChild>(this TChild target, System.Windows.Data.RelativeSource? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.RelativeSource = value ?? default; return target; }
// System.Windows.Data.Binding / ElementName
public static TChild WithElementName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.ElementName = value ?? default; return target; }
// System.Windows.Data.Binding / IsAsync
public static TChild WithIsAsync<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.IsAsync = value ?? default; return target; }
// System.Windows.Data.Binding / AsyncState
public static TChild WithAsyncState<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.AsyncState = value ?? default; return target; }
// System.Windows.Data.Binding / BindsDirectlyToSource
public static TChild WithBindsDirectlyToSource<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.BindsDirectlyToSource = value ?? default; return target; }
// System.Windows.Data.Binding / UpdateSourceExceptionFilter
public static TChild WithUpdateSourceExceptionFilter<TChild>(this TChild target, System.Windows.Data.UpdateSourceExceptionFilterCallback? value, Disambigator<System.Windows.Data.Binding, TChild>? doNotUse = null) where TChild: System.Windows.Data.Binding
{if (value != null) target.UpdateSourceExceptionFilter = value ?? default; return target; }
// System.Windows.Data.BindingBase / FallbackValue
public static TChild WithFallbackValue<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.Data.BindingBase, TChild>? doNotUse = null) where TChild: System.Windows.Data.BindingBase
{if (value != null) target.FallbackValue = value ?? default; return target; }
// System.Windows.Data.BindingBase / StringFormat
public static TChild WithStringFormat<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Data.BindingBase, TChild>? doNotUse = null) where TChild: System.Windows.Data.BindingBase
{if (value != null) target.StringFormat = value ?? default; return target; }
// System.Windows.Data.BindingBase / TargetNullValue
public static TChild WithTargetNullValue<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.Data.BindingBase, TChild>? doNotUse = null) where TChild: System.Windows.Data.BindingBase
{if (value != null) target.TargetNullValue = value ?? default; return target; }
// System.Windows.Data.BindingBase / BindingGroupName
public static TChild WithBindingGroupName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Data.BindingBase, TChild>? doNotUse = null) where TChild: System.Windows.Data.BindingBase
{if (value != null) target.BindingGroupName = value ?? default; return target; }
// System.Windows.Data.BindingBase / Delay
public static TChild WithDelay<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.Data.BindingBase, TChild>? doNotUse = null) where TChild: System.Windows.Data.BindingBase
{if (value != null) target.Delay = value ?? default; return target; }
// System.Windows.Data.BindingGroup / Name
public static TChild WithName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Data.BindingGroup, TChild>? doNotUse = null) where TChild: System.Windows.Data.BindingGroup
{if (value != null) target.Name = value ?? default; return target; }
// System.Windows.Data.BindingGroup / NotifyOnValidationError
public static TChild WithNotifyOnValidationError<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.BindingGroup, TChild>? doNotUse = null) where TChild: System.Windows.Data.BindingGroup
{if (value != null) target.NotifyOnValidationError = value ?? default; return target; }
// System.Windows.Data.BindingGroup / ValidatesOnNotifyDataError
public static TChild WithValidatesOnNotifyDataError<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.BindingGroup, TChild>? doNotUse = null) where TChild: System.Windows.Data.BindingGroup
{if (value != null) target.ValidatesOnNotifyDataError = value ?? default; return target; }
// System.Windows.Data.BindingGroup / SharesProposedValues
public static TChild WithSharesProposedValues<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.BindingGroup, TChild>? doNotUse = null) where TChild: System.Windows.Data.BindingGroup
{if (value != null) target.SharesProposedValues = value ?? default; return target; }
// System.Windows.Data.BindingListCollectionView / CustomFilter
public static System.Windows.Data.BindingListCollectionView WithCustomFilter<TChild>(this System.Windows.Data.BindingListCollectionView target, System.String? value) 
{if (value != null) target.CustomFilter = value ?? default; return target; }
// System.Windows.Data.BindingListCollectionView / GroupBySelector
public static System.Windows.Data.BindingListCollectionView WithGroupBySelector<TChild>(this System.Windows.Data.BindingListCollectionView target, System.Windows.Data.GroupDescriptionSelectorCallback? value) 
{if (value != null) target.GroupBySelector = value ?? default; return target; }
// System.Windows.Data.BindingListCollectionView / IsDataInGroupOrder
public static System.Windows.Data.BindingListCollectionView WithIsDataInGroupOrder<TChild>(this System.Windows.Data.BindingListCollectionView target, System.Boolean? value) 
{if (value != null) target.IsDataInGroupOrder = value ?? default; return target; }
// System.Windows.Data.BindingListCollectionView / NewItemPlaceholderPosition
public static System.Windows.Data.BindingListCollectionView WithNewItemPlaceholderPosition<TChild>(this System.Windows.Data.BindingListCollectionView target, System.ComponentModel.NewItemPlaceholderPosition? value) 
{if (value != null) target.NewItemPlaceholderPosition = value ?? default; return target; }
// System.Windows.Data.BindingListCollectionView / IsLiveSorting
public static System.Windows.Data.BindingListCollectionView WithIsLiveSorting<TChild>(this System.Windows.Data.BindingListCollectionView target, System.Nullable<System.Boolean> value) 
{if (value != null) target.IsLiveSorting = value ?? default; return target; }
// System.Windows.Data.BindingListCollectionView / IsLiveFiltering
public static System.Windows.Data.BindingListCollectionView WithIsLiveFiltering<TChild>(this System.Windows.Data.BindingListCollectionView target, System.Nullable<System.Boolean> value) 
{if (value != null) target.IsLiveFiltering = value ?? default; return target; }
// System.Windows.Data.BindingListCollectionView / IsLiveGrouping
public static System.Windows.Data.BindingListCollectionView WithIsLiveGrouping<TChild>(this System.Windows.Data.BindingListCollectionView target, System.Nullable<System.Boolean> value) 
{if (value != null) target.IsLiveGrouping = value ?? default; return target; }
// System.Windows.Data.CollectionView / Culture
public static TChild WithCulture<TChild>(this TChild target, System.Globalization.CultureInfo? value, Disambigator<System.Windows.Data.CollectionView, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionView
{if (value != null) target.Culture = value ?? default; return target; }
// System.Windows.Data.CollectionView / Filter
public static TChild WithFilter<TChild>(this TChild target, System.Predicate<System.Object>? value, Disambigator<System.Windows.Data.CollectionView, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionView
{if (value != null) target.Filter = value ?? default; return target; }
// System.Windows.Data.CollectionViewSource / Culture
public static TChild WithCulture<TChild>(this TChild target, System.Globalization.CultureInfo? value, Disambigator<System.Windows.Data.CollectionViewSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.CollectionViewSource
{if (value != null) target.Culture = value ?? default; return target; }
// System.Windows.Data.FilterEventArgs / Accepted
public static TChild WithAccepted<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.FilterEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Data.FilterEventArgs
{if (value != null) target.Accepted = value ?? default; return target; }
// System.Windows.Data.ListCollectionView / Filter
public static TChild WithFilter<TChild>(this TChild target, System.Predicate<System.Object>? value, Disambigator<System.Windows.Data.ListCollectionView, TChild>? doNotUse = null) where TChild: System.Windows.Data.ListCollectionView
{if (value != null) target.Filter = value ?? default; return target; }
// System.Windows.Data.ListCollectionView / CustomSort
public static TChild WithCustomSort<TChild>(this TChild target, System.Collections.IComparer? value, Disambigator<System.Windows.Data.ListCollectionView, TChild>? doNotUse = null) where TChild: System.Windows.Data.ListCollectionView
{if (value != null) target.CustomSort = value ?? default; return target; }
// System.Windows.Data.ListCollectionView / GroupBySelector
public static TChild WithGroupBySelector<TChild>(this TChild target, System.Windows.Data.GroupDescriptionSelectorCallback? value, Disambigator<System.Windows.Data.ListCollectionView, TChild>? doNotUse = null) where TChild: System.Windows.Data.ListCollectionView
{if (value != null) target.GroupBySelector = value ?? default; return target; }
// System.Windows.Data.ListCollectionView / IsDataInGroupOrder
public static TChild WithIsDataInGroupOrder<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.ListCollectionView, TChild>? doNotUse = null) where TChild: System.Windows.Data.ListCollectionView
{if (value != null) target.IsDataInGroupOrder = value ?? default; return target; }
// System.Windows.Data.ListCollectionView / NewItemPlaceholderPosition
public static TChild WithNewItemPlaceholderPosition<TChild>(this TChild target, System.ComponentModel.NewItemPlaceholderPosition? value, Disambigator<System.Windows.Data.ListCollectionView, TChild>? doNotUse = null) where TChild: System.Windows.Data.ListCollectionView
{if (value != null) target.NewItemPlaceholderPosition = value ?? default; return target; }
// System.Windows.Data.ListCollectionView / IsLiveSorting
public static TChild WithIsLiveSorting<TChild>(this TChild target, System.Nullable<System.Boolean> value, Disambigator<System.Windows.Data.ListCollectionView, TChild>? doNotUse = null) where TChild: System.Windows.Data.ListCollectionView
{if (value != null) target.IsLiveSorting = value ?? default; return target; }
// System.Windows.Data.ListCollectionView / IsLiveFiltering
public static TChild WithIsLiveFiltering<TChild>(this TChild target, System.Nullable<System.Boolean> value, Disambigator<System.Windows.Data.ListCollectionView, TChild>? doNotUse = null) where TChild: System.Windows.Data.ListCollectionView
{if (value != null) target.IsLiveFiltering = value ?? default; return target; }
// System.Windows.Data.ListCollectionView / IsLiveGrouping
public static TChild WithIsLiveGrouping<TChild>(this TChild target, System.Nullable<System.Boolean> value, Disambigator<System.Windows.Data.ListCollectionView, TChild>? doNotUse = null) where TChild: System.Windows.Data.ListCollectionView
{if (value != null) target.IsLiveGrouping = value ?? default; return target; }
// System.Windows.Data.MultiBinding / Mode
public static TChild WithMode<TChild>(this TChild target, System.Windows.Data.BindingMode? value, Disambigator<System.Windows.Data.MultiBinding, TChild>? doNotUse = null) where TChild: System.Windows.Data.MultiBinding
{if (value != null) target.Mode = value ?? default; return target; }
// System.Windows.Data.MultiBinding / UpdateSourceTrigger
public static TChild WithUpdateSourceTrigger<TChild>(this TChild target, System.Windows.Data.UpdateSourceTrigger? value, Disambigator<System.Windows.Data.MultiBinding, TChild>? doNotUse = null) where TChild: System.Windows.Data.MultiBinding
{if (value != null) target.UpdateSourceTrigger = value ?? default; return target; }
// System.Windows.Data.MultiBinding / NotifyOnSourceUpdated
public static TChild WithNotifyOnSourceUpdated<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.MultiBinding, TChild>? doNotUse = null) where TChild: System.Windows.Data.MultiBinding
{if (value != null) target.NotifyOnSourceUpdated = value ?? default; return target; }
// System.Windows.Data.MultiBinding / NotifyOnTargetUpdated
public static TChild WithNotifyOnTargetUpdated<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.MultiBinding, TChild>? doNotUse = null) where TChild: System.Windows.Data.MultiBinding
{if (value != null) target.NotifyOnTargetUpdated = value ?? default; return target; }
// System.Windows.Data.MultiBinding / NotifyOnValidationError
public static TChild WithNotifyOnValidationError<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.MultiBinding, TChild>? doNotUse = null) where TChild: System.Windows.Data.MultiBinding
{if (value != null) target.NotifyOnValidationError = value ?? default; return target; }
// System.Windows.Data.MultiBinding / Converter
public static TChild WithConverter<TChild>(this TChild target, System.Windows.Data.IMultiValueConverter? value, Disambigator<System.Windows.Data.MultiBinding, TChild>? doNotUse = null) where TChild: System.Windows.Data.MultiBinding
{if (value != null) target.Converter = value ?? default; return target; }
// System.Windows.Data.MultiBinding / ConverterParameter
public static TChild WithConverterParameter<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.Data.MultiBinding, TChild>? doNotUse = null) where TChild: System.Windows.Data.MultiBinding
{if (value != null) target.ConverterParameter = value ?? default; return target; }
// System.Windows.Data.MultiBinding / ConverterCulture
public static TChild WithConverterCulture<TChild>(this TChild target, System.Globalization.CultureInfo? value, Disambigator<System.Windows.Data.MultiBinding, TChild>? doNotUse = null) where TChild: System.Windows.Data.MultiBinding
{if (value != null) target.ConverterCulture = value ?? default; return target; }
// System.Windows.Data.MultiBinding / UpdateSourceExceptionFilter
public static TChild WithUpdateSourceExceptionFilter<TChild>(this TChild target, System.Windows.Data.UpdateSourceExceptionFilterCallback? value, Disambigator<System.Windows.Data.MultiBinding, TChild>? doNotUse = null) where TChild: System.Windows.Data.MultiBinding
{if (value != null) target.UpdateSourceExceptionFilter = value ?? default; return target; }
// System.Windows.Data.MultiBinding / ValidatesOnExceptions
public static TChild WithValidatesOnExceptions<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.MultiBinding, TChild>? doNotUse = null) where TChild: System.Windows.Data.MultiBinding
{if (value != null) target.ValidatesOnExceptions = value ?? default; return target; }
// System.Windows.Data.MultiBinding / ValidatesOnDataErrors
public static TChild WithValidatesOnDataErrors<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.MultiBinding, TChild>? doNotUse = null) where TChild: System.Windows.Data.MultiBinding
{if (value != null) target.ValidatesOnDataErrors = value ?? default; return target; }
// System.Windows.Data.MultiBinding / ValidatesOnNotifyDataErrors
public static TChild WithValidatesOnNotifyDataErrors<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.MultiBinding, TChild>? doNotUse = null) where TChild: System.Windows.Data.MultiBinding
{if (value != null) target.ValidatesOnNotifyDataErrors = value ?? default; return target; }
// System.Windows.Data.ObjectDataProvider / ObjectType
public static TChild WithObjectType<TChild>(this TChild target, System.Type? value, Disambigator<System.Windows.Data.ObjectDataProvider, TChild>? doNotUse = null) where TChild: System.Windows.Data.ObjectDataProvider
{if (value != null) target.ObjectType = value ?? default; return target; }
// System.Windows.Data.ObjectDataProvider / ObjectInstance
public static TChild WithObjectInstance<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.Data.ObjectDataProvider, TChild>? doNotUse = null) where TChild: System.Windows.Data.ObjectDataProvider
{if (value != null) target.ObjectInstance = value ?? default; return target; }
// System.Windows.Data.ObjectDataProvider / MethodName
public static TChild WithMethodName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Data.ObjectDataProvider, TChild>? doNotUse = null) where TChild: System.Windows.Data.ObjectDataProvider
{if (value != null) target.MethodName = value ?? default; return target; }
// System.Windows.Data.ObjectDataProvider / IsAsynchronous
public static TChild WithIsAsynchronous<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.ObjectDataProvider, TChild>? doNotUse = null) where TChild: System.Windows.Data.ObjectDataProvider
{if (value != null) target.IsAsynchronous = value ?? default; return target; }
// System.Windows.Data.PropertyGroupDescription / PropertyName
public static TChild WithPropertyName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Data.PropertyGroupDescription, TChild>? doNotUse = null) where TChild: System.Windows.Data.PropertyGroupDescription
{if (value != null) target.PropertyName = value ?? default; return target; }
// System.Windows.Data.PropertyGroupDescription / Converter
public static TChild WithConverter<TChild>(this TChild target, System.Windows.Data.IValueConverter? value, Disambigator<System.Windows.Data.PropertyGroupDescription, TChild>? doNotUse = null) where TChild: System.Windows.Data.PropertyGroupDescription
{if (value != null) target.Converter = value ?? default; return target; }
// System.Windows.Data.PropertyGroupDescription / StringComparison
public static TChild WithStringComparison<TChild>(this TChild target, System.StringComparison? value, Disambigator<System.Windows.Data.PropertyGroupDescription, TChild>? doNotUse = null) where TChild: System.Windows.Data.PropertyGroupDescription
{if (value != null) target.StringComparison = value ?? default; return target; }
// System.Windows.Data.RelativeSource / Mode
public static TChild WithMode<TChild>(this TChild target, System.Windows.Data.RelativeSourceMode? value, Disambigator<System.Windows.Data.RelativeSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.RelativeSource
{if (value != null) target.Mode = value ?? default; return target; }
// System.Windows.Data.RelativeSource / AncestorType
public static TChild WithAncestorType<TChild>(this TChild target, System.Type? value, Disambigator<System.Windows.Data.RelativeSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.RelativeSource
{if (value != null) target.AncestorType = value ?? default; return target; }
// System.Windows.Data.RelativeSource / AncestorLevel
public static TChild WithAncestorLevel<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.Data.RelativeSource, TChild>? doNotUse = null) where TChild: System.Windows.Data.RelativeSource
{if (value != null) target.AncestorLevel = value ?? default; return target; }
// System.Windows.Data.ValueConversionAttribute / ParameterType
public static System.Windows.Data.ValueConversionAttribute WithParameterType<TChild>(this System.Windows.Data.ValueConversionAttribute target, System.Type? value) 
{if (value != null) target.ParameterType = value ?? default; return target; }
// System.Windows.Data.XmlDataProvider / Source
public static TChild WithSource<TChild>(this TChild target, System.Uri? value, Disambigator<System.Windows.Data.XmlDataProvider, TChild>? doNotUse = null) where TChild: System.Windows.Data.XmlDataProvider
{if (value != null) target.Source = value ?? default; return target; }
// System.Windows.Data.XmlDataProvider / Document
public static TChild WithDocument<TChild>(this TChild target, System.Xml.XmlDocument? value, Disambigator<System.Windows.Data.XmlDataProvider, TChild>? doNotUse = null) where TChild: System.Windows.Data.XmlDataProvider
{if (value != null) target.Document = value ?? default; return target; }
// System.Windows.Data.XmlDataProvider / XPath
public static TChild WithXPath<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Data.XmlDataProvider, TChild>? doNotUse = null) where TChild: System.Windows.Data.XmlDataProvider
{if (value != null) target.XPath = value ?? default; return target; }
// System.Windows.Data.XmlDataProvider / XmlNamespaceManager
public static TChild WithXmlNamespaceManager<TChild>(this TChild target, System.Xml.XmlNamespaceManager? value, Disambigator<System.Windows.Data.XmlDataProvider, TChild>? doNotUse = null) where TChild: System.Windows.Data.XmlDataProvider
{if (value != null) target.XmlNamespaceManager = value ?? default; return target; }
// System.Windows.Data.XmlDataProvider / IsAsynchronous
public static TChild WithIsAsynchronous<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Data.XmlDataProvider, TChild>? doNotUse = null) where TChild: System.Windows.Data.XmlDataProvider
{if (value != null) target.IsAsynchronous = value ?? default; return target; }
// System.Windows.Data.XmlNamespaceMapping / Prefix
public static TChild WithPrefix<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Data.XmlNamespaceMapping, TChild>? doNotUse = null) where TChild: System.Windows.Data.XmlNamespaceMapping
{if (value != null) target.Prefix = value ?? default; return target; }
// System.Windows.Data.XmlNamespaceMapping / Uri
public static TChild WithUri<TChild>(this TChild target, System.Uri? value, Disambigator<System.Windows.Data.XmlNamespaceMapping, TChild>? doNotUse = null) where TChild: System.Windows.Data.XmlNamespaceMapping
{if (value != null) target.Uri = value ?? default; return target; }
// System.Windows.Markup.ParserContext / XmlLang
public static TChild WithXmlLang<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Markup.ParserContext, TChild>? doNotUse = null) where TChild: System.Windows.Markup.ParserContext
{if (value != null) target.XmlLang = value ?? default; return target; }
// System.Windows.Markup.ParserContext / XmlSpace
public static TChild WithXmlSpace<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Markup.ParserContext, TChild>? doNotUse = null) where TChild: System.Windows.Markup.ParserContext
{if (value != null) target.XmlSpace = value ?? default; return target; }
// System.Windows.Markup.ParserContext / XamlTypeMapper
public static TChild WithXamlTypeMapper<TChild>(this TChild target, System.Windows.Markup.XamlTypeMapper? value, Disambigator<System.Windows.Markup.ParserContext, TChild>? doNotUse = null) where TChild: System.Windows.Markup.ParserContext
{if (value != null) target.XamlTypeMapper = value ?? default; return target; }
// System.Windows.Markup.ParserContext / BaseUri
public static TChild WithBaseUri<TChild>(this TChild target, System.Uri? value, Disambigator<System.Windows.Markup.ParserContext, TChild>? doNotUse = null) where TChild: System.Windows.Markup.ParserContext
{if (value != null) target.BaseUri = value ?? default; return target; }
// System.Windows.Markup.XamlDesignerSerializationManager / XamlWriterMode
public static TChild WithXamlWriterMode<TChild>(this TChild target, System.Windows.Markup.XamlWriterMode? value, Disambigator<System.Windows.Markup.XamlDesignerSerializationManager, TChild>? doNotUse = null) where TChild: System.Windows.Markup.XamlDesignerSerializationManager
{if (value != null) target.XamlWriterMode = value ?? default; return target; }
// System.Windows.Markup.NamespaceMapEntry / XmlNamespace
public static TChild WithXmlNamespace<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Markup.NamespaceMapEntry, TChild>? doNotUse = null) where TChild: System.Windows.Markup.NamespaceMapEntry
{if (value != null) target.XmlNamespace = value ?? default; return target; }
// System.Windows.Markup.NamespaceMapEntry / AssemblyName
public static TChild WithAssemblyName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Markup.NamespaceMapEntry, TChild>? doNotUse = null) where TChild: System.Windows.Markup.NamespaceMapEntry
{if (value != null) target.AssemblyName = value ?? default; return target; }
// System.Windows.Markup.NamespaceMapEntry / ClrNamespace
public static TChild WithClrNamespace<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Markup.NamespaceMapEntry, TChild>? doNotUse = null) where TChild: System.Windows.Markup.NamespaceMapEntry
{if (value != null) target.ClrNamespace = value ?? default; return target; }
// System.Windows.Markup.Localizer.ElementLocalizability / FormattingTag
public static TChild WithFormattingTag<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Markup.Localizer.ElementLocalizability, TChild>? doNotUse = null) where TChild: System.Windows.Markup.Localizer.ElementLocalizability
{if (value != null) target.FormattingTag = value ?? default; return target; }
// System.Windows.Markup.Localizer.ElementLocalizability / Attribute
public static TChild WithAttribute<TChild>(this TChild target, System.Windows.LocalizabilityAttribute? value, Disambigator<System.Windows.Markup.Localizer.ElementLocalizability, TChild>? doNotUse = null) where TChild: System.Windows.Markup.Localizer.ElementLocalizability
{if (value != null) target.Attribute = value ?? default; return target; }
// System.Windows.Markup.Localizer.BamlLocalizableResource / Content
public static TChild WithContent<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Markup.Localizer.BamlLocalizableResource, TChild>? doNotUse = null) where TChild: System.Windows.Markup.Localizer.BamlLocalizableResource
{if (value != null) target.Content = value ?? default; return target; }
// System.Windows.Markup.Localizer.BamlLocalizableResource / Comments
public static TChild WithComments<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Markup.Localizer.BamlLocalizableResource, TChild>? doNotUse = null) where TChild: System.Windows.Markup.Localizer.BamlLocalizableResource
{if (value != null) target.Comments = value ?? default; return target; }
// System.Windows.Markup.Localizer.BamlLocalizableResource / Modifiable
public static TChild WithModifiable<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Markup.Localizer.BamlLocalizableResource, TChild>? doNotUse = null) where TChild: System.Windows.Markup.Localizer.BamlLocalizableResource
{if (value != null) target.Modifiable = value ?? default; return target; }
// System.Windows.Markup.Localizer.BamlLocalizableResource / Readable
public static TChild WithReadable<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Markup.Localizer.BamlLocalizableResource, TChild>? doNotUse = null) where TChild: System.Windows.Markup.Localizer.BamlLocalizableResource
{if (value != null) target.Readable = value ?? default; return target; }
// System.Windows.Markup.Localizer.BamlLocalizableResource / Category
public static TChild WithCategory<TChild>(this TChild target, System.Windows.LocalizationCategory? value, Disambigator<System.Windows.Markup.Localizer.BamlLocalizableResource, TChild>? doNotUse = null) where TChild: System.Windows.Markup.Localizer.BamlLocalizableResource
{if (value != null) target.Category = value ?? default; return target; }
// System.Windows.Navigation.FragmentNavigationEventArgs / Handled
public static TChild WithHandled<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Navigation.FragmentNavigationEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.FragmentNavigationEventArgs
{if (value != null) target.Handled = value ?? default; return target; }
// System.Windows.Navigation.JournalEntry / Source
public static TChild WithSource<TChild>(this TChild target, System.Uri? value, Disambigator<System.Windows.Navigation.JournalEntry, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.JournalEntry
{if (value != null) target.Source = value ?? default; return target; }
// System.Windows.Navigation.NavigatingCancelEventArgs / ContentStateToSave
public static TChild WithContentStateToSave<TChild>(this TChild target, System.Windows.Navigation.CustomContentState? value, Disambigator<System.Windows.Navigation.NavigatingCancelEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigatingCancelEventArgs
{if (value != null) target.ContentStateToSave = value ?? default; return target; }
// System.Windows.Navigation.NavigationFailedEventArgs / Handled
public static TChild WithHandled<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Navigation.NavigationFailedEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.NavigationFailedEventArgs
{if (value != null) target.Handled = value ?? default; return target; }
// System.Windows.Navigation.NavigationService / Source
public static System.Windows.Navigation.NavigationService WithSource<TChild>(this System.Windows.Navigation.NavigationService target, System.Uri? value) 
{if (value != null) target.Source = value ?? default; return target; }
// System.Windows.Navigation.NavigationService / Content
public static System.Windows.Navigation.NavigationService WithContent<TChild>(this System.Windows.Navigation.NavigationService target, System.Object? value) 
{if (value != null) target.Content = value ?? default; return target; }
// System.Windows.Navigation.PageFunctionBase / RemoveFromJournal
public static TChild WithRemoveFromJournal<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Navigation.PageFunctionBase, TChild>? doNotUse = null) where TChild: System.Windows.Navigation.PageFunctionBase
{if (value != null) target.RemoveFromJournal = value ?? default; return target; }
// System.Windows.Navigation.ReturnEventArgs`1[T] / Result
// System.Windows.Documents.Adorner / IsClipEnabled
public static TChild WithIsClipEnabled<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Documents.Adorner, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Adorner
{if (value != null) target.IsClipEnabled = value ?? default; return target; }
// System.Windows.Documents.AdornerDecorator / Child
public static TChild WithChild<TChild>(this TChild target, System.Windows.UIElement? value, Disambigator<System.Windows.Documents.AdornerDecorator, TChild>? doNotUse = null) where TChild: System.Windows.Documents.AdornerDecorator
{if (value != null) target.Child = value ?? default; return target; }
// System.Windows.Documents.BlockUIContainer / Child
public static TChild WithChild<TChild>(this TChild target, System.Windows.UIElement? value, Disambigator<System.Windows.Documents.BlockUIContainer, TChild>? doNotUse = null) where TChild: System.Windows.Documents.BlockUIContainer
{if (value != null) target.Child = value ?? default; return target; }
// System.Windows.Documents.InlineUIContainer / Child
public static TChild WithChild<TChild>(this TChild target, System.Windows.UIElement? value, Disambigator<System.Windows.Documents.InlineUIContainer, TChild>? doNotUse = null) where TChild: System.Windows.Documents.InlineUIContainer
{if (value != null) target.Child = value ?? default; return target; }
// System.Windows.Documents.LinkTarget / Name
public static System.Windows.Documents.LinkTarget WithName<TChild>(this System.Windows.Documents.LinkTarget target, System.String? value) 
{if (value != null) target.Name = value ?? default; return target; }
// System.Windows.Documents.PageContent / Child
public static System.Windows.Documents.PageContent WithChild<TChild>(this System.Windows.Documents.PageContent target, System.Windows.Documents.FixedPage? value) 
{if (value != null) target.Child = value ?? default; return target; }
// System.Windows.Documents.Section / HasTrailingParagraphBreakOnPaste
public static TChild WithHasTrailingParagraphBreakOnPaste<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Documents.Section, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Section
{if (value != null) target.HasTrailingParagraphBreakOnPaste = value ?? default; return target; }
// System.Windows.Documents.TableCellCollection / Capacity
public static System.Windows.Documents.TableCellCollection WithCapacity<TChild>(this System.Windows.Documents.TableCellCollection target, System.Int32? value) 
{if (value != null) target.Capacity = value ?? default; return target; }
// System.Windows.Documents.TableColumnCollection / Capacity
public static System.Windows.Documents.TableColumnCollection WithCapacity<TChild>(this System.Windows.Documents.TableColumnCollection target, System.Int32? value) 
{if (value != null) target.Capacity = value ?? default; return target; }
// System.Windows.Documents.TableRowCollection / Capacity
public static System.Windows.Documents.TableRowCollection WithCapacity<TChild>(this System.Windows.Documents.TableRowCollection target, System.Int32? value) 
{if (value != null) target.Capacity = value ?? default; return target; }
// System.Windows.Documents.TableRowGroupCollection / Capacity
public static System.Windows.Documents.TableRowGroupCollection WithCapacity<TChild>(this System.Windows.Documents.TableRowGroupCollection target, System.Int32? value) 
{if (value != null) target.Capacity = value ?? default; return target; }
// System.Windows.Documents.TextElementEditingBehaviorAttribute / IsMergeable
public static System.Windows.Documents.TextElementEditingBehaviorAttribute WithIsMergeable<TChild>(this System.Windows.Documents.TextElementEditingBehaviorAttribute target, System.Boolean? value) 
{if (value != null) target.IsMergeable = value ?? default; return target; }
// System.Windows.Documents.TextElementEditingBehaviorAttribute / IsTypographicOnly
public static System.Windows.Documents.TextElementEditingBehaviorAttribute WithIsTypographicOnly<TChild>(this System.Windows.Documents.TextElementEditingBehaviorAttribute target, System.Boolean? value) 
{if (value != null) target.IsTypographicOnly = value ?? default; return target; }
// System.Windows.Documents.TextRange / Text
public static TChild WithText<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Documents.TextRange, TChild>? doNotUse = null) where TChild: System.Windows.Documents.TextRange
{if (value != null) target.Text = value ?? default; return target; }
// System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs / CurrentPrintTicket
public static TChild WithCurrentPrintTicket<TChild>(this TChild target, System.Printing.PrintTicket? value, Disambigator<System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Documents.Serialization.WritingPrintTicketRequiredEventArgs
{if (value != null) target.CurrentPrintTicket = value ?? default; return target; }
// System.Windows.Documents.DocumentStructures.NamedElement / NameReference
public static TChild WithNameReference<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Documents.DocumentStructures.NamedElement, TChild>? doNotUse = null) where TChild: System.Windows.Documents.DocumentStructures.NamedElement
{if (value != null) target.NameReference = value ?? default; return target; }
// System.Windows.Documents.DocumentStructures.ListItemStructure / Marker
public static TChild WithMarker<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Documents.DocumentStructures.ListItemStructure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.DocumentStructures.ListItemStructure
{if (value != null) target.Marker = value ?? default; return target; }
// System.Windows.Documents.DocumentStructures.TableCellStructure / RowSpan
public static TChild WithRowSpan<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.Documents.DocumentStructures.TableCellStructure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.DocumentStructures.TableCellStructure
{if (value != null) target.RowSpan = value ?? default; return target; }
// System.Windows.Documents.DocumentStructures.TableCellStructure / ColumnSpan
public static TChild WithColumnSpan<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.Documents.DocumentStructures.TableCellStructure, TChild>? doNotUse = null) where TChild: System.Windows.Documents.DocumentStructures.TableCellStructure
{if (value != null) target.ColumnSpan = value ?? default; return target; }
// System.Windows.Documents.DocumentStructures.StoryFragment / StoryName
public static TChild WithStoryName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Documents.DocumentStructures.StoryFragment, TChild>? doNotUse = null) where TChild: System.Windows.Documents.DocumentStructures.StoryFragment
{if (value != null) target.StoryName = value ?? default; return target; }
// System.Windows.Documents.DocumentStructures.StoryFragment / FragmentName
public static TChild WithFragmentName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Documents.DocumentStructures.StoryFragment, TChild>? doNotUse = null) where TChild: System.Windows.Documents.DocumentStructures.StoryFragment
{if (value != null) target.FragmentName = value ?? default; return target; }
// System.Windows.Documents.DocumentStructures.StoryFragment / FragmentType
public static TChild WithFragmentType<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Documents.DocumentStructures.StoryFragment, TChild>? doNotUse = null) where TChild: System.Windows.Documents.DocumentStructures.StoryFragment
{if (value != null) target.FragmentType = value ?? default; return target; }
// System.Windows.Controls.AddingNewItemEventArgs / NewItem
public static TChild WithNewItem<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.Controls.AddingNewItemEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AddingNewItemEventArgs
{if (value != null) target.NewItem = value ?? default; return target; }
// System.Windows.Controls.AdornedElementPlaceholder / Child
public static TChild WithChild<TChild>(this TChild target, System.Windows.UIElement? value, Disambigator<System.Windows.Controls.AdornedElementPlaceholder, TChild>? doNotUse = null) where TChild: System.Windows.Controls.AdornedElementPlaceholder
{if (value != null) target.Child = value ?? default; return target; }
// System.Windows.Controls.CalendarDateRange / End
public static System.Windows.Controls.CalendarDateRange WithEnd<TChild>(this System.Windows.Controls.CalendarDateRange target, System.DateTime? value) 
{if (value != null) target.End = value ?? default; return target; }
// System.Windows.Controls.CalendarDateRange / Start
public static System.Windows.Controls.CalendarDateRange WithStart<TChild>(this System.Windows.Controls.CalendarDateRange target, System.DateTime? value) 
{if (value != null) target.Start = value ?? default; return target; }
// System.Windows.Controls.CleanUpVirtualizedItemEventArgs / Cancel
public static TChild WithCancel<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.CleanUpVirtualizedItemEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.CleanUpVirtualizedItemEventArgs
{if (value != null) target.Cancel = value ?? default; return target; }
// System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs / Column
public static TChild WithColumn<TChild>(this TChild target, System.Windows.Controls.DataGridColumn? value, Disambigator<System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs
{if (value != null) target.Column = value ?? default; return target; }
// System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs / Cancel
public static TChild WithCancel<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs
{if (value != null) target.Cancel = value ?? default; return target; }
// System.Windows.Controls.DataGridBeginningEditEventArgs / Cancel
public static TChild WithCancel<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.DataGridBeginningEditEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridBeginningEditEventArgs
{if (value != null) target.Cancel = value ?? default; return target; }
// System.Windows.Controls.DataGridBoundColumn / Binding
public static TChild WithBinding<TChild>(this TChild target, System.Windows.Data.BindingBase? value, Disambigator<System.Windows.Controls.DataGridBoundColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridBoundColumn
{if (value != null) target.Binding = value ?? default; return target; }
// System.Windows.Controls.DataGridBoundColumn / ClipboardContentBinding
public static TChild WithClipboardContentBinding<TChild>(this TChild target, System.Windows.Data.BindingBase? value, Disambigator<System.Windows.Controls.DataGridBoundColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridBoundColumn
{if (value != null) target.ClipboardContentBinding = value ?? default; return target; }
// System.Windows.Controls.DataGridCellClipboardEventArgs / Content
public static TChild WithContent<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.Controls.DataGridCellClipboardEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridCellClipboardEventArgs
{if (value != null) target.Content = value ?? default; return target; }
// System.Windows.Controls.DataGridCellEditEndingEventArgs / Cancel
public static TChild WithCancel<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.DataGridCellEditEndingEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridCellEditEndingEventArgs
{if (value != null) target.Cancel = value ?? default; return target; }
// System.Windows.Controls.DataGridColumn / ClipboardContentBinding
public static TChild WithClipboardContentBinding<TChild>(this TChild target, System.Windows.Data.BindingBase? value, Disambigator<System.Windows.Controls.DataGridColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumn
{if (value != null) target.ClipboardContentBinding = value ?? default; return target; }
// System.Windows.Controls.DataGridColumnReorderingEventArgs / Cancel
public static TChild WithCancel<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.DataGridColumnReorderingEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumnReorderingEventArgs
{if (value != null) target.Cancel = value ?? default; return target; }
// System.Windows.Controls.DataGridColumnReorderingEventArgs / DropLocationIndicator
public static TChild WithDropLocationIndicator<TChild>(this TChild target, System.Windows.Controls.Control? value, Disambigator<System.Windows.Controls.DataGridColumnReorderingEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumnReorderingEventArgs
{if (value != null) target.DropLocationIndicator = value ?? default; return target; }
// System.Windows.Controls.DataGridColumnReorderingEventArgs / DragIndicator
public static TChild WithDragIndicator<TChild>(this TChild target, System.Windows.Controls.Control? value, Disambigator<System.Windows.Controls.DataGridColumnReorderingEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridColumnReorderingEventArgs
{if (value != null) target.DragIndicator = value ?? default; return target; }
// System.Windows.Controls.DataGridComboBoxColumn / SelectedValueBinding
public static TChild WithSelectedValueBinding<TChild>(this TChild target, System.Windows.Data.BindingBase? value, Disambigator<System.Windows.Controls.DataGridComboBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridComboBoxColumn
{if (value != null) target.SelectedValueBinding = value ?? default; return target; }
// System.Windows.Controls.DataGridComboBoxColumn / SelectedItemBinding
public static TChild WithSelectedItemBinding<TChild>(this TChild target, System.Windows.Data.BindingBase? value, Disambigator<System.Windows.Controls.DataGridComboBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridComboBoxColumn
{if (value != null) target.SelectedItemBinding = value ?? default; return target; }
// System.Windows.Controls.DataGridComboBoxColumn / TextBinding
public static TChild WithTextBinding<TChild>(this TChild target, System.Windows.Data.BindingBase? value, Disambigator<System.Windows.Controls.DataGridComboBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridComboBoxColumn
{if (value != null) target.TextBinding = value ?? default; return target; }
// System.Windows.Controls.DataGridComboBoxColumn / ClipboardContentBinding
public static TChild WithClipboardContentBinding<TChild>(this TChild target, System.Windows.Data.BindingBase? value, Disambigator<System.Windows.Controls.DataGridComboBoxColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridComboBoxColumn
{if (value != null) target.ClipboardContentBinding = value ?? default; return target; }
// System.Windows.Controls.DataGridHyperlinkColumn / ContentBinding
public static TChild WithContentBinding<TChild>(this TChild target, System.Windows.Data.BindingBase? value, Disambigator<System.Windows.Controls.DataGridHyperlinkColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridHyperlinkColumn
{if (value != null) target.ContentBinding = value ?? default; return target; }
// System.Windows.Controls.DataGridRowEditEndingEventArgs / Cancel
public static TChild WithCancel<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.DataGridRowEditEndingEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridRowEditEndingEventArgs
{if (value != null) target.Cancel = value ?? default; return target; }
// System.Windows.Controls.DataGridSortingEventArgs / Handled
public static TChild WithHandled<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.DataGridSortingEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DataGridSortingEventArgs
{if (value != null) target.Handled = value ?? default; return target; }
// System.Windows.Controls.DatePickerDateValidationErrorEventArgs / ThrowException
public static TChild WithThrowException<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.DatePickerDateValidationErrorEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.DatePickerDateValidationErrorEventArgs
{if (value != null) target.ThrowException = value ?? default; return target; }
// System.Windows.Controls.Decorator / Child
public static TChild WithChild<TChild>(this TChild target, System.Windows.UIElement? value, Disambigator<System.Windows.Controls.Decorator, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Decorator
{if (value != null) target.Child = value ?? default; return target; }
// System.Windows.Controls.GridViewColumn / DisplayMemberBinding
public static TChild WithDisplayMemberBinding<TChild>(this TChild target, System.Windows.Data.BindingBase? value, Disambigator<System.Windows.Controls.GridViewColumn, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GridViewColumn
{if (value != null) target.DisplayMemberBinding = value ?? default; return target; }
// System.Windows.Controls.GroupStyle / Panel
public static TChild WithPanel<TChild>(this TChild target, System.Windows.Controls.ItemsPanelTemplate? value, Disambigator<System.Windows.Controls.GroupStyle, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GroupStyle
{if (value != null) target.Panel = value ?? default; return target; }
// System.Windows.Controls.GroupStyle / ContainerStyle
public static TChild WithContainerStyle<TChild>(this TChild target, System.Windows.Style? value, Disambigator<System.Windows.Controls.GroupStyle, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GroupStyle
{if (value != null) target.ContainerStyle = value ?? default; return target; }
// System.Windows.Controls.GroupStyle / ContainerStyleSelector
public static TChild WithContainerStyleSelector<TChild>(this TChild target, System.Windows.Controls.StyleSelector? value, Disambigator<System.Windows.Controls.GroupStyle, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GroupStyle
{if (value != null) target.ContainerStyleSelector = value ?? default; return target; }
// System.Windows.Controls.GroupStyle / HeaderTemplate
public static TChild WithHeaderTemplate<TChild>(this TChild target, System.Windows.DataTemplate? value, Disambigator<System.Windows.Controls.GroupStyle, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GroupStyle
{if (value != null) target.HeaderTemplate = value ?? default; return target; }
// System.Windows.Controls.GroupStyle / HeaderTemplateSelector
public static TChild WithHeaderTemplateSelector<TChild>(this TChild target, System.Windows.Controls.DataTemplateSelector? value, Disambigator<System.Windows.Controls.GroupStyle, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GroupStyle
{if (value != null) target.HeaderTemplateSelector = value ?? default; return target; }
// System.Windows.Controls.GroupStyle / HeaderStringFormat
public static TChild WithHeaderStringFormat<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Controls.GroupStyle, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GroupStyle
{if (value != null) target.HeaderStringFormat = value ?? default; return target; }
// System.Windows.Controls.GroupStyle / HidesIfEmpty
public static TChild WithHidesIfEmpty<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.GroupStyle, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GroupStyle
{if (value != null) target.HidesIfEmpty = value ?? default; return target; }
// System.Windows.Controls.GroupStyle / AlternationCount
public static TChild WithAlternationCount<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.Controls.GroupStyle, TChild>? doNotUse = null) where TChild: System.Windows.Controls.GroupStyle
{if (value != null) target.AlternationCount = value ?? default; return target; }
// System.Windows.Controls.InkCanvas / EraserShape
public static TChild WithEraserShape<TChild>(this TChild target, System.Windows.Ink.StylusShape? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas
{if (value != null) target.EraserShape = value ?? default; return target; }
// System.Windows.Controls.InkCanvas / UseCustomCursor
public static TChild WithUseCustomCursor<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas
{if (value != null) target.UseCustomCursor = value ?? default; return target; }
// System.Windows.Controls.InkCanvas / MoveEnabled
public static TChild WithMoveEnabled<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas
{if (value != null) target.MoveEnabled = value ?? default; return target; }
// System.Windows.Controls.InkCanvas / ResizeEnabled
public static TChild WithResizeEnabled<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas
{if (value != null) target.ResizeEnabled = value ?? default; return target; }
// System.Windows.Controls.InkCanvas / DefaultStylusPointDescription
public static TChild WithDefaultStylusPointDescription<TChild>(this TChild target, System.Windows.Input.StylusPointDescription? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas
{if (value != null) target.DefaultStylusPointDescription = value ?? default; return target; }
// System.Windows.Controls.InkCanvas / PreferredPasteFormats
public static TChild WithPreferredPasteFormats<TChild>(this TChild target, System.Collections.Generic.IEnumerable<System.Windows.Controls.InkCanvasClipboardFormat>? value, Disambigator<System.Windows.Controls.InkCanvas, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvas
{if (value != null) target.PreferredPasteFormats = value ?? default; return target; }
// System.Windows.Controls.ItemCollection / Filter
public static System.Windows.Controls.ItemCollection WithFilter<TChild>(this System.Windows.Controls.ItemCollection target, System.Predicate<System.Object>? value) 
{if (value != null) target.Filter = value ?? default; return target; }
// System.Windows.Controls.ItemCollection / IsLiveSorting
public static System.Windows.Controls.ItemCollection WithIsLiveSorting<TChild>(this System.Windows.Controls.ItemCollection target, System.Nullable<System.Boolean> value) 
{if (value != null) target.IsLiveSorting = value ?? default; return target; }
// System.Windows.Controls.ItemCollection / IsLiveFiltering
public static System.Windows.Controls.ItemCollection WithIsLiveFiltering<TChild>(this System.Windows.Controls.ItemCollection target, System.Nullable<System.Boolean> value) 
{if (value != null) target.IsLiveFiltering = value ?? default; return target; }
// System.Windows.Controls.ItemCollection / IsLiveGrouping
public static System.Windows.Controls.ItemCollection WithIsLiveGrouping<TChild>(this System.Windows.Controls.ItemCollection target, System.Nullable<System.Boolean> value) 
{if (value != null) target.IsLiveGrouping = value ?? default; return target; }
// System.Windows.Controls.MediaElement / Clock
public static TChild WithClock<TChild>(this TChild target, System.Windows.Media.MediaClock? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement
{if (value != null) target.Clock = value ?? default; return target; }
// System.Windows.Controls.MediaElement / Position
public static TChild WithPosition<TChild>(this TChild target, System.TimeSpan? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement
{if (value != null) target.Position = value ?? default; return target; }
// System.Windows.Controls.MediaElement / SpeedRatio
public static TChild WithSpeedRatio<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Controls.MediaElement, TChild>? doNotUse = null) where TChild: System.Windows.Controls.MediaElement
{if (value != null) target.SpeedRatio = value ?? default; return target; }
// System.Windows.Controls.Page / WindowTitle
public static TChild WithWindowTitle<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page
{if (value != null) target.WindowTitle = value ?? default; return target; }
// System.Windows.Controls.Page / WindowHeight
public static TChild WithWindowHeight<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page
{if (value != null) target.WindowHeight = value ?? default; return target; }
// System.Windows.Controls.Page / WindowWidth
public static TChild WithWindowWidth<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page
{if (value != null) target.WindowWidth = value ?? default; return target; }
// System.Windows.Controls.Page / ShowsNavigationUI
public static TChild WithShowsNavigationUI<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.Page, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Page
{if (value != null) target.ShowsNavigationUI = value ?? default; return target; }
// System.Windows.Controls.PageRange / PageFrom
public static System.Windows.Controls.PageRange WithPageFrom<TChild>(this System.Windows.Controls.PageRange target, System.Int32? value) 
{if (value != null) target.PageFrom = value ?? default; return target; }
// System.Windows.Controls.PageRange / PageTo
public static System.Windows.Controls.PageRange WithPageTo<TChild>(this System.Windows.Controls.PageRange target, System.Int32? value) 
{if (value != null) target.PageTo = value ?? default; return target; }
// System.Windows.Controls.PasswordBox / Password
public static System.Windows.Controls.PasswordBox WithPassword<TChild>(this System.Windows.Controls.PasswordBox target, System.String? value) 
{if (value != null) target.Password = value ?? default; return target; }
// System.Windows.Controls.ScrollContentPresenter / CanHorizontallyScroll
public static System.Windows.Controls.ScrollContentPresenter WithCanHorizontallyScroll<TChild>(this System.Windows.Controls.ScrollContentPresenter target, System.Boolean? value) 
{if (value != null) target.CanHorizontallyScroll = value ?? default; return target; }
// System.Windows.Controls.ScrollContentPresenter / CanVerticallyScroll
public static System.Windows.Controls.ScrollContentPresenter WithCanVerticallyScroll<TChild>(this System.Windows.Controls.ScrollContentPresenter target, System.Boolean? value) 
{if (value != null) target.CanVerticallyScroll = value ?? default; return target; }
// System.Windows.Controls.ScrollContentPresenter / ScrollOwner
public static System.Windows.Controls.ScrollContentPresenter WithScrollOwner<TChild>(this System.Windows.Controls.ScrollContentPresenter target, System.Windows.Controls.ScrollViewer? value) 
{if (value != null) target.ScrollOwner = value ?? default; return target; }
// System.Windows.Controls.PrintDialog / PageRangeSelection
public static TChild WithPageRangeSelection<TChild>(this TChild target, System.Windows.Controls.PageRangeSelection? value, Disambigator<System.Windows.Controls.PrintDialog, TChild>? doNotUse = null) where TChild: System.Windows.Controls.PrintDialog
{if (value != null) target.PageRangeSelection = value ?? default; return target; }
// System.Windows.Controls.PrintDialog / PageRange
public static TChild WithPageRange<TChild>(this TChild target, System.Windows.Controls.PageRange? value, Disambigator<System.Windows.Controls.PrintDialog, TChild>? doNotUse = null) where TChild: System.Windows.Controls.PrintDialog
{if (value != null) target.PageRange = value ?? default; return target; }
// System.Windows.Controls.PrintDialog / UserPageRangeEnabled
public static TChild WithUserPageRangeEnabled<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.PrintDialog, TChild>? doNotUse = null) where TChild: System.Windows.Controls.PrintDialog
{if (value != null) target.UserPageRangeEnabled = value ?? default; return target; }
// System.Windows.Controls.PrintDialog / SelectedPagesEnabled
public static TChild WithSelectedPagesEnabled<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.PrintDialog, TChild>? doNotUse = null) where TChild: System.Windows.Controls.PrintDialog
{if (value != null) target.SelectedPagesEnabled = value ?? default; return target; }
// System.Windows.Controls.PrintDialog / CurrentPageEnabled
public static TChild WithCurrentPageEnabled<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.PrintDialog, TChild>? doNotUse = null) where TChild: System.Windows.Controls.PrintDialog
{if (value != null) target.CurrentPageEnabled = value ?? default; return target; }
// System.Windows.Controls.PrintDialog / MinPage
public static TChild WithMinPage<TChild>(this TChild target, System.UInt32? value, Disambigator<System.Windows.Controls.PrintDialog, TChild>? doNotUse = null) where TChild: System.Windows.Controls.PrintDialog
{if (value != null) target.MinPage = value ?? default; return target; }
// System.Windows.Controls.PrintDialog / MaxPage
public static TChild WithMaxPage<TChild>(this TChild target, System.UInt32? value, Disambigator<System.Windows.Controls.PrintDialog, TChild>? doNotUse = null) where TChild: System.Windows.Controls.PrintDialog
{if (value != null) target.MaxPage = value ?? default; return target; }
// System.Windows.Controls.PrintDialog / PrintQueue
public static TChild WithPrintQueue<TChild>(this TChild target, System.Printing.PrintQueue? value, Disambigator<System.Windows.Controls.PrintDialog, TChild>? doNotUse = null) where TChild: System.Windows.Controls.PrintDialog
{if (value != null) target.PrintQueue = value ?? default; return target; }
// System.Windows.Controls.PrintDialog / PrintTicket
public static TChild WithPrintTicket<TChild>(this TChild target, System.Printing.PrintTicket? value, Disambigator<System.Windows.Controls.PrintDialog, TChild>? doNotUse = null) where TChild: System.Windows.Controls.PrintDialog
{if (value != null) target.PrintTicket = value ?? default; return target; }
// System.Windows.Controls.RichTextBox / Document
public static TChild WithDocument<TChild>(this TChild target, System.Windows.Documents.FlowDocument? value, Disambigator<System.Windows.Controls.RichTextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.RichTextBox
{if (value != null) target.Document = value ?? default; return target; }
// System.Windows.Controls.RichTextBox / CaretPosition
public static TChild WithCaretPosition<TChild>(this TChild target, System.Windows.Documents.TextPointer? value, Disambigator<System.Windows.Controls.RichTextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.RichTextBox
{if (value != null) target.CaretPosition = value ?? default; return target; }
// System.Windows.Controls.StackPanel / CanHorizontallyScroll
public static TChild WithCanHorizontallyScroll<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.StackPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.StackPanel
{if (value != null) target.CanHorizontallyScroll = value ?? default; return target; }
// System.Windows.Controls.StackPanel / CanVerticallyScroll
public static TChild WithCanVerticallyScroll<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.StackPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.StackPanel
{if (value != null) target.CanVerticallyScroll = value ?? default; return target; }
// System.Windows.Controls.StackPanel / ScrollOwner
public static TChild WithScrollOwner<TChild>(this TChild target, System.Windows.Controls.ScrollViewer? value, Disambigator<System.Windows.Controls.StackPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.StackPanel
{if (value != null) target.ScrollOwner = value ?? default; return target; }
// System.Windows.Controls.TextBox / SelectedText
public static TChild WithSelectedText<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox
{if (value != null) target.SelectedText = value ?? default; return target; }
// System.Windows.Controls.TextBox / SelectionLength
public static TChild WithSelectionLength<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox
{if (value != null) target.SelectionLength = value ?? default; return target; }
// System.Windows.Controls.TextBox / SelectionStart
public static TChild WithSelectionStart<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox
{if (value != null) target.SelectionStart = value ?? default; return target; }
// System.Windows.Controls.TextBox / CaretIndex
public static TChild WithCaretIndex<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.Controls.TextBox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.TextBox
{if (value != null) target.CaretIndex = value ?? default; return target; }
// System.Windows.Controls.UIElementCollection / Capacity
public static TChild WithCapacity<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.Controls.UIElementCollection, TChild>? doNotUse = null) where TChild: System.Windows.Controls.UIElementCollection
{if (value != null) target.Capacity = value ?? default; return target; }
// System.Windows.Controls.ValidationError / RuleInError
public static TChild WithRuleInError<TChild>(this TChild target, System.Windows.Controls.ValidationRule? value, Disambigator<System.Windows.Controls.ValidationError, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ValidationError
{if (value != null) target.RuleInError = value ?? default; return target; }
// System.Windows.Controls.ValidationError / ErrorContent
public static TChild WithErrorContent<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.Controls.ValidationError, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ValidationError
{if (value != null) target.ErrorContent = value ?? default; return target; }
// System.Windows.Controls.ValidationError / Exception
public static TChild WithException<TChild>(this TChild target, System.Exception? value, Disambigator<System.Windows.Controls.ValidationError, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ValidationError
{if (value != null) target.Exception = value ?? default; return target; }
// System.Windows.Controls.ValidationRule / ValidationStep
public static TChild WithValidationStep<TChild>(this TChild target, System.Windows.Controls.ValidationStep? value, Disambigator<System.Windows.Controls.ValidationRule, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ValidationRule
{if (value != null) target.ValidationStep = value ?? default; return target; }
// System.Windows.Controls.ValidationRule / ValidatesOnTargetUpdated
public static TChild WithValidatesOnTargetUpdated<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.ValidationRule, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ValidationRule
{if (value != null) target.ValidatesOnTargetUpdated = value ?? default; return target; }
// System.Windows.Controls.Viewbox / Child
public static TChild WithChild<TChild>(this TChild target, System.Windows.UIElement? value, Disambigator<System.Windows.Controls.Viewbox, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Viewbox
{if (value != null) target.Child = value ?? default; return target; }
// System.Windows.Controls.VirtualizingStackPanel / CanHorizontallyScroll
public static TChild WithCanHorizontallyScroll<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.VirtualizingStackPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.VirtualizingStackPanel
{if (value != null) target.CanHorizontallyScroll = value ?? default; return target; }
// System.Windows.Controls.VirtualizingStackPanel / CanVerticallyScroll
public static TChild WithCanVerticallyScroll<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.VirtualizingStackPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.VirtualizingStackPanel
{if (value != null) target.CanVerticallyScroll = value ?? default; return target; }
// System.Windows.Controls.VirtualizingStackPanel / ScrollOwner
public static TChild WithScrollOwner<TChild>(this TChild target, System.Windows.Controls.ScrollViewer? value, Disambigator<System.Windows.Controls.VirtualizingStackPanel, TChild>? doNotUse = null) where TChild: System.Windows.Controls.VirtualizingStackPanel
{if (value != null) target.ScrollOwner = value ?? default; return target; }
// System.Windows.Controls.WebBrowser / Source
public static System.Windows.Controls.WebBrowser WithSource<TChild>(this System.Windows.Controls.WebBrowser target, System.Uri? value) 
{if (value != null) target.Source = value ?? default; return target; }
// System.Windows.Controls.WebBrowser / ObjectForScripting
public static System.Windows.Controls.WebBrowser WithObjectForScripting<TChild>(this System.Windows.Controls.WebBrowser target, System.Object? value) 
{if (value != null) target.ObjectForScripting = value ?? default; return target; }
// System.Windows.Controls.ControlTemplate / TargetType
public static TChild WithTargetType<TChild>(this TChild target, System.Type? value, Disambigator<System.Windows.Controls.ControlTemplate, TChild>? doNotUse = null) where TChild: System.Windows.Controls.ControlTemplate
{if (value != null) target.TargetType = value ?? default; return target; }
// System.Windows.Controls.InkCanvasSelectionEditingEventArgs / NewRectangle
public static TChild WithNewRectangle<TChild>(this TChild target, System.Windows.Rect? value, Disambigator<System.Windows.Controls.InkCanvasSelectionEditingEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvasSelectionEditingEventArgs
{if (value != null) target.NewRectangle = value ?? default; return target; }
// System.Windows.Controls.InkCanvasGestureEventArgs / Cancel
public static TChild WithCancel<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.InkCanvasGestureEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Controls.InkCanvasGestureEventArgs
{if (value != null) target.Cancel = value ?? default; return target; }
// System.Windows.Controls.Primitives.BulletDecorator / Bullet
public static TChild WithBullet<TChild>(this TChild target, System.Windows.UIElement? value, Disambigator<System.Windows.Controls.Primitives.BulletDecorator, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.BulletDecorator
{if (value != null) target.Bullet = value ?? default; return target; }
// System.Windows.Controls.Primitives.CustomPopupPlacement / Point
public static System.Windows.Controls.Primitives.CustomPopupPlacement WithPoint<TChild>(this System.Windows.Controls.Primitives.CustomPopupPlacement target, System.Windows.Point? value) 
{if (value != null) target.Point = value ?? default; return target; }
// System.Windows.Controls.Primitives.CustomPopupPlacement / PrimaryAxis
public static System.Windows.Controls.Primitives.CustomPopupPlacement WithPrimaryAxis<TChild>(this System.Windows.Controls.Primitives.CustomPopupPlacement target, System.Windows.Controls.Primitives.PopupPrimaryAxis? value) 
{if (value != null) target.PrimaryAxis = value ?? default; return target; }
// System.Windows.Controls.Primitives.DocumentPageView / DocumentPaginator
public static TChild WithDocumentPaginator<TChild>(this TChild target, System.Windows.Documents.DocumentPaginator? value, Disambigator<System.Windows.Controls.Primitives.DocumentPageView, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.DocumentPageView
{if (value != null) target.DocumentPaginator = value ?? default; return target; }
// System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo / Constraints
public static TChild WithConstraints<TChild>(this TChild target, System.Windows.Controls.HierarchicalVirtualizationConstraints? value, Disambigator<System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo
{if (value != null) target.Constraints = value ?? default; return target; }
// System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo / ItemDesiredSizes
public static TChild WithItemDesiredSizes<TChild>(this TChild target, System.Windows.Controls.HierarchicalVirtualizationItemDesiredSizes? value, Disambigator<System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo
{if (value != null) target.ItemDesiredSizes = value ?? default; return target; }
// System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo / MustDisableVirtualization
public static TChild WithMustDisableVirtualization<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo
{if (value != null) target.MustDisableVirtualization = value ?? default; return target; }
// System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo / InBackgroundLayout
public static TChild WithInBackgroundLayout<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.IHierarchicalVirtualizationAndScrollInfo
{if (value != null) target.InBackgroundLayout = value ?? default; return target; }
// System.Windows.Controls.Primitives.GeneratorPosition / Index
public static System.Windows.Controls.Primitives.GeneratorPosition WithIndex<TChild>(this System.Windows.Controls.Primitives.GeneratorPosition target, System.Int32? value) 
{if (value != null) target.Index = value ?? default; return target; }
// System.Windows.Controls.Primitives.GeneratorPosition / Offset
public static System.Windows.Controls.Primitives.GeneratorPosition WithOffset<TChild>(this System.Windows.Controls.Primitives.GeneratorPosition target, System.Int32? value) 

{if (value != null) target.Offset = value ?? default; return target; }
// System.Windows.Controls.Primitives.IScrollInfo / CanVerticallyScroll
public static TChild WithCanVerticallyScroll<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.Primitives.IScrollInfo, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.IScrollInfo
{if (value != null) target.CanVerticallyScroll = value ?? default; return target; }
// System.Windows.Controls.Primitives.IScrollInfo / CanHorizontallyScroll
public static TChild WithCanHorizontallyScroll<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Controls.Primitives.IScrollInfo, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.IScrollInfo
{if (value != null) target.CanHorizontallyScroll = value ?? default; return target; }
// System.Windows.Controls.Primitives.IScrollInfo / ScrollOwner
public static TChild WithScrollOwner<TChild>(this TChild target, System.Windows.Controls.ScrollViewer? value, Disambigator<System.Windows.Controls.Primitives.IScrollInfo, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.IScrollInfo
{if (value != null) target.ScrollOwner = value ?? default; return target; }
// System.Windows.Controls.Primitives.Track / DecreaseRepeatButton
public static TChild WithDecreaseRepeatButton<TChild>(this TChild target, System.Windows.Controls.Primitives.RepeatButton? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track
{if (value != null) target.DecreaseRepeatButton = value ?? default; return target; }
// System.Windows.Controls.Primitives.Track / Thumb
public static TChild WithThumb<TChild>(this TChild target, System.Windows.Controls.Primitives.Thumb? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track
{if (value != null) target.Thumb = value ?? default; return target; }
// System.Windows.Controls.Primitives.Track / IncreaseRepeatButton
public static TChild WithIncreaseRepeatButton<TChild>(this TChild target, System.Windows.Controls.Primitives.RepeatButton? value, Disambigator<System.Windows.Controls.Primitives.Track, TChild>? doNotUse = null) where TChild: System.Windows.Controls.Primitives.Track
{if (value != null) target.IncreaseRepeatButton = value ?? default; return target; }
// System.Windows.Annotations.AnnotationDocumentPaginator / PageSize
public static System.Windows.Annotations.AnnotationDocumentPaginator WithPageSize<TChild>(this System.Windows.Annotations.AnnotationDocumentPaginator target, System.Windows.Size? value) 
{if (value != null) target.PageSize = value ?? default; return target; }
// System.Windows.Annotations.AnnotationResource / Name
public static System.Windows.Annotations.AnnotationResource WithName<TChild>(this System.Windows.Annotations.AnnotationResource target, System.String? value) 
{if (value != null) target.Name = value ?? default; return target; }
// System.Windows.Annotations.Storage.AnnotationStore / AutoFlush
public static TChild WithAutoFlush<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Annotations.Storage.AnnotationStore, TChild>? doNotUse = null) where TChild: System.Windows.Annotations.Storage.AnnotationStore
{if (value != null) target.AutoFlush = value ?? default; return target; }
// System.Windows.Annotations.Storage.XmlStreamStore / AutoFlush
public static System.Windows.Annotations.Storage.XmlStreamStore WithAutoFlush<TChild>(this System.Windows.Annotations.Storage.XmlStreamStore target, System.Boolean? value) 
{if (value != null) target.AutoFlush = value ?? default; return target; }
// System.Windows.PresentationSource / RootVisual
public static TChild WithRootVisual<TChild>(this TChild target, System.Windows.Media.Visual? value, Disambigator<System.Windows.PresentationSource, TChild>? doNotUse = null) where TChild: System.Windows.PresentationSource
{if (value != null) target.RootVisual = value ?? default; return target; }
// System.Windows.Media.CompositionTarget / RootVisual
public static TChild WithRootVisual<TChild>(this TChild target, System.Windows.Media.Visual? value, Disambigator<System.Windows.Media.CompositionTarget, TChild>? doNotUse = null) where TChild: System.Windows.Media.CompositionTarget
{if (value != null) target.RootVisual = value ?? default; return target; }
// System.Windows.Interop.HwndSource / RootVisual
public static TChild WithRootVisual<TChild>(this TChild target, System.Windows.Media.Visual? value, Disambigator<System.Windows.Interop.HwndSource, TChild>? doNotUse = null) where TChild: System.Windows.Interop.HwndSource
{if (value != null) target.RootVisual = value ?? default; return target; }
// System.Windows.Interop.HwndSource / SizeToContent
public static TChild WithSizeToContent<TChild>(this TChild target, System.Windows.SizeToContent? value, Disambigator<System.Windows.Interop.HwndSource, TChild>? doNotUse = null) where TChild: System.Windows.Interop.HwndSource
{if (value != null) target.SizeToContent = value ?? default; return target; }
// System.Windows.Input.RoutedUICommand / Text
public static TChild WithText<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Input.RoutedUICommand, TChild>? doNotUse = null) where TChild: System.Windows.Input.RoutedUICommand
{if (value != null) target.Text = value ?? default; return target; }
// System.Windows.UIElement / RenderSize
public static TChild WithRenderSize<TChild>(this TChild target, System.Windows.Size? value, Disambigator<System.Windows.UIElement, TChild>? doNotUse = null) where TChild: System.Windows.UIElement
{if (value != null) target.RenderSize = value ?? default; return target; }
// System.Windows.RoutedEventArgs / RoutedEvent
public static TChild WithRoutedEvent<TChild>(this TChild target, System.Windows.RoutedEvent? value, Disambigator<System.Windows.RoutedEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.RoutedEventArgs
{if (value != null) target.RoutedEvent = value ?? default; return target; }
// System.Windows.RoutedEventArgs / Handled
public static TChild WithHandled<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.RoutedEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.RoutedEventArgs
{if (value != null) target.Handled = value ?? default; return target; }
// System.Windows.RoutedEventArgs / Source
public static TChild WithSource<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.RoutedEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.RoutedEventArgs
{if (value != null) target.Source = value ?? default; return target; }
// System.Windows.Automation.Peers.AutomationPeer / EventsSource
public static TChild WithEventsSource<TChild>(this TChild target, System.Windows.Automation.Peers.AutomationPeer? value, Disambigator<System.Windows.Automation.Peers.AutomationPeer, TChild>? doNotUse = null) where TChild: System.Windows.Automation.Peers.AutomationPeer
{if (value != null) target.EventsSource = value ?? default; return target; }
// System.Windows.IInputElement / Focusable
public static TChild WithFocusable<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.IInputElement, TChild>? doNotUse = null) where TChild: System.Windows.IInputElement
{if (value != null) target.Focusable = value ?? default; return target; }
// System.Windows.Media.Color / A
public static System.Windows.Media.Color WithA<TChild>(this System.Windows.Media.Color target, System.Byte? value) 
{if (value != null) target.A = value ?? default; return target; }
// System.Windows.Media.Color / R
public static System.Windows.Media.Color WithR<TChild>(this System.Windows.Media.Color target, System.Byte? value) 
{if (value != null) target.R = value ?? default; return target; }
// System.Windows.Media.Color / G
public static System.Windows.Media.Color WithG<TChild>(this System.Windows.Media.Color target, System.Byte? value) 
{if (value != null) target.G = value ?? default; return target; }
// System.Windows.Media.Color / B
public static System.Windows.Media.Color WithB<TChild>(this System.Windows.Media.Color target, System.Byte? value) 
{if (value != null) target.B = value ?? default; return target; }
// System.Windows.Media.Color / ScA
public static System.Windows.Media.Color WithScA<TChild>(this System.Windows.Media.Color target, System.Single? value) 
{if (value != null) target.ScA = value ?? default; return target; }
// System.Windows.Media.Color / ScR
public static System.Windows.Media.Color WithScR<TChild>(this System.Windows.Media.Color target, System.Single? value) 
{if (value != null) target.ScR = value ?? default; return target; }
// System.Windows.Media.Color / ScG
public static System.Windows.Media.Color WithScG<TChild>(this System.Windows.Media.Color target, System.Single? value) 
{if (value != null) target.ScG = value ?? default; return target; }
// System.Windows.Media.Color / ScB
public static System.Windows.Media.Color WithScB<TChild>(this System.Windows.Media.Color target, System.Single? value) 
{if (value != null) target.ScB = value ?? default; return target; }
// System.Windows.Media.FontFamilyMap / Unicode
public static TChild WithUnicode<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Media.FontFamilyMap, TChild>? doNotUse = null) where TChild: System.Windows.Media.FontFamilyMap
{if (value != null) target.Unicode = value ?? default; return target; }
// System.Windows.Media.FontFamilyMap / Target
public static TChild WithTarget<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Media.FontFamilyMap, TChild>? doNotUse = null) where TChild: System.Windows.Media.FontFamilyMap
{if (value != null) target.Target = value ?? default; return target; }
// System.Windows.Media.FontFamilyMap / Scale
public static TChild WithScale<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.FontFamilyMap, TChild>? doNotUse = null) where TChild: System.Windows.Media.FontFamilyMap
{if (value != null) target.Scale = value ?? default; return target; }
// System.Windows.Media.FontFamilyMap / Language
public static TChild WithLanguage<TChild>(this TChild target, System.Windows.Markup.XmlLanguage? value, Disambigator<System.Windows.Media.FontFamilyMap, TChild>? doNotUse = null) where TChild: System.Windows.Media.FontFamilyMap
{if (value != null) target.Language = value ?? default; return target; }
// System.Windows.Media.FamilyTypeface / Style
public static TChild WithStyle<TChild>(this TChild target, System.Windows.FontStyle? value, Disambigator<System.Windows.Media.FamilyTypeface, TChild>? doNotUse = null) where TChild: System.Windows.Media.FamilyTypeface
{if (value != null) target.Style = value ?? default; return target; }
// System.Windows.Media.FamilyTypeface / Weight
public static TChild WithWeight<TChild>(this TChild target, System.Windows.FontWeight? value, Disambigator<System.Windows.Media.FamilyTypeface, TChild>? doNotUse = null) where TChild: System.Windows.Media.FamilyTypeface
{if (value != null) target.Weight = value ?? default; return target; }
// System.Windows.Media.FamilyTypeface / Stretch
public static TChild WithStretch<TChild>(this TChild target, System.Windows.FontStretch? value, Disambigator<System.Windows.Media.FamilyTypeface, TChild>? doNotUse = null) where TChild: System.Windows.Media.FamilyTypeface
{if (value != null) target.Stretch = value ?? default; return target; }
// System.Windows.Media.FamilyTypeface / UnderlinePosition
public static TChild WithUnderlinePosition<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.FamilyTypeface, TChild>? doNotUse = null) where TChild: System.Windows.Media.FamilyTypeface
{if (value != null) target.UnderlinePosition = value ?? default; return target; }
// System.Windows.Media.FamilyTypeface / UnderlineThickness
public static TChild WithUnderlineThickness<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.FamilyTypeface, TChild>? doNotUse = null) where TChild: System.Windows.Media.FamilyTypeface
{if (value != null) target.UnderlineThickness = value ?? default; return target; }
// System.Windows.Media.FamilyTypeface / StrikethroughPosition
public static TChild WithStrikethroughPosition<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.FamilyTypeface, TChild>? doNotUse = null) where TChild: System.Windows.Media.FamilyTypeface
{if (value != null) target.StrikethroughPosition = value ?? default; return target; }
// System.Windows.Media.FamilyTypeface / StrikethroughThickness
public static TChild WithStrikethroughThickness<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.FamilyTypeface, TChild>? doNotUse = null) where TChild: System.Windows.Media.FamilyTypeface
{if (value != null) target.StrikethroughThickness = value ?? default; return target; }
// System.Windows.Media.FamilyTypeface / CapsHeight
public static TChild WithCapsHeight<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.FamilyTypeface, TChild>? doNotUse = null) where TChild: System.Windows.Media.FamilyTypeface
{if (value != null) target.CapsHeight = value ?? default; return target; }
// System.Windows.Media.FamilyTypeface / XHeight
public static TChild WithXHeight<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.FamilyTypeface, TChild>? doNotUse = null) where TChild: System.Windows.Media.FamilyTypeface
{if (value != null) target.XHeight = value ?? default; return target; }
// System.Windows.Media.FamilyTypeface / DeviceFontName
public static TChild WithDeviceFontName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Media.FamilyTypeface, TChild>? doNotUse = null) where TChild: System.Windows.Media.FamilyTypeface
{if (value != null) target.DeviceFontName = value ?? default; return target; }
// System.Windows.Media.FontFamily / Baseline
public static TChild WithBaseline<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.FontFamily, TChild>? doNotUse = null) where TChild: System.Windows.Media.FontFamily
{if (value != null) target.Baseline = value ?? default; return target; }
// System.Windows.Media.FontFamily / LineSpacing
public static TChild WithLineSpacing<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.FontFamily, TChild>? doNotUse = null) where TChild: System.Windows.Media.FontFamily
{if (value != null) target.LineSpacing = value ?? default; return target; }
// System.Windows.Media.TextFormatting.TextRunProperties / PixelsPerDip
public static TChild WithPixelsPerDip<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.TextFormatting.TextRunProperties, TChild>? doNotUse = null) where TChild: System.Windows.Media.TextFormatting.TextRunProperties
{if (value != null) target.PixelsPerDip = value ?? default; return target; }
// System.Windows.Media.GlyphTypeface / FontUri
public static TChild WithFontUri<TChild>(this TChild target, System.Uri? value, Disambigator<System.Windows.Media.GlyphTypeface, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphTypeface
{if (value != null) target.FontUri = value ?? default; return target; }
// System.Windows.Media.GlyphTypeface / StyleSimulations
public static TChild WithStyleSimulations<TChild>(this TChild target, System.Windows.Media.StyleSimulations? value, Disambigator<System.Windows.Media.GlyphTypeface, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphTypeface
{if (value != null) target.StyleSimulations = value ?? default; return target; }
// System.Windows.Media.Media3D.Point3D / X
public static System.Windows.Media.Media3D.Point3D WithX<TChild>(this System.Windows.Media.Media3D.Point3D target, System.Double? value) 
{if (value != null) target.X = value ?? default; return target; }
// System.Windows.Media.Media3D.Point3D / Y
public static System.Windows.Media.Media3D.Point3D WithY<TChild>(this System.Windows.Media.Media3D.Point3D target, System.Double? value) 
{if (value != null) target.Y = value ?? default; return target; }
// System.Windows.Media.Media3D.Point3D / Z
public static System.Windows.Media.Media3D.Point3D WithZ<TChild>(this System.Windows.Media.Media3D.Point3D target, System.Double? value) 
{if (value != null) target.Z = value ?? default; return target; }
// System.Windows.Media.Media3D.Rect3D / Location
public static System.Windows.Media.Media3D.Rect3D WithLocation<TChild>(this System.Windows.Media.Media3D.Rect3D target, System.Windows.Media.Media3D.Point3D? value) 
{if (value != null) target.Location = value ?? default; return target; }
// System.Windows.Media.Media3D.Rect3D / Size
public static System.Windows.Media.Media3D.Rect3D WithSize<TChild>(this System.Windows.Media.Media3D.Rect3D target, System.Windows.Media.Media3D.Size3D? value) 
{if (value != null) target.Size = value ?? default; return target; }
// System.Windows.Media.Media3D.Rect3D / SizeX
public static System.Windows.Media.Media3D.Rect3D WithSizeX<TChild>(this System.Windows.Media.Media3D.Rect3D target, System.Double? value) 
{if (value != null) target.SizeX = value ?? default; return target; }
// System.Windows.Media.Media3D.Rect3D / SizeY
public static System.Windows.Media.Media3D.Rect3D WithSizeY<TChild>(this System.Windows.Media.Media3D.Rect3D target, System.Double? value) 
{if (value != null) target.SizeY = value ?? default; return target; }
// System.Windows.Media.Media3D.Rect3D / SizeZ
public static System.Windows.Media.Media3D.Rect3D WithSizeZ<TChild>(this System.Windows.Media.Media3D.Rect3D target, System.Double? value) 
{if (value != null) target.SizeZ = value ?? default; return target; }
// System.Windows.Media.Media3D.Rect3D / X
public static System.Windows.Media.Media3D.Rect3D WithX<TChild>(this System.Windows.Media.Media3D.Rect3D target, System.Double? value) 
{if (value != null) target.X = value ?? default; return target; }
// System.Windows.Media.Media3D.Rect3D / Y
public static System.Windows.Media.Media3D.Rect3D WithY<TChild>(this System.Windows.Media.Media3D.Rect3D target, System.Double? value) 
{if (value != null) target.Y = value ?? default; return target; }
// System.Windows.Media.Media3D.Rect3D / Z
public static System.Windows.Media.Media3D.Rect3D WithZ<TChild>(this System.Windows.Media.Media3D.Rect3D target, System.Double? value) 
{if (value != null) target.Z = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / M11
public static System.Windows.Media.Media3D.Matrix3D WithM11<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.M11 = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / M12
public static System.Windows.Media.Media3D.Matrix3D WithM12<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.M12 = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / M13
public static System.Windows.Media.Media3D.Matrix3D WithM13<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.M13 = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / M14
public static System.Windows.Media.Media3D.Matrix3D WithM14<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.M14 = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / M21
public static System.Windows.Media.Media3D.Matrix3D WithM21<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.M21 = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / M22
public static System.Windows.Media.Media3D.Matrix3D WithM22<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.M22 = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / M23
public static System.Windows.Media.Media3D.Matrix3D WithM23<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.M23 = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / M24
public static System.Windows.Media.Media3D.Matrix3D WithM24<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.M24 = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / M31
public static System.Windows.Media.Media3D.Matrix3D WithM31<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.M31 = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / M32
public static System.Windows.Media.Media3D.Matrix3D WithM32<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.M32 = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / M33
public static System.Windows.Media.Media3D.Matrix3D WithM33<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.M33 = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / M34
public static System.Windows.Media.Media3D.Matrix3D WithM34<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.M34 = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / OffsetX
public static System.Windows.Media.Media3D.Matrix3D WithOffsetX<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.OffsetX = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / OffsetY
public static System.Windows.Media.Media3D.Matrix3D WithOffsetY<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.OffsetY = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / OffsetZ
public static System.Windows.Media.Media3D.Matrix3D WithOffsetZ<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.OffsetZ = value ?? default; return target; }
// System.Windows.Media.Media3D.Matrix3D / M44
public static System.Windows.Media.Media3D.Matrix3D WithM44<TChild>(this System.Windows.Media.Media3D.Matrix3D target, System.Double? value) 
{if (value != null) target.M44 = value ?? default; return target; }
// System.Windows.Media.Media3D.Viewport3DVisual / Clip
public static System.Windows.Media.Media3D.Viewport3DVisual WithClip<TChild>(this System.Windows.Media.Media3D.Viewport3DVisual target, System.Windows.Media.Geometry? value) 
{if (value != null) target.Clip = value ?? default; return target; }
// System.Windows.Media.Media3D.Viewport3DVisual / Opacity
public static System.Windows.Media.Media3D.Viewport3DVisual WithOpacity<TChild>(this System.Windows.Media.Media3D.Viewport3DVisual target, System.Double? value) 
{if (value != null) target.Opacity = value ?? default; return target; }
// System.Windows.Media.Media3D.Viewport3DVisual / OpacityMask
public static System.Windows.Media.Media3D.Viewport3DVisual WithOpacityMask<TChild>(this System.Windows.Media.Media3D.Viewport3DVisual target, System.Windows.Media.Brush? value) 
{if (value != null) target.OpacityMask = value ?? default; return target; }
// System.Windows.Media.Media3D.Viewport3DVisual / Transform
public static System.Windows.Media.Media3D.Viewport3DVisual WithTransform<TChild>(this System.Windows.Media.Media3D.Viewport3DVisual target, System.Windows.Media.Transform? value) 
{if (value != null) target.Transform = value ?? default; return target; }
// System.Windows.Media.Media3D.Viewport3DVisual / Offset
public static System.Windows.Media.Media3D.Viewport3DVisual WithOffset<TChild>(this System.Windows.Media.Media3D.Viewport3DVisual target, System.Windows.Vector? value) 
{if (value != null) target.Offset = value ?? default; return target; }
// System.Windows.Media.Media3D.Vector3D / X
public static System.Windows.Media.Media3D.Vector3D WithX<TChild>(this System.Windows.Media.Media3D.Vector3D target, System.Double? value) 
{if (value != null) target.X = value ?? default; return target; }
// System.Windows.Media.Media3D.Vector3D / Y
public static System.Windows.Media.Media3D.Vector3D WithY<TChild>(this System.Windows.Media.Media3D.Vector3D target, System.Double? value) 
{if (value != null) target.Y = value ?? default; return target; }
// System.Windows.Media.Media3D.Vector3D / Z
public static System.Windows.Media.Media3D.Vector3D WithZ<TChild>(this System.Windows.Media.Media3D.Vector3D target, System.Double? value) 
{if (value != null) target.Z = value ?? default; return target; }
// System.Windows.Media.Media3D.Point4D / X
public static System.Windows.Media.Media3D.Point4D WithX<TChild>(this System.Windows.Media.Media3D.Point4D target, System.Double? value) 
{if (value != null) target.X = value ?? default; return target; }
// System.Windows.Media.Media3D.Point4D / Y
public static System.Windows.Media.Media3D.Point4D WithY<TChild>(this System.Windows.Media.Media3D.Point4D target, System.Double? value) 
{if (value != null) target.Y = value ?? default; return target; }
// System.Windows.Media.Media3D.Point4D / Z
public static System.Windows.Media.Media3D.Point4D WithZ<TChild>(this System.Windows.Media.Media3D.Point4D target, System.Double? value) 
{if (value != null) target.Z = value ?? default; return target; }
// System.Windows.Media.Media3D.Point4D / W
public static System.Windows.Media.Media3D.Point4D WithW<TChild>(this System.Windows.Media.Media3D.Point4D target, System.Double? value) 
{if (value != null) target.W = value ?? default; return target; }
// System.Windows.UIPropertyMetadata / IsAnimationProhibited
public static TChild WithIsAnimationProhibited<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.UIPropertyMetadata, TChild>? doNotUse = null) where TChild: System.Windows.UIPropertyMetadata
{if (value != null) target.IsAnimationProhibited = value ?? default; return target; }
// System.Windows.Media.TextFormatting.TextLine / PixelsPerDip
public static TChild WithPixelsPerDip<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.TextFormatting.TextLine, TChild>? doNotUse = null) where TChild: System.Windows.Media.TextFormatting.TextLine
{if (value != null) target.PixelsPerDip = value ?? default; return target; }
// System.Windows.Media.TextFormatting.TextSource / PixelsPerDip
public static TChild WithPixelsPerDip<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.TextFormatting.TextSource, TChild>? doNotUse = null) where TChild: System.Windows.Media.TextFormatting.TextSource
{if (value != null) target.PixelsPerDip = value ?? default; return target; }
// System.Windows.Media.GlyphRun / PixelsPerDip
public static TChild WithPixelsPerDip<TChild>(this TChild target, System.Single? value, Disambigator<System.Windows.Media.GlyphRun, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphRun
{if (value != null) target.PixelsPerDip = value ?? default; return target; }
// System.Windows.Media.GlyphRun / BaselineOrigin
public static TChild WithBaselineOrigin<TChild>(this TChild target, System.Windows.Point? value, Disambigator<System.Windows.Media.GlyphRun, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphRun
{if (value != null) target.BaselineOrigin = value ?? default; return target; }
// System.Windows.Media.GlyphRun / FontRenderingEmSize
public static TChild WithFontRenderingEmSize<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.GlyphRun, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphRun
{if (value != null) target.FontRenderingEmSize = value ?? default; return target; }
// System.Windows.Media.GlyphRun / GlyphTypeface
public static TChild WithGlyphTypeface<TChild>(this TChild target, System.Windows.Media.GlyphTypeface? value, Disambigator<System.Windows.Media.GlyphRun, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphRun
{if (value != null) target.GlyphTypeface = value ?? default; return target; }
// System.Windows.Media.GlyphRun / BidiLevel
public static TChild WithBidiLevel<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.Media.GlyphRun, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphRun
{if (value != null) target.BidiLevel = value ?? default; return target; }
// System.Windows.Media.GlyphRun / IsSideways
public static TChild WithIsSideways<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.GlyphRun, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphRun
{if (value != null) target.IsSideways = value ?? default; return target; }
// System.Windows.Media.GlyphRun / CaretStops
public static TChild WithCaretStops<TChild>(this TChild target, System.Collections.Generic.IList<System.Boolean>? value, Disambigator<System.Windows.Media.GlyphRun, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphRun
{if (value != null) target.CaretStops = value ?? default; return target; }
// System.Windows.Media.GlyphRun / ClusterMap
public static TChild WithClusterMap<TChild>(this TChild target, System.Collections.Generic.IList<System.UInt16>? value, Disambigator<System.Windows.Media.GlyphRun, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphRun
{if (value != null) target.ClusterMap = value ?? default; return target; }
// System.Windows.Media.GlyphRun / Characters
public static TChild WithCharacters<TChild>(this TChild target, System.Collections.Generic.IList<System.Char>? value, Disambigator<System.Windows.Media.GlyphRun, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphRun
{if (value != null) target.Characters = value ?? default; return target; }
// System.Windows.Media.GlyphRun / GlyphIndices
public static TChild WithGlyphIndices<TChild>(this TChild target, System.Collections.Generic.IList<System.UInt16>? value, Disambigator<System.Windows.Media.GlyphRun, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphRun
{if (value != null) target.GlyphIndices = value ?? default; return target; }
// System.Windows.Media.GlyphRun / AdvanceWidths
public static TChild WithAdvanceWidths<TChild>(this TChild target, System.Collections.Generic.IList<System.Double>? value, Disambigator<System.Windows.Media.GlyphRun, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphRun
{if (value != null) target.AdvanceWidths = value ?? default; return target; }
// System.Windows.Media.GlyphRun / GlyphOffsets
public static TChild WithGlyphOffsets<TChild>(this TChild target, System.Collections.Generic.IList<System.Windows.Point>? value, Disambigator<System.Windows.Media.GlyphRun, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphRun
{if (value != null) target.GlyphOffsets = value ?? default; return target; }
// System.Windows.Media.GlyphRun / Language
public static TChild WithLanguage<TChild>(this TChild target, System.Windows.Markup.XmlLanguage? value, Disambigator<System.Windows.Media.GlyphRun, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphRun
{if (value != null) target.Language = value ?? default; return target; }
// System.Windows.Media.GlyphRun / DeviceFontName
public static TChild WithDeviceFontName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Media.GlyphRun, TChild>? doNotUse = null) where TChild: System.Windows.Media.GlyphRun
{if (value != null) target.DeviceFontName = value ?? default; return target; }
// System.Windows.Media.CharacterMetrics / Metrics
public static TChild WithMetrics<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Media.CharacterMetrics, TChild>? doNotUse = null) where TChild: System.Windows.Media.CharacterMetrics
{if (value != null) target.Metrics = value ?? default; return target; }
// System.Windows.Input.StylusPoint / X
public static System.Windows.Input.StylusPoint WithX<TChild>(this System.Windows.Input.StylusPoint target, System.Double? value) 
{if (value != null) target.X = value ?? default; return target; }
// System.Windows.Input.StylusPoint / Y
public static System.Windows.Input.StylusPoint WithY<TChild>(this System.Windows.Input.StylusPoint target, System.Double? value) 
{if (value != null) target.Y = value ?? default; return target; }
// System.Windows.Input.StylusPoint / PressureFactor
public static System.Windows.Input.StylusPoint WithPressureFactor<TChild>(this System.Windows.Input.StylusPoint target, System.Single? value) 
{if (value != null) target.PressureFactor = value ?? default; return target; }
// System.Windows.Ink.Stroke / DrawingAttributes
public static TChild WithDrawingAttributes<TChild>(this TChild target, System.Windows.Ink.DrawingAttributes? value, Disambigator<System.Windows.Ink.Stroke, TChild>? doNotUse = null) where TChild: System.Windows.Ink.Stroke
{if (value != null) target.DrawingAttributes = value ?? default; return target; }
// System.Windows.Ink.Stroke / StylusPoints
public static TChild WithStylusPoints<TChild>(this TChild target, System.Windows.Input.StylusPointCollection? value, Disambigator<System.Windows.Ink.Stroke, TChild>? doNotUse = null) where TChild: System.Windows.Ink.Stroke
{if (value != null) target.StylusPoints = value ?? default; return target; }
// System.Windows.Ink.DrawingAttributes / Color
public static TChild WithColor<TChild>(this TChild target, System.Windows.Media.Color? value, Disambigator<System.Windows.Ink.DrawingAttributes, TChild>? doNotUse = null) where TChild: System.Windows.Ink.DrawingAttributes
{if (value != null) target.Color = value ?? default; return target; }
// System.Windows.Ink.DrawingAttributes / StylusTip
public static TChild WithStylusTip<TChild>(this TChild target, System.Windows.Ink.StylusTip? value, Disambigator<System.Windows.Ink.DrawingAttributes, TChild>? doNotUse = null) where TChild: System.Windows.Ink.DrawingAttributes
{if (value != null) target.StylusTip = value ?? default; return target; }
// System.Windows.Ink.DrawingAttributes / StylusTipTransform
public static TChild WithStylusTipTransform<TChild>(this TChild target, System.Windows.Media.Matrix? value, Disambigator<System.Windows.Ink.DrawingAttributes, TChild>? doNotUse = null) where TChild: System.Windows.Ink.DrawingAttributes
{if (value != null) target.StylusTipTransform = value ?? default; return target; }
// System.Windows.Ink.DrawingAttributes / Height
public static TChild WithHeight<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Ink.DrawingAttributes, TChild>? doNotUse = null) where TChild: System.Windows.Ink.DrawingAttributes
{if (value != null) target.Height = value ?? default; return target; }
// System.Windows.Ink.DrawingAttributes / Width
public static TChild WithWidth<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Ink.DrawingAttributes, TChild>? doNotUse = null) where TChild: System.Windows.Ink.DrawingAttributes
{if (value != null) target.Width = value ?? default; return target; }
// System.Windows.Ink.DrawingAttributes / FitToCurve
public static TChild WithFitToCurve<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Ink.DrawingAttributes, TChild>? doNotUse = null) where TChild: System.Windows.Ink.DrawingAttributes
{if (value != null) target.FitToCurve = value ?? default; return target; }
// System.Windows.Ink.DrawingAttributes / IgnorePressure
public static TChild WithIgnorePressure<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Ink.DrawingAttributes, TChild>? doNotUse = null) where TChild: System.Windows.Ink.DrawingAttributes
{if (value != null) target.IgnorePressure = value ?? default; return target; }
// System.Windows.Ink.DrawingAttributes / IsHighlighter
public static TChild WithIsHighlighter<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Ink.DrawingAttributes, TChild>? doNotUse = null) where TChild: System.Windows.Ink.DrawingAttributes
{if (value != null) target.IsHighlighter = value ?? default; return target; }
// System.Windows.Media.Media3D.Quaternion / X
public static System.Windows.Media.Media3D.Quaternion WithX<TChild>(this System.Windows.Media.Media3D.Quaternion target, System.Double? value) 
{if (value != null) target.X = value ?? default; return target; }
// System.Windows.Media.Media3D.Quaternion / Y
public static System.Windows.Media.Media3D.Quaternion WithY<TChild>(this System.Windows.Media.Media3D.Quaternion target, System.Double? value) 
{if (value != null) target.Y = value ?? default; return target; }
// System.Windows.Media.Media3D.Quaternion / Z
public static System.Windows.Media.Media3D.Quaternion WithZ<TChild>(this System.Windows.Media.Media3D.Quaternion target, System.Double? value) 
{if (value != null) target.Z = value ?? default; return target; }
// System.Windows.Media.Media3D.Quaternion / W
public static System.Windows.Media.Media3D.Quaternion WithW<TChild>(this System.Windows.Media.Media3D.Quaternion target, System.Double? value) 
{if (value != null) target.W = value ?? default; return target; }
// System.IO.Packaging.PackWebRequest / CachePolicy
public static System.IO.Packaging.PackWebRequest WithCachePolicy<TChild>(this System.IO.Packaging.PackWebRequest target, System.Net.Cache.RequestCachePolicy? value) 
{if (value != null) target.CachePolicy = value ?? default; return target; }
// System.IO.Packaging.PackWebRequest / ConnectionGroupName
public static System.IO.Packaging.PackWebRequest WithConnectionGroupName<TChild>(this System.IO.Packaging.PackWebRequest target, System.String? value) 
{if (value != null) target.ConnectionGroupName = value ?? default; return target; }
// System.IO.Packaging.PackWebRequest / ContentLength
public static System.IO.Packaging.PackWebRequest WithContentLength<TChild>(this System.IO.Packaging.PackWebRequest target, System.Int64? value) 
{if (value != null) target.ContentLength = value ?? default; return target; }
// System.IO.Packaging.PackWebRequest / ContentType
public static System.IO.Packaging.PackWebRequest WithContentType<TChild>(this System.IO.Packaging.PackWebRequest target, System.String? value) 
{if (value != null) target.ContentType = value ?? default; return target; }
// System.IO.Packaging.PackWebRequest / Credentials
public static System.IO.Packaging.PackWebRequest WithCredentials<TChild>(this System.IO.Packaging.PackWebRequest target, System.Net.ICredentials? value) 
{if (value != null) target.Credentials = value ?? default; return target; }
// System.IO.Packaging.PackWebRequest / Headers
public static System.IO.Packaging.PackWebRequest WithHeaders<TChild>(this System.IO.Packaging.PackWebRequest target, System.Net.WebHeaderCollection? value) 
{if (value != null) target.Headers = value ?? default; return target; }
// System.IO.Packaging.PackWebRequest / Method
public static System.IO.Packaging.PackWebRequest WithMethod<TChild>(this System.IO.Packaging.PackWebRequest target, System.String? value) 
{if (value != null) target.Method = value ?? default; return target; }
// System.IO.Packaging.PackWebRequest / PreAuthenticate
public static System.IO.Packaging.PackWebRequest WithPreAuthenticate<TChild>(this System.IO.Packaging.PackWebRequest target, System.Boolean? value) 
{if (value != null) target.PreAuthenticate = value ?? default; return target; }
// System.IO.Packaging.PackWebRequest / Proxy
public static System.IO.Packaging.PackWebRequest WithProxy<TChild>(this System.IO.Packaging.PackWebRequest target, System.Net.IWebProxy? value) 
{if (value != null) target.Proxy = value ?? default; return target; }
// System.IO.Packaging.PackWebRequest / Timeout
public static System.IO.Packaging.PackWebRequest WithTimeout<TChild>(this System.IO.Packaging.PackWebRequest target, System.Int32? value) 
{if (value != null) target.Timeout = value ?? default; return target; }
// System.IO.Packaging.PackWebRequest / UseDefaultCredentials
public static System.IO.Packaging.PackWebRequest WithUseDefaultCredentials<TChild>(this System.IO.Packaging.PackWebRequest target, System.Boolean? value) 
{if (value != null) target.UseDefaultCredentials = value ?? default; return target; }
// System.Windows.Input.QueryCursorEventArgs / Cursor
public static TChild WithCursor<TChild>(this TChild target, System.Windows.Input.Cursor? value, Disambigator<System.Windows.Input.QueryCursorEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Input.QueryCursorEventArgs
{if (value != null) target.Cursor = value ?? default; return target; }
// System.Windows.QueryContinueDragEventArgs / Action
public static System.Windows.QueryContinueDragEventArgs WithAction<TChild>(this System.Windows.QueryContinueDragEventArgs target, System.Windows.DragAction? value) 
{if (value != null) target.Action = value ?? default; return target; }
// System.Windows.GiveFeedbackEventArgs / UseDefaultCursors
public static System.Windows.GiveFeedbackEventArgs WithUseDefaultCursors<TChild>(this System.Windows.GiveFeedbackEventArgs target, System.Boolean? value) 
{if (value != null) target.UseDefaultCursors = value ?? default; return target; }
// System.Windows.DragEventArgs / Effects
public static System.Windows.DragEventArgs WithEffects<TChild>(this System.Windows.DragEventArgs target, System.Windows.DragDropEffects? value) 
{if (value != null) target.Effects = value ?? default; return target; }
// System.Windows.Input.KeyboardDevice / DefaultRestoreFocusMode
public static TChild WithDefaultRestoreFocusMode<TChild>(this TChild target, System.Windows.Input.RestoreFocusMode? value, Disambigator<System.Windows.Input.KeyboardDevice, TChild>? doNotUse = null) where TChild: System.Windows.Input.KeyboardDevice
{if (value != null) target.DefaultRestoreFocusMode = value ?? default; return target; }
// System.Windows.Input.MouseDevice / OverrideCursor
public static TChild WithOverrideCursor<TChild>(this TChild target, System.Windows.Input.Cursor? value, Disambigator<System.Windows.Input.MouseDevice, TChild>? doNotUse = null) where TChild: System.Windows.Input.MouseDevice
{if (value != null) target.OverrideCursor = value ?? default; return target; }
// System.Windows.Input.InputMethod / ImeState
public static TChild WithImeState<TChild>(this TChild target, System.Windows.Input.InputMethodState? value, Disambigator<System.Windows.Input.InputMethod, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputMethod
{if (value != null) target.ImeState = value ?? default; return target; }
// System.Windows.Input.InputMethod / MicrophoneState
public static TChild WithMicrophoneState<TChild>(this TChild target, System.Windows.Input.InputMethodState? value, Disambigator<System.Windows.Input.InputMethod, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputMethod
{if (value != null) target.MicrophoneState = value ?? default; return target; }
// System.Windows.Input.InputMethod / HandwritingState
public static TChild WithHandwritingState<TChild>(this TChild target, System.Windows.Input.InputMethodState? value, Disambigator<System.Windows.Input.InputMethod, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputMethod
{if (value != null) target.HandwritingState = value ?? default; return target; }
// System.Windows.Input.InputMethod / SpeechMode
public static TChild WithSpeechMode<TChild>(this TChild target, System.Windows.Input.SpeechMode? value, Disambigator<System.Windows.Input.InputMethod, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputMethod
{if (value != null) target.SpeechMode = value ?? default; return target; }
// System.Windows.Input.InputMethod / ImeConversionMode
public static TChild WithImeConversionMode<TChild>(this TChild target, System.Windows.Input.ImeConversionModeValues? value, Disambigator<System.Windows.Input.InputMethod, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputMethod
{if (value != null) target.ImeConversionMode = value ?? default; return target; }
// System.Windows.Input.InputMethod / ImeSentenceMode
public static TChild WithImeSentenceMode<TChild>(this TChild target, System.Windows.Input.ImeSentenceModeValues? value, Disambigator<System.Windows.Input.InputMethod, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputMethod
{if (value != null) target.ImeSentenceMode = value ?? default; return target; }
// System.Windows.LocalizabilityAttribute / Readability
public static System.Windows.LocalizabilityAttribute WithReadability<TChild>(this System.Windows.LocalizabilityAttribute target, System.Windows.Readability? value) 
{if (value != null) target.Readability = value ?? default; return target; }
// System.Windows.LocalizabilityAttribute / Modifiability
public static System.Windows.LocalizabilityAttribute WithModifiability<TChild>(this System.Windows.LocalizabilityAttribute target, System.Windows.Modifiability? value) 
{if (value != null) target.Modifiability = value ?? default; return target; }
// System.Windows.Input.CanExecuteRoutedEventArgs / CanExecute
public static System.Windows.Input.CanExecuteRoutedEventArgs WithCanExecute<TChild>(this System.Windows.Input.CanExecuteRoutedEventArgs target, System.Boolean? value) 
{if (value != null) target.CanExecute = value ?? default; return target; }
// System.Windows.Input.CanExecuteRoutedEventArgs / ContinueRouting
public static System.Windows.Input.CanExecuteRoutedEventArgs WithContinueRouting<TChild>(this System.Windows.Input.CanExecuteRoutedEventArgs target, System.Boolean? value) 
{if (value != null) target.ContinueRouting = value ?? default; return target; }
// System.Windows.Input.ManipulationStartingEventArgs / Mode
public static System.Windows.Input.ManipulationStartingEventArgs WithMode<TChild>(this System.Windows.Input.ManipulationStartingEventArgs target, System.Windows.Input.ManipulationModes? value) 
{if (value != null) target.Mode = value ?? default; return target; }
// System.Windows.Input.ManipulationStartingEventArgs / ManipulationContainer
public static System.Windows.Input.ManipulationStartingEventArgs WithManipulationContainer<TChild>(this System.Windows.Input.ManipulationStartingEventArgs target, System.Windows.IInputElement? value) 
{if (value != null) target.ManipulationContainer = value ?? default; return target; }
// System.Windows.Input.ManipulationStartingEventArgs / Pivot
public static System.Windows.Input.ManipulationStartingEventArgs WithPivot<TChild>(this System.Windows.Input.ManipulationStartingEventArgs target, System.Windows.Input.ManipulationPivot? value) 
{if (value != null) target.Pivot = value ?? default; return target; }
// System.Windows.Input.ManipulationStartingEventArgs / IsSingleTouchEnabled
public static System.Windows.Input.ManipulationStartingEventArgs WithIsSingleTouchEnabled<TChild>(this System.Windows.Input.ManipulationStartingEventArgs target, System.Boolean? value) 
{if (value != null) target.IsSingleTouchEnabled = value ?? default; return target; }
// System.Windows.Input.ManipulationInertiaStartingEventArgs / ManipulationOrigin
public static System.Windows.Input.ManipulationInertiaStartingEventArgs WithManipulationOrigin<TChild>(this System.Windows.Input.ManipulationInertiaStartingEventArgs target, System.Windows.Point? value) 
{if (value != null) target.ManipulationOrigin = value ?? default; return target; }
// System.Windows.Input.ManipulationInertiaStartingEventArgs / TranslationBehavior
public static System.Windows.Input.ManipulationInertiaStartingEventArgs WithTranslationBehavior<TChild>(this System.Windows.Input.ManipulationInertiaStartingEventArgs target, System.Windows.Input.InertiaTranslationBehavior? value) 
{if (value != null) target.TranslationBehavior = value ?? default; return target; }
// System.Windows.Input.ManipulationInertiaStartingEventArgs / RotationBehavior
public static System.Windows.Input.ManipulationInertiaStartingEventArgs WithRotationBehavior<TChild>(this System.Windows.Input.ManipulationInertiaStartingEventArgs target, System.Windows.Input.InertiaRotationBehavior? value) 
{if (value != null) target.RotationBehavior = value ?? default; return target; }
// System.Windows.Input.ManipulationInertiaStartingEventArgs / ExpansionBehavior
public static System.Windows.Input.ManipulationInertiaStartingEventArgs WithExpansionBehavior<TChild>(this System.Windows.Input.ManipulationInertiaStartingEventArgs target, System.Windows.Input.InertiaExpansionBehavior? value) 
{if (value != null) target.ExpansionBehavior = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapFrame / BaseUri
public static TChild WithBaseUri<TChild>(this TChild target, System.Uri? value, Disambigator<System.Windows.Media.Imaging.BitmapFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapFrame
{if (value != null) target.BaseUri = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapEncoder / ColorContexts
public static TChild WithColorContexts<TChild>(this TChild target, System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.ColorContext>? value, Disambigator<System.Windows.Media.Imaging.BitmapEncoder, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapEncoder
{if (value != null) target.ColorContexts = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapEncoder / Thumbnail
public static TChild WithThumbnail<TChild>(this TChild target, System.Windows.Media.Imaging.BitmapSource? value, Disambigator<System.Windows.Media.Imaging.BitmapEncoder, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapEncoder
{if (value != null) target.Thumbnail = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapEncoder / Metadata
public static TChild WithMetadata<TChild>(this TChild target, System.Windows.Media.Imaging.BitmapMetadata? value, Disambigator<System.Windows.Media.Imaging.BitmapEncoder, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapEncoder
{if (value != null) target.Metadata = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapEncoder / Preview
public static TChild WithPreview<TChild>(this TChild target, System.Windows.Media.Imaging.BitmapSource? value, Disambigator<System.Windows.Media.Imaging.BitmapEncoder, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapEncoder
{if (value != null) target.Preview = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapEncoder / Palette
public static TChild WithPalette<TChild>(this TChild target, System.Windows.Media.Imaging.BitmapPalette? value, Disambigator<System.Windows.Media.Imaging.BitmapEncoder, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapEncoder
{if (value != null) target.Palette = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapEncoder / Frames
public static TChild WithFrames<TChild>(this TChild target, System.Collections.Generic.IList<System.Windows.Media.Imaging.BitmapFrame>? value, Disambigator<System.Windows.Media.Imaging.BitmapEncoder, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapEncoder
{if (value != null) target.Frames = value ?? default; return target; }
// System.Windows.DataObjectPastingEventArgs / DataObject
public static System.Windows.DataObjectPastingEventArgs WithDataObject<TChild>(this System.Windows.DataObjectPastingEventArgs target, System.Windows.IDataObject? value) 
{if (value != null) target.DataObject = value ?? default; return target; }
// System.Windows.DataObjectPastingEventArgs / FormatToApply
public static System.Windows.DataObjectPastingEventArgs WithFormatToApply<TChild>(this System.Windows.DataObjectPastingEventArgs target, System.String? value) 
{if (value != null) target.FormatToApply = value ?? default; return target; }
// System.Windows.Media.Animation.KeySpline / ControlPoint1
public static TChild WithControlPoint1<TChild>(this TChild target, System.Windows.Point? value, Disambigator<System.Windows.Media.Animation.KeySpline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.KeySpline
{if (value != null) target.ControlPoint1 = value ?? default; return target; }
// System.Windows.Media.Animation.KeySpline / ControlPoint2
public static TChild WithControlPoint2<TChild>(this TChild target, System.Windows.Point? value, Disambigator<System.Windows.Media.Animation.KeySpline, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.KeySpline
{if (value != null) target.ControlPoint2 = value ?? default; return target; }
// System.Windows.Input.AccessKeyPressedEventArgs / Scope
public static TChild WithScope<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.Input.AccessKeyPressedEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Input.AccessKeyPressedEventArgs
{if (value != null) target.Scope = value ?? default; return target; }
// System.Windows.Input.AccessKeyPressedEventArgs / Target
public static TChild WithTarget<TChild>(this TChild target, System.Windows.UIElement? value, Disambigator<System.Windows.Input.AccessKeyPressedEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Input.AccessKeyPressedEventArgs
{if (value != null) target.Target = value ?? default; return target; }
// System.Windows.Input.IInputLanguageSource / CurrentInputLanguage
public static TChild WithCurrentInputLanguage<TChild>(this TChild target, System.Globalization.CultureInfo? value, Disambigator<System.Windows.Input.IInputLanguageSource, TChild>? doNotUse = null) where TChild: System.Windows.Input.IInputLanguageSource
{if (value != null) target.CurrentInputLanguage = value ?? default; return target; }
// System.Windows.Input.InertiaExpansionBehavior / InitialVelocity
public static TChild WithInitialVelocity<TChild>(this TChild target, System.Windows.Vector? value, Disambigator<System.Windows.Input.InertiaExpansionBehavior, TChild>? doNotUse = null) where TChild: System.Windows.Input.InertiaExpansionBehavior
{if (value != null) target.InitialVelocity = value ?? default; return target; }
// System.Windows.Input.InertiaExpansionBehavior / DesiredDeceleration
public static TChild WithDesiredDeceleration<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Input.InertiaExpansionBehavior, TChild>? doNotUse = null) where TChild: System.Windows.Input.InertiaExpansionBehavior
{if (value != null) target.DesiredDeceleration = value ?? default; return target; }
// System.Windows.Input.InertiaExpansionBehavior / DesiredExpansion
public static TChild WithDesiredExpansion<TChild>(this TChild target, System.Windows.Vector? value, Disambigator<System.Windows.Input.InertiaExpansionBehavior, TChild>? doNotUse = null) where TChild: System.Windows.Input.InertiaExpansionBehavior
{if (value != null) target.DesiredExpansion = value ?? default; return target; }
// System.Windows.Input.InertiaExpansionBehavior / InitialRadius
public static TChild WithInitialRadius<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Input.InertiaExpansionBehavior, TChild>? doNotUse = null) where TChild: System.Windows.Input.InertiaExpansionBehavior
{if (value != null) target.InitialRadius = value ?? default; return target; }
// System.Windows.Input.InertiaRotationBehavior / InitialVelocity
public static TChild WithInitialVelocity<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Input.InertiaRotationBehavior, TChild>? doNotUse = null) where TChild: System.Windows.Input.InertiaRotationBehavior
{if (value != null) target.InitialVelocity = value ?? default; return target; }
// System.Windows.Input.InertiaRotationBehavior / DesiredDeceleration
public static TChild WithDesiredDeceleration<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Input.InertiaRotationBehavior, TChild>? doNotUse = null) where TChild: System.Windows.Input.InertiaRotationBehavior
{if (value != null) target.DesiredDeceleration = value ?? default; return target; }
// System.Windows.Input.InertiaRotationBehavior / DesiredRotation
public static TChild WithDesiredRotation<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Input.InertiaRotationBehavior, TChild>? doNotUse = null) where TChild: System.Windows.Input.InertiaRotationBehavior
{if (value != null) target.DesiredRotation = value ?? default; return target; }
// System.Windows.Input.InertiaTranslationBehavior / InitialVelocity
public static TChild WithInitialVelocity<TChild>(this TChild target, System.Windows.Vector? value, Disambigator<System.Windows.Input.InertiaTranslationBehavior, TChild>? doNotUse = null) where TChild: System.Windows.Input.InertiaTranslationBehavior
{if (value != null) target.InitialVelocity = value ?? default; return target; }
// System.Windows.Input.InertiaTranslationBehavior / DesiredDeceleration
public static TChild WithDesiredDeceleration<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Input.InertiaTranslationBehavior, TChild>? doNotUse = null) where TChild: System.Windows.Input.InertiaTranslationBehavior
{if (value != null) target.DesiredDeceleration = value ?? default; return target; }
// System.Windows.Input.InertiaTranslationBehavior / DesiredDisplacement
public static TChild WithDesiredDisplacement<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Input.InertiaTranslationBehavior, TChild>? doNotUse = null) where TChild: System.Windows.Input.InertiaTranslationBehavior
{if (value != null) target.DesiredDisplacement = value ?? default; return target; }
// System.Windows.Interop.HwndTarget / RenderMode
public static TChild WithRenderMode<TChild>(this TChild target, System.Windows.Interop.RenderMode? value, Disambigator<System.Windows.Interop.HwndTarget, TChild>? doNotUse = null) where TChild: System.Windows.Interop.HwndTarget
{if (value != null) target.RenderMode = value ?? default; return target; }
// System.Windows.Interop.HwndTarget / RootVisual
public static TChild WithRootVisual<TChild>(this TChild target, System.Windows.Media.Visual? value, Disambigator<System.Windows.Interop.HwndTarget, TChild>? doNotUse = null) where TChild: System.Windows.Interop.HwndTarget
{if (value != null) target.RootVisual = value ?? default; return target; }
// System.Windows.Interop.HwndTarget / BackgroundColor
public static TChild WithBackgroundColor<TChild>(this TChild target, System.Windows.Media.Color? value, Disambigator<System.Windows.Interop.HwndTarget, TChild>? doNotUse = null) where TChild: System.Windows.Interop.HwndTarget
{if (value != null) target.BackgroundColor = value ?? default; return target; }
// System.Windows.Input.InputLanguageChangingEventArgs / Rejected
public static TChild WithRejected<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Input.InputLanguageChangingEventArgs, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputLanguageChangingEventArgs
{if (value != null) target.Rejected = value ?? default; return target; }
// System.Windows.Input.InputLanguageManager / CurrentInputLanguage
public static System.Windows.Input.InputLanguageManager WithCurrentInputLanguage<TChild>(this System.Windows.Input.InputLanguageManager target, System.Globalization.CultureInfo? value) 
{if (value != null) target.CurrentInputLanguage = value ?? default; return target; }
// System.Windows.Input.InputScope / SrgsMarkup
public static TChild WithSrgsMarkup<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Input.InputScope, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputScope
{if (value != null) target.SrgsMarkup = value ?? default; return target; }
// System.Windows.Input.InputScope / RegularExpression
public static TChild WithRegularExpression<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Input.InputScope, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputScope
{if (value != null) target.RegularExpression = value ?? default; return target; }
// System.Windows.Input.InputScopeName / NameValue
public static TChild WithNameValue<TChild>(this TChild target, System.Windows.Input.InputScopeNameValue? value, Disambigator<System.Windows.Input.InputScopeName, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputScopeName
{if (value != null) target.NameValue = value ?? default; return target; }
// System.Windows.Input.InputScopePhrase / Name
public static TChild WithName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Input.InputScopePhrase, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputScopePhrase
{if (value != null) target.Name = value ?? default; return target; }
// System.Windows.Input.ManipulationPivot / Center
public static TChild WithCenter<TChild>(this TChild target, System.Windows.Point? value, Disambigator<System.Windows.Input.ManipulationPivot, TChild>? doNotUse = null) where TChild: System.Windows.Input.ManipulationPivot
{if (value != null) target.Center = value ?? default; return target; }
// System.Windows.Input.ManipulationPivot / Radius
public static TChild WithRadius<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Input.ManipulationPivot, TChild>? doNotUse = null) where TChild: System.Windows.Input.ManipulationPivot
{if (value != null) target.Radius = value ?? default; return target; }
// System.Windows.Input.CommandBinding / Command
public static TChild WithCommand<TChild>(this TChild target, System.Windows.Input.ICommand? value, Disambigator<System.Windows.Input.CommandBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.CommandBinding
{if (value != null) target.Command = value ?? default; return target; }
// System.Windows.Input.InputBinding / Gesture
public static TChild WithGesture<TChild>(this TChild target, System.Windows.Input.InputGesture? value, Disambigator<System.Windows.Input.InputBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.InputBinding
{if (value != null) target.Gesture = value ?? default; return target; }
// System.Windows.Input.KeyBinding / Gesture
public static TChild WithGesture<TChild>(this TChild target, System.Windows.Input.InputGesture? value, Disambigator<System.Windows.Input.KeyBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.KeyBinding
{if (value != null) target.Gesture = value ?? default; return target; }
// System.Windows.Input.MouseBinding / Gesture
public static TChild WithGesture<TChild>(this TChild target, System.Windows.Input.InputGesture? value, Disambigator<System.Windows.Input.MouseBinding, TChild>? doNotUse = null) where TChild: System.Windows.Input.MouseBinding
{if (value != null) target.Gesture = value ?? default; return target; }
// System.Windows.Input.MouseGesture / MouseAction
public static TChild WithMouseAction<TChild>(this TChild target, System.Windows.Input.MouseAction? value, Disambigator<System.Windows.Input.MouseGesture, TChild>? doNotUse = null) where TChild: System.Windows.Input.MouseGesture
{if (value != null) target.MouseAction = value ?? default; return target; }
// System.Windows.Input.MouseGesture / Modifiers
public static TChild WithModifiers<TChild>(this TChild target, System.Windows.Input.ModifierKeys? value, Disambigator<System.Windows.Input.MouseGesture, TChild>? doNotUse = null) where TChild: System.Windows.Input.MouseGesture
{if (value != null) target.Modifiers = value ?? default; return target; }
// System.Windows.Input.StylusPlugIns.StylusPlugIn / Enabled
public static TChild WithEnabled<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Input.StylusPlugIns.StylusPlugIn, TChild>? doNotUse = null) where TChild: System.Windows.Input.StylusPlugIns.StylusPlugIn
{if (value != null) target.Enabled = value ?? default; return target; }
// System.Windows.Input.StylusPlugIns.DynamicRenderer / DrawingAttributes
public static TChild WithDrawingAttributes<TChild>(this TChild target, System.Windows.Ink.DrawingAttributes? value, Disambigator<System.Windows.Input.StylusPlugIns.DynamicRenderer, TChild>? doNotUse = null) where TChild: System.Windows.Input.StylusPlugIns.DynamicRenderer
{if (value != null) target.DrawingAttributes = value ?? default; return target; }
// System.Windows.Media.ContainerVisual / Clip
public static TChild WithClip<TChild>(this TChild target, System.Windows.Media.Geometry? value, Disambigator<System.Windows.Media.ContainerVisual, TChild>? doNotUse = null) where TChild: System.Windows.Media.ContainerVisual
{if (value != null) target.Clip = value ?? default; return target; }
// System.Windows.Media.ContainerVisual / Opacity
public static TChild WithOpacity<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.ContainerVisual, TChild>? doNotUse = null) where TChild: System.Windows.Media.ContainerVisual
{if (value != null) target.Opacity = value ?? default; return target; }
// System.Windows.Media.ContainerVisual / OpacityMask
public static TChild WithOpacityMask<TChild>(this TChild target, System.Windows.Media.Brush? value, Disambigator<System.Windows.Media.ContainerVisual, TChild>? doNotUse = null) where TChild: System.Windows.Media.ContainerVisual
{if (value != null) target.OpacityMask = value ?? default; return target; }
// System.Windows.Media.ContainerVisual / CacheMode
public static TChild WithCacheMode<TChild>(this TChild target, System.Windows.Media.CacheMode? value, Disambigator<System.Windows.Media.ContainerVisual, TChild>? doNotUse = null) where TChild: System.Windows.Media.ContainerVisual
{if (value != null) target.CacheMode = value ?? default; return target; }
// System.Windows.Media.ContainerVisual / Effect
public static TChild WithEffect<TChild>(this TChild target, System.Windows.Media.Effects.Effect? value, Disambigator<System.Windows.Media.ContainerVisual, TChild>? doNotUse = null) where TChild: System.Windows.Media.ContainerVisual
{if (value != null) target.Effect = value ?? default; return target; }
// System.Windows.Media.ContainerVisual / XSnappingGuidelines
public static TChild WithXSnappingGuidelines<TChild>(this TChild target, System.Windows.Media.DoubleCollection? value, Disambigator<System.Windows.Media.ContainerVisual, TChild>? doNotUse = null) where TChild: System.Windows.Media.ContainerVisual
{if (value != null) target.XSnappingGuidelines = value ?? default; return target; }
// System.Windows.Media.ContainerVisual / YSnappingGuidelines
public static TChild WithYSnappingGuidelines<TChild>(this TChild target, System.Windows.Media.DoubleCollection? value, Disambigator<System.Windows.Media.ContainerVisual, TChild>? doNotUse = null) where TChild: System.Windows.Media.ContainerVisual
{if (value != null) target.YSnappingGuidelines = value ?? default; return target; }
// System.Windows.Media.ContainerVisual / Transform
public static TChild WithTransform<TChild>(this TChild target, System.Windows.Media.Transform? value, Disambigator<System.Windows.Media.ContainerVisual, TChild>? doNotUse = null) where TChild: System.Windows.Media.ContainerVisual
{if (value != null) target.Transform = value ?? default; return target; }
// System.Windows.Media.ContainerVisual / Offset
public static TChild WithOffset<TChild>(this TChild target, System.Windows.Vector? value, Disambigator<System.Windows.Media.ContainerVisual, TChild>? doNotUse = null) where TChild: System.Windows.Media.ContainerVisual
{if (value != null) target.Offset = value ?? default; return target; }
// System.Windows.Media.VisualCollection / Capacity
public static System.Windows.Media.VisualCollection WithCapacity<TChild>(this System.Windows.Media.VisualCollection target, System.Int32? value) 
{if (value != null) target.Capacity = value ?? default; return target; }
// System.Windows.Documents.DocumentPaginator / PageSize
public static TChild WithPageSize<TChild>(this TChild target, System.Windows.Size? value, Disambigator<System.Windows.Documents.DocumentPaginator, TChild>? doNotUse = null) where TChild: System.Windows.Documents.DocumentPaginator
{if (value != null) target.PageSize = value ?? default; return target; }
// System.Windows.Documents.DynamicDocumentPaginator / IsBackgroundPaginationEnabled
public static TChild WithIsBackgroundPaginationEnabled<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Documents.DynamicDocumentPaginator, TChild>? doNotUse = null) where TChild: System.Windows.Documents.DynamicDocumentPaginator
{if (value != null) target.IsBackgroundPaginationEnabled = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / WindowClassStyle
public static System.Windows.Interop.HwndSourceParameters WithWindowClassStyle<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Int32? value) 
{if (value != null) target.WindowClassStyle = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / WindowStyle
public static System.Windows.Interop.HwndSourceParameters WithWindowStyle<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Int32? value) 
{if (value != null) target.WindowStyle = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / ExtendedWindowStyle
public static System.Windows.Interop.HwndSourceParameters WithExtendedWindowStyle<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Int32? value) 
{if (value != null) target.ExtendedWindowStyle = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / PositionX
public static System.Windows.Interop.HwndSourceParameters WithPositionX<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Int32? value) 
{if (value != null) target.PositionX = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / PositionY
public static System.Windows.Interop.HwndSourceParameters WithPositionY<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Int32? value) 
{if (value != null) target.PositionY = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / Width
public static System.Windows.Interop.HwndSourceParameters WithWidth<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Int32? value) 
{if (value != null) target.Width = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / Height
public static System.Windows.Interop.HwndSourceParameters WithHeight<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Int32? value) 
{if (value != null) target.Height = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / WindowName
public static System.Windows.Interop.HwndSourceParameters WithWindowName<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.String? value) 
{if (value != null) target.WindowName = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / ParentWindow
public static System.Windows.Interop.HwndSourceParameters WithParentWindow<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.IntPtr? value) 
{if (value != null) target.ParentWindow = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / HwndSourceHook
public static System.Windows.Interop.HwndSourceParameters WithHwndSourceHook<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Windows.Interop.HwndSourceHook? value) 
{if (value != null) target.HwndSourceHook = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / AdjustSizingForNonClientArea
public static System.Windows.Interop.HwndSourceParameters WithAdjustSizingForNonClientArea<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Boolean? value) 
{if (value != null) target.AdjustSizingForNonClientArea = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / TreatAncestorsAsNonClientArea
public static System.Windows.Interop.HwndSourceParameters WithTreatAncestorsAsNonClientArea<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Boolean? value) 
{if (value != null) target.TreatAncestorsAsNonClientArea = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / UsesPerPixelOpacity
public static System.Windows.Interop.HwndSourceParameters WithUsesPerPixelOpacity<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Boolean? value) 
{if (value != null) target.UsesPerPixelOpacity = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / UsesPerPixelTransparency
public static System.Windows.Interop.HwndSourceParameters WithUsesPerPixelTransparency<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Boolean? value) 
{if (value != null) target.UsesPerPixelTransparency = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / RestoreFocusMode
public static System.Windows.Interop.HwndSourceParameters WithRestoreFocusMode<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Windows.Input.RestoreFocusMode? value) 
{if (value != null) target.RestoreFocusMode = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / AcquireHwndFocusInMenuMode
public static System.Windows.Interop.HwndSourceParameters WithAcquireHwndFocusInMenuMode<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Boolean? value) 
{if (value != null) target.AcquireHwndFocusInMenuMode = value ?? default; return target; }
// System.Windows.Interop.HwndSourceParameters / TreatAsInputRoot
public static System.Windows.Interop.HwndSourceParameters WithTreatAsInputRoot<TChild>(this System.Windows.Interop.HwndSourceParameters target, System.Boolean? value) 
{if (value != null) target.TreatAsInputRoot = value ?? default; return target; }
// System.Windows.Media.MediaPlayer / Volume
public static TChild WithVolume<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.MediaPlayer, TChild>? doNotUse = null) where TChild: System.Windows.Media.MediaPlayer
{if (value != null) target.Volume = value ?? default; return target; }
// System.Windows.Media.MediaPlayer / Balance
public static TChild WithBalance<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.MediaPlayer, TChild>? doNotUse = null) where TChild: System.Windows.Media.MediaPlayer
{if (value != null) target.Balance = value ?? default; return target; }
// System.Windows.Media.MediaPlayer / ScrubbingEnabled
public static TChild WithScrubbingEnabled<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.MediaPlayer, TChild>? doNotUse = null) where TChild: System.Windows.Media.MediaPlayer
{if (value != null) target.ScrubbingEnabled = value ?? default; return target; }
// System.Windows.Media.MediaPlayer / IsMuted
public static TChild WithIsMuted<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.MediaPlayer, TChild>? doNotUse = null) where TChild: System.Windows.Media.MediaPlayer
{if (value != null) target.IsMuted = value ?? default; return target; }
// System.Windows.Media.MediaPlayer / Position
public static TChild WithPosition<TChild>(this TChild target, System.TimeSpan? value, Disambigator<System.Windows.Media.MediaPlayer, TChild>? doNotUse = null) where TChild: System.Windows.Media.MediaPlayer
{if (value != null) target.Position = value ?? default; return target; }
// System.Windows.Media.MediaPlayer / SpeedRatio
public static TChild WithSpeedRatio<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.MediaPlayer, TChild>? doNotUse = null) where TChild: System.Windows.Media.MediaPlayer
{if (value != null) target.SpeedRatio = value ?? default; return target; }
// System.Windows.Media.MediaPlayer / Clock
public static TChild WithClock<TChild>(this TChild target, System.Windows.Media.MediaClock? value, Disambigator<System.Windows.Media.MediaPlayer, TChild>? doNotUse = null) where TChild: System.Windows.Media.MediaPlayer
{if (value != null) target.Clock = value ?? default; return target; }
// System.Windows.Media.FormattedText / PixelsPerDip
public static TChild WithPixelsPerDip<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.FormattedText, TChild>? doNotUse = null) where TChild: System.Windows.Media.FormattedText
{if (value != null) target.PixelsPerDip = value ?? default; return target; }
// System.Windows.Media.FormattedText / FlowDirection
public static TChild WithFlowDirection<TChild>(this TChild target, System.Windows.FlowDirection? value, Disambigator<System.Windows.Media.FormattedText, TChild>? doNotUse = null) where TChild: System.Windows.Media.FormattedText
{if (value != null) target.FlowDirection = value ?? default; return target; }
// System.Windows.Media.FormattedText / TextAlignment
public static TChild WithTextAlignment<TChild>(this TChild target, System.Windows.TextAlignment? value, Disambigator<System.Windows.Media.FormattedText, TChild>? doNotUse = null) where TChild: System.Windows.Media.FormattedText
{if (value != null) target.TextAlignment = value ?? default; return target; }
// System.Windows.Media.FormattedText / LineHeight
public static TChild WithLineHeight<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.FormattedText, TChild>? doNotUse = null) where TChild: System.Windows.Media.FormattedText
{if (value != null) target.LineHeight = value ?? default; return target; }
// System.Windows.Media.FormattedText / MaxTextWidth
public static TChild WithMaxTextWidth<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.FormattedText, TChild>? doNotUse = null) where TChild: System.Windows.Media.FormattedText
{if (value != null) target.MaxTextWidth = value ?? default; return target; }
// System.Windows.Media.FormattedText / MaxTextHeight
public static TChild WithMaxTextHeight<TChild>(this TChild target, System.Double? value, Disambigator<System.Windows.Media.FormattedText, TChild>? doNotUse = null) where TChild: System.Windows.Media.FormattedText
{if (value != null) target.MaxTextHeight = value ?? default; return target; }
// System.Windows.Media.FormattedText / MaxLineCount
public static TChild WithMaxLineCount<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.Media.FormattedText, TChild>? doNotUse = null) where TChild: System.Windows.Media.FormattedText
{if (value != null) target.MaxLineCount = value ?? default; return target; }
// System.Windows.Media.FormattedText / Trimming
public static TChild WithTrimming<TChild>(this TChild target, System.Windows.TextTrimming? value, Disambigator<System.Windows.Media.FormattedText, TChild>? doNotUse = null) where TChild: System.Windows.Media.FormattedText
{if (value != null) target.Trimming = value ?? default; return target; }
// System.Windows.Media.Media3D.Size3D / X
public static System.Windows.Media.Media3D.Size3D WithX<TChild>(this System.Windows.Media.Media3D.Size3D target, System.Double? value) 
{if (value != null) target.X = value ?? default; return target; }
// System.Windows.Media.Media3D.Size3D / Y
public static System.Windows.Media.Media3D.Size3D WithY<TChild>(this System.Windows.Media.Media3D.Size3D target, System.Double? value) 
{if (value != null) target.Y = value ?? default; return target; }
// System.Windows.Media.Media3D.Size3D / Z
public static System.Windows.Media.Media3D.Size3D WithZ<TChild>(this System.Windows.Media.Media3D.Size3D target, System.Double? value) 
{if (value != null) target.Z = value ?? default; return target; }
// System.Windows.Media.Animation.ClockController / SpeedRatio
public static System.Windows.Media.Animation.ClockController WithSpeedRatio<TChild>(this System.Windows.Media.Animation.ClockController target, System.Double? value) 
{if (value != null) target.SpeedRatio = value ?? default; return target; }
// System.Windows.Media.Animation.DoubleAnimationUsingPath / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.DoubleAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimationUsingPath
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.DoubleAnimationUsingPath / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.DoubleAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimationUsingPath
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.IKeyFrame / KeyTime
public static TChild WithKeyTime<TChild>(this TChild target, System.Windows.Media.Animation.KeyTime? value, Disambigator<System.Windows.Media.Animation.IKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.IKeyFrame
{if (value != null) target.KeyTime = value ?? default; return target; }
// System.Windows.Media.Animation.IKeyFrame / Value
public static TChild WithValue<TChild>(this TChild target, System.Object? value, Disambigator<System.Windows.Media.Animation.IKeyFrame, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.IKeyFrame
{if (value != null) target.Value = value ?? default; return target; }
// System.Windows.Media.Animation.IKeyFrameAnimation / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Collections.IList? value, Disambigator<System.Windows.Media.Animation.IKeyFrameAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.IKeyFrameAnimation
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.MatrixAnimationUsingPath / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.MatrixAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.MatrixAnimationUsingPath
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.PointAnimationUsingPath / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.PointAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimationUsingPath
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.PointAnimationUsingPath / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.PointAnimationUsingPath, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimationUsingPath
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.QuaternionAnimation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.QuaternionAnimation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.BooleanKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.ByteAnimation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.ByteAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteAnimation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.ByteAnimation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.ByteAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteAnimation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.ByteAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.ByteKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.ByteAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.ByteAnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.ByteAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteAnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.ByteAnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.ByteAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ByteAnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.CharAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.CharKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.CharAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.CharAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.ColorAnimation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.ColorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorAnimation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.ColorAnimation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.ColorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorAnimation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.ColorAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.ColorKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.ColorAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.ColorAnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.ColorAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorAnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.ColorAnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.ColorAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ColorAnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.DecimalAnimation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.DecimalAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalAnimation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.DecimalAnimation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.DecimalAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalAnimation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.DecimalKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.DoubleAnimation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.DoubleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.DoubleAnimation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.DoubleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.DoubleKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames / IsCumulative

public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.Int16Animation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Int16Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16Animation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.Int16Animation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Int16Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16Animation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.Int16AnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.Int16KeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.Int16AnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16AnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.Int16AnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Int16AnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16AnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.Int16AnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Int16AnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int16AnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.Int32Animation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Int32Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32Animation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.Int32Animation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Int32Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32Animation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.Int32AnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.Int32KeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.Int32AnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32AnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.Int32AnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Int32AnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32AnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.Int32AnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Int32AnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int32AnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.Int64Animation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Int64Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64Animation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.Int64Animation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Int64Animation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64Animation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.Int64AnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.Int64KeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.Int64AnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64AnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.Int64AnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Int64AnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64AnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.Int64AnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Int64AnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Int64AnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.MatrixKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.ObjectKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.Point3DAnimation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Point3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DAnimation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.Point3DAnimation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Point3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DAnimation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.Point3DKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.PointAnimation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.PointAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.PointAnimation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.PointAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.PointAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.PointKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.PointAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.PointAnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.PointAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.PointAnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.PointAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.PointAnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.QuaternionKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.RectAnimation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.RectAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectAnimation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.RectAnimation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.RectAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectAnimation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.RectAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.RectKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.RectAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.RectAnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.RectAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectAnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.RectAnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.RectAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.RectAnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.Rotation3DAnimation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Rotation3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DAnimation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.Rotation3DAnimation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Rotation3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DAnimation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.Rotation3DKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.SingleAnimation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.SingleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleAnimation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.SingleAnimation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.SingleAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleAnimation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.SingleAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.SingleKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.SingleAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.SingleAnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.SingleAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleAnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.SingleAnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.SingleAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SingleAnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.SizeAnimation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.SizeAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeAnimation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.SizeAnimation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.SizeAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeAnimation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.SizeAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.SizeKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.SizeAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.SizeAnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.SizeAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeAnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.SizeAnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.SizeAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.SizeAnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.StringAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.StringKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.StringAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.StringAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.Vector3DAnimation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Vector3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DAnimation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.Vector3DAnimation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Vector3DAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DAnimation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.Vector3DKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.VectorAnimation / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.VectorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorAnimation
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.VectorAnimation / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.VectorAnimation, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorAnimation
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Animation.VectorAnimationUsingKeyFrames / KeyFrames
public static TChild WithKeyFrames<TChild>(this TChild target, System.Windows.Media.Animation.VectorKeyFrameCollection? value, Disambigator<System.Windows.Media.Animation.VectorAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorAnimationUsingKeyFrames
{if (value != null) target.KeyFrames = value ?? default; return target; }
// System.Windows.Media.Animation.VectorAnimationUsingKeyFrames / IsAdditive
public static TChild WithIsAdditive<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.VectorAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorAnimationUsingKeyFrames
{if (value != null) target.IsAdditive = value ?? default; return target; }
// System.Windows.Media.Animation.VectorAnimationUsingKeyFrames / IsCumulative
public static TChild WithIsCumulative<TChild>(this TChild target, System.Boolean? value, Disambigator<System.Windows.Media.Animation.VectorAnimationUsingKeyFrames, TChild>? doNotUse = null) where TChild: System.Windows.Media.Animation.VectorAnimationUsingKeyFrames
{if (value != null) target.IsCumulative = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapMetadata / Author
public static TChild WithAuthor<TChild>(this TChild target, System.Collections.ObjectModel.ReadOnlyCollection<System.String>? value, Disambigator<System.Windows.Media.Imaging.BitmapMetadata, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapMetadata
{if (value != null) target.Author = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapMetadata / Title
public static TChild WithTitle<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Media.Imaging.BitmapMetadata, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapMetadata
{if (value != null) target.Title = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapMetadata / Rating
public static TChild WithRating<TChild>(this TChild target, System.Int32? value, Disambigator<System.Windows.Media.Imaging.BitmapMetadata, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapMetadata
{if (value != null) target.Rating = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapMetadata / Subject
public static TChild WithSubject<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Media.Imaging.BitmapMetadata, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapMetadata
{if (value != null) target.Subject = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapMetadata / Comment
public static TChild WithComment<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Media.Imaging.BitmapMetadata, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapMetadata
{if (value != null) target.Comment = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapMetadata / DateTaken
public static TChild WithDateTaken<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Media.Imaging.BitmapMetadata, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapMetadata
{if (value != null) target.DateTaken = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapMetadata / ApplicationName
public static TChild WithApplicationName<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Media.Imaging.BitmapMetadata, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapMetadata
{if (value != null) target.ApplicationName = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapMetadata / Copyright
public static TChild WithCopyright<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Media.Imaging.BitmapMetadata, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapMetadata
{if (value != null) target.Copyright = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapMetadata / CameraManufacturer
public static TChild WithCameraManufacturer<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Media.Imaging.BitmapMetadata, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapMetadata
{if (value != null) target.CameraManufacturer = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapMetadata / CameraModel
public static TChild WithCameraModel<TChild>(this TChild target, System.String? value, Disambigator<System.Windows.Media.Imaging.BitmapMetadata, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapMetadata
{if (value != null) target.CameraModel = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapMetadata / Keywords
public static TChild WithKeywords<TChild>(this TChild target, System.Collections.ObjectModel.ReadOnlyCollection<System.String>? value, Disambigator<System.Windows.Media.Imaging.BitmapMetadata, TChild>? doNotUse = null) where TChild: System.Windows.Media.Imaging.BitmapMetadata
{if (value != null) target.Keywords = value ?? default; return target; }
// System.Windows.Media.Imaging.JpegBitmapEncoder / QualityLevel
public static System.Windows.Media.Imaging.JpegBitmapEncoder WithQualityLevel<TChild>(this System.Windows.Media.Imaging.JpegBitmapEncoder target, System.Int32? value) 
{if (value != null) target.QualityLevel = value ?? default; return target; }
// System.Windows.Media.Imaging.JpegBitmapEncoder / Rotation
public static System.Windows.Media.Imaging.JpegBitmapEncoder WithRotation<TChild>(this System.Windows.Media.Imaging.JpegBitmapEncoder target, System.Windows.Media.Imaging.Rotation? value) 
{if (value != null) target.Rotation = value ?? default; return target; }
// System.Windows.Media.Imaging.JpegBitmapEncoder / FlipHorizontal
public static System.Windows.Media.Imaging.JpegBitmapEncoder WithFlipHorizontal<TChild>(this System.Windows.Media.Imaging.JpegBitmapEncoder target, System.Boolean? value) 
{if (value != null) target.FlipHorizontal = value ?? default; return target; }
// System.Windows.Media.Imaging.JpegBitmapEncoder / FlipVertical
public static System.Windows.Media.Imaging.JpegBitmapEncoder WithFlipVertical<TChild>(this System.Windows.Media.Imaging.JpegBitmapEncoder target, System.Boolean? value) 
{if (value != null) target.FlipVertical = value ?? default; return target; }
// System.Windows.Media.Imaging.PngBitmapEncoder / Interlace
public static System.Windows.Media.Imaging.PngBitmapEncoder WithInterlace<TChild>(this System.Windows.Media.Imaging.PngBitmapEncoder target, System.Windows.Media.Imaging.PngInterlaceOption? value) 
{if (value != null) target.Interlace = value ?? default; return target; }
// System.Windows.Media.Imaging.TiffBitmapEncoder / Compression
public static System.Windows.Media.Imaging.TiffBitmapEncoder WithCompression<TChild>(this System.Windows.Media.Imaging.TiffBitmapEncoder target, System.Windows.Media.Imaging.TiffCompressOption? value) 
{if (value != null) target.Compression = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / ImageQualityLevel
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithImageQualityLevel<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Single? value) 
{if (value != null) target.ImageQualityLevel = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / Lossless
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithLossless<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Boolean? value) 
{if (value != null) target.Lossless = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / Rotation
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithRotation<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Windows.Media.Imaging.Rotation? value) 
{if (value != null) target.Rotation = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / FlipHorizontal
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithFlipHorizontal<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Boolean? value) 
{if (value != null) target.FlipHorizontal = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / FlipVertical
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithFlipVertical<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Boolean? value) 
{if (value != null) target.FlipVertical = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / UseCodecOptions
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithUseCodecOptions<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Boolean? value) 
{if (value != null) target.UseCodecOptions = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / QualityLevel
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithQualityLevel<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Byte? value) 
{if (value != null) target.QualityLevel = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / SubsamplingLevel
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithSubsamplingLevel<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Byte? value) 
{if (value != null) target.SubsamplingLevel = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / OverlapLevel
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithOverlapLevel<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Byte? value) 
{if (value != null) target.OverlapLevel = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / HorizontalTileSlices
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithHorizontalTileSlices<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Int16? value) 
{if (value != null) target.HorizontalTileSlices = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / VerticalTileSlices
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithVerticalTileSlices<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Int16? value) 
{if (value != null) target.VerticalTileSlices = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / FrequencyOrder
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithFrequencyOrder<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Boolean? value) 
{if (value != null) target.FrequencyOrder = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / InterleavedAlpha
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithInterleavedAlpha<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Boolean? value) 
{if (value != null) target.InterleavedAlpha = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / AlphaQualityLevel
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithAlphaQualityLevel<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Byte? value) 
{if (value != null) target.AlphaQualityLevel = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / CompressedDomainTranscode
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithCompressedDomainTranscode<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Boolean? value) 
{if (value != null) target.CompressedDomainTranscode = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / ImageDataDiscardLevel
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithImageDataDiscardLevel<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Byte? value) 
{if (value != null) target.ImageDataDiscardLevel = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / AlphaDataDiscardLevel
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithAlphaDataDiscardLevel<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Byte? value) 
{if (value != null) target.AlphaDataDiscardLevel = value ?? default; return target; }
// System.Windows.Media.Imaging.WmpBitmapEncoder / IgnoreOverlap
public static System.Windows.Media.Imaging.WmpBitmapEncoder WithIgnoreOverlap<TChild>(this System.Windows.Media.Imaging.WmpBitmapEncoder target, System.Boolean? value) 
{if (value != null) target.IgnoreOverlap = value ?? default; return target; }
// System.Windows.Media.Imaging.BitmapImage / BaseUri
public static System.Windows.Media.Imaging.BitmapImage WithBaseUri<TChild>(this System.Windows.Media.Imaging.BitmapImage target, System.Uri? value) 
{if (value != null) target.BaseUri = value ?? default; return target; }
}
}

