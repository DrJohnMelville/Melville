<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:capLockIndicator="clr-namespace:Melville.WpfControls.CapLockIndicator"
    xmlns:Buttons="clr-namespace:Melville.WpfControls.Buttons"
    xmlns:checkBoxLists="clr-namespace:Melville.WpfControls.CheckBoxLists"
    xmlns:wpfHacks="clr-namespace:Melville.MVVM.Wpf.WpfHacks;assembly=Melville.MVVM.Wpf">

<!--
    <Style TargetType="{x:Type waitMessages:WaitMessageWrapper}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type waitMessages:WaitMessageWrapper}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock FontSize="18" HorizontalAlignment="Center" Grid.Row="1" Grid.ColumnSpan="3"
                                   Text ="{TemplateBinding WaitMessage}"/>
                        <ProgressBar Minimum="0" Maximum="{TemplateBinding Total}" Value="{TemplateBinding Progress}" Height="15"
                                     wpfHacks:VisibilityHack.CollapseUnless="{Binding Total, RelativeSource={x:Static RelativeSource.TemplatedParent},
                            Converter={x:Static waitMessages:WaitMessageWrapper.ShowProgress}}" Grid.Row="2" Grid.Column="1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="WaitMessage" Value="{x:Null}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type waitMessages:WaitMessageWrapper}">
                            <Border Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <ContentPresenter/>
                                    <TextBlock HorizontalAlignment="Center" Foreground="Red" Margin="5 0 5 0" MinHeight="0"
                                               Text="{TemplateBinding ErrorMessage}" TextWrapping="Wrap" Grid.Row="1"/>

                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>

    </Style>
-->
    <Style TargetType="{x:Type capLockIndicator:ShowCapLock}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type capLockIndicator:ShowCapLock}">
                    <Grid>
                        <ContentPresenter Name="Presenter"/>
                        <Popup Placement="Bottom" PlacementTarget="{Binding ElementName=Presenter}" 
                               IsOpen="{TemplateBinding ShowMessage}">
                            <Border Background="LightGoldenrodYellow" BorderThickness="1" BorderBrush="Black">
                                <TextBlock Foreground="Black">
                                    <TextBlock>Caps Lock is down.</TextBlock>
                                </TextBlock>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type Buttons:LinkButton}" BasedOn="{StaticResource {x:Type Button}}">

        <Setter Property="Width" Value="Auto"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ContentPresenter Content="{TemplateBinding Content}" 
                                      ContentTemplate="{TemplateBinding  ContentTemplate}"
                                      VerticalAlignment="Center"
                    >
                        <ContentPresenter.Resources>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="TextDecorations" Value="Underline" />
                            </Style>
                        </ContentPresenter.Resources>
                    </ContentPresenter>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}" />
        <Setter Property="Cursor" Value="Hand" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type checkBoxLists:CheckBoxList}" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <CheckBox IsChecked="{Binding IsSelected, 
                                    RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}},
                                    Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                    ><ContentPresenter/></CheckBox>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
